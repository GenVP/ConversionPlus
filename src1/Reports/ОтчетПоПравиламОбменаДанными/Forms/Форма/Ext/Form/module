

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ОТЧЕТА

// Функция проверяет заполненность необходимых для отчета реквизитов:
// Конвертация - исследуемая конвертация
// Хотя бы один из флажков: ВыводитьСинонимыОбъектов, ВыводитьИменаОбъектов
Функция ЗаполненыНеобходимыеРеквизиты()	
	Если Не ЗначениеЗаполнено(Конвертация) Тогда
		Предупреждение(НСтр("ru = 'Не выбрана конвертация для исследования'"));
		Возврат Ложь;
	КонецЕсли;	
	Возврат Истина;	
КонецФункции

// Функция формирует запрос данных по выбранной конвертации
Функция СформироватьЗапросДанных()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПравилаКонвертацииЗначений.Ссылка КАК Ссылка,
	|	ПравилаКонвертацииЗначений.Владелец КАК ПКО,
	|	0 КАК ИдентификаторТипа,
	|	ЛОЖЬ КАК Отключить,
	|	ВЫБОР
	|		КОГДА ПравилаКонвертацииЗначений.Владелец.Источник = NULL
	|			ТОГДА NULL
	|		ИНАЧЕ ПравилаКонвертацииЗначений.Владелец.Источник.Имя
	|	КОНЕЦ КАК Наименование
	|ИЗ
	|	Справочник.ПравилаКонвертацииЗначений КАК ПравилаКонвертацииЗначений
	|ГДЕ
	|	ПравилаКонвертацииЗначений.Владелец.Владелец = &Владелец
	|	И ПравилаКонвертацииЗначений.Владелец.ЭтоГруппа = ЛОЖЬ
	|	И ПравилаКонвертацииЗначений.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПравилаКонвертацииСвойств.Ссылка,
	|	ПравилаКонвертацииСвойств.Владелец,
	|	1,
	|	ПравилаКонвертацииСвойств.Отключить,
	|	ВЫБОР
	|		КОГДА ПравилаКонвертацииСвойств.Владелец.Источник = NULL
	|			ТОГДА NULL
	|		ИНАЧЕ ПравилаКонвертацииСвойств.Владелец.Источник.Имя
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
	|ГДЕ
	|	ПравилаКонвертацииСвойств.Владелец.Владелец = &Владелец
	|	И ПравилаКонвертацииСвойств.Владелец.ЭтоГруппа = ЛОЖЬ
	|	И ПравилаКонвертацииСвойств.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПравилаВыгрузкиДанных.Ссылка,
	|	ПравилаВыгрузкиДанных.ПравилоКонвертации,
	|	2,
	|	ПравилаВыгрузкиДанных.Отключить,
	|	ВЫБОР
	|		КОГДА ПравилаВыгрузкиДанных.ПравилоКонвертации.Источник = NULL
	|			ТОГДА NULL
	|		ИНАЧЕ ПравилаВыгрузкиДанных.ПравилоКонвертации.Источник.Имя
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ПравилаВыгрузкиДанных КАК ПравилаВыгрузкиДанных
	|ГДЕ
	|	ПравилаВыгрузкиДанных.Владелец = &Владелец
	|	И ПравилаВыгрузкиДанных.ПравилоКонвертации.ЭтоГруппа = ЛОЖЬ
	|	И ПравилаВыгрузкиДанных.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПКО,
	|	Наименование";
	Запрос.УстановитьПараметр("Владелец",Конвертация);
	Возврат Запрос;
КонецФункции

// Процедура обработки полученных данных запроса для вывода в печатную форму.
//
// Параметры: РезультатЗапроса. Тип - РезультатЗапроса.
// Результат выполнения запроса по данным конвертации
Процедура ВывестиВМакет(РезультатЗапроса)
	
	ЭлементыФормы.ПолеРезультата.Очистить();
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.НачатьАвтогруппировкуСтрок();	
	Макет = ПолучитьМакет("МакетОтчета");
	
	//Выведем заголовки отчета
	
	//Общая шапка отчета
	ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокОтчета"
	, Новый Структура("КонфигурацияИсточник, КонфигурацияПриемник", Конвертация.Источник.Синоним, Конвертация.Приемник.Синоним));
	
	ВывестиСтрокуВТабличныйДокумент(Макет,ТабДок,"РазделительГрупп");																	
	
	// Шапка раздела "Общие требования"
	ВывестиСтрокуВТабличныйДокумент(Макет,ТабДок,"ЗаголовокРазделаОтчета",Новый Структура("ЗаголовокРазделаОтчета"
	,"Общие сведения о конвертации данных"));
	
	// Выведем данные по версиям конфигураций конвертации									
	ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертации"
	, Новый Структура("ИмяДанных, ТипДанных","Версия конфигурации-источника:", Конвертация.Источник.Версия),Ложь,1);									
	ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертации"
	, Новый Структура("ИмяДанных, ТипДанных","Версия конфигурации-приемника:", Конвертация.Приемник.Версия),Ложь,1);																		
	ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертации"
	, Новый Структура("ИмяДанных",Конвертация.Описание),,1);																											
	ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "РазделительГрупп",,,1);																	
	
	//Определим и выведем все типовые и нетиповые ПКО
	ВывестиОбщуюСводкуПоПравиламКонвертацииОбъектов(Макет,ТабДок,РезультатЗапроса);
	//Выведем все неконвертируемые объекты метаданных
	
	ВывестиНеконвертируемыеОбъектыМетаданных(Макет,ТабДок,РезультатЗапроса);
	
	// Выведем детально по каждому ПКО сведения
	
	// Шапка раздела "Общие требования"
	ВывестиСтрокуВТабличныйДокумент(Макет,ТабДок,"ЗаголовокРазделаОтчета",Новый Структура("ЗаголовокРазделаОтчета"
	,"Детально по конвертируемым объектам"));
	
	ВывестиДетальныеЗаписиПоПКО(Макет,ТабДок, РезультатЗапроса);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ЭлементыФормы.ПолеРезультата.ВставитьОбласть(ТабДок.Область());
	ЭлементыФормы.ПолеРезультата.ОбластьПечати = ТабДок.Область();
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ ВЫВОДА ДАННЫХ В МАКЕТ

Процедура ВывестиСписокОбъектовВКолонки(Макет,ТабДок,ПодчиненныеОбъекты,Область)
	
	//Определим количество необходимых строк
	КоличествоОбъектов = ПодчиненныеОбъекты.Количество();
	КоличествоСтрок = КоличествоОбъектов/2;
	Если Цел(КоличествоСтрок) <> КоличествоСтрок Тогда
		КоличествоСтрок = Цел(КоличествоСтрок)+1;
	КонецЕсли;
	
	СчетчикСтрок = 0;
	
	Пока СчетчикСтрок < КоличествоСтрок Цикл
		
		ВыводитьВторуюКолонку = (КоличествоОбъектов >=((СчетчикСтрок)+КоличествоСтрок+1));
		
		Если ВыводитьВторуюКолонку  Тогда
			
			ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, Область
			, Новый Структура("НомерПП1, ТипДанных1, НомерПП2, ТипДанных2"
			, (СчетчикСтрок)+1 ,ПодчиненныеОбъекты[СчетчикСтрок].Ссылка.Имя
			, (СчетчикСтрок)+1+КоличествоСтрок ,ПодчиненныеОбъекты[(СчетчикСтрок)+КоличествоСтрок].Ссылка.Имя),,3);				
		Иначе
			
			ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок,Область
			, Новый Структура("НомерПП1, ТипДанных1"
			, (СчетчикСтрок)+1 ,ПодчиненныеОбъекты[СчетчикСтрок].Ссылка.Имя),,3);					
			
		КонецЕсли;
		
		СчетчикСтрок = СчетчикСтрок+1;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ВывестиСтрокуВТабличныйДокумент(Макет,ТабДок,ИмяОбласти,СтруктураПараметров = Неопределено,ПоказыватьКакТип = Истина,
	УровеньВывода = 0, ТекстРасшифровки = "")
	
	Если СтруктураПараметров <> Неопределено Тогда
		Описание = СтруктураПараметров.Свойство("ОписаниеДанных");
		
		Если Описание Тогда
			ИмяОбласти = ИмяОбласти + "Описание";
		КонецЕсли;
		
		ТипДанных = СтруктураПараметров.Свойство("ТипДанных");
		
		Если ТипДанных Тогда 
			СтруктураПараметров.ТипДанных = ОграничениеТипов(Строка(СтруктураПараметров.ТипДанных));
		КонецЕсли;
			
		Если ТипДанных И Не ПустаяСтрока(СтруктураПараметров.ТипДанных) И ПоказыватьКакТип Тогда
			СтруктураПараметров.ТипДанных = "("+СтруктураПараметров.ТипДанных+")";
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьВывода = Макет.ПолучитьОбласть(ИмяОбласти);
	Если СтруктураПараметров <> Неопределено И СтруктураПараметров.Количество() > 0 Тогда
		Для Каждого Параметр Из СтруктураПараметров Цикл
			ОбластьВывода.Параметры[Параметр.Ключ]= Параметр.Значение;
		КонецЦикла;
	КонецЕсли;
	
	// если в расшифровке что -то есть тогда
	// выводим расшифровку для перехода от оглавления к делталям всегда
	// а расшифровку для перехода непосредственно к правилам -  только в случае, если 
	// взведен флага "Выводить системные сообщения"
	Если Не ПустаяСтрока(ТекстРасшифровки) И (ВыводитьСистемныеСообщения ИЛИ ТипЗнч(ТекстРасшифровки) <> Тип("СправочникСсылка.ПравилаКонвертацииОбъектов") )Тогда
		ОбластьВывода.Параметры.Расшифровка = ТекстРасшифровки;
	КонецЕсли;
	
	ОбластьЯчеек = ТабДок.Вывести(ОбластьВывода, УровеньВывода);
	
	Если Не ПустаяСтрока(ТекстРасшифровки) И (ВыводитьСистемныеСообщения ИЛИ ТипЗнч(ТекстРасшифровки) <> Тип("СправочникСсылка.ПравилаКонвертацииОбъектов") )Тогда
		ОбластьЯчеек.Гиперссылка = Истина;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Функция формирует представление объекта в отчете
//Если тип объекта составной - набор записей, виды субконто, подчиненный справочник
// или табличная часть - надо перед именем объекта вывести его вид.
// 
// Возвращаемое значение: Строка. Если тип простой - возвращаем описание без типа.
// Если составной - полное представление объекта с типом
//
// Параметры: 
// - Объект. Тип - Справочник.Свойства.  Исследуемое свойство
// - ТекущееОписаниеОбъекта. Тип - Строка. Описание объекта без типа.
Функция ДобавитьОписаниеТипа(Объект, ТекущееОписаниеОбъекта)
	
	Если Объект.Вид = Перечисления.ВидыСвойств.Свойство 
		ИЛИ Объект.Вид = Перечисления.ВидыСвойств.Измерение 
		ИЛИ Объект.Вид = Перечисления.ВидыСвойств.Реквизит 
		ИЛИ Объект.Вид = Перечисления.ВидыСвойств.Ресурс 
		Тогда
		Возврат ТекущееОписаниеОбъекта;
	Иначе
		Возврат Строка(Объект.Вид)+" "  + ТекущееОписаниеОбъекта;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьРазделительПорядковогоНомера(НомерПП)
	Возврат Строка(НомерПП)+". ";
КонецФункции

Процедура СостояниеОтчета(ОтчетАктуален)
	Если ОтчетАктуален Тогда
		ЭлементыФормы.Надпись1.Заголовок = "Отчет сформирован";
	Иначе
		ЭлементыФормы.Надпись1.Заголовок = "Отчет не сформирован";
	КонецЕсли;		
КонецПроцедуры

Функция ОграничениеТипов(СтрокаТипов)
	СтрокаПроверки = СтрокаТипов;
	// если сокращаем составные описания, тогда
	Если СокращатьСоставныеОписания Тогда
		СчетчикТипов = 0 ;
		СуммаПозиций = 0;
		// выберем столько описаний типов, сколько задано в настройках
		Пока СчетчикТипов < КоличествоВыводимыхТипов Цикл
			
			ПозицияЗапятой = Найти(СтрокаПроверки,",");
			// если описаний меньше, чем задано в настройках, то выйдем из цикла проверки
			Если ПозицияЗапятой = 0 Тогда 
				Прервать;
			КонецЕсли;
			СтрокаПроверки = Сред(СтрокаПроверки, ПозицияЗапятой+1);
			СчетчикТипов = СчетчикТипов+1;
			СуммаПозиций  = СуммаПозиций+ПозицияЗапятой;
		КонецЦикла;
		
		// если типов меньше заданного порога, вернем исходную строку
		Если ПозицияЗапятой = 0 Тогда
			Возврат СтрокаТипов;
		КонецЕсли;          
		
		СтрокаВозврата = Лев(СтрокаТипов, СуммаПозиций)+ " ...";
        Возврат СтрокаВозврата;	
		
	Иначе
		Возврат СтрокаТипов;
	КонецЕсли;
	
		
КонецФункции	

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если Не ЗаполненыНеобходимыеРеквизиты() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДанных = СформироватьЗапросДанных();
	Результат = ЗапросДанных.Выполнить();
	ВывестиВМакет(Результат);
	СостояниеОтчета(Истина);
	
КонецПроцедуры

Процедура КонвертацияПриИзменении(Элемент)
	СостояниеОтчета(Ложь);
КонецПроцедуры

Процедура ПолеРезультатаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТипЗнч(Область.Расшифровка) = Тип("СправочникСсылка.ПравилаКонвертацииОбъектов") Тогда
		СтандартнаяОбработка = Истина;
	ИначеЕсли Не ПустаяСтрока(Область.Расшифровка) Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.ТекущаяОбласть = Элемент.НайтиТекст(Область.Расшифровка);	
	КонецЕсли;
	
КонецПроцедуры

Процедура Надпись2Нажатие(Элемент)
	ФормаНастроек = ПолучитьФорму("ФормаНастроекОтчета");
	ФормаНастроек.ОткрытьМодально();
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ ДЛЯ ВЫВОДА

Процедура ВывестиОбщуюСводкуПоПравиламКонвертацииОбъектов(Макет,ТабДок,РезультатЗапроса)
	
	ТаблицаПКО = РезультатЗапроса.Выгрузить();
	
	Для Каждого Строка Из ТаблицаПКО Цикл
		Если Строка.ПКО <> Null И Строка.ПКО.ЭтоГруппа Тогда
			ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииОтступ"
			, Новый Структура("ИмяДанных, ТипДанных","Данное правило: "+Строка.Ссылка+" ссылается на группу.", Строка.ПКО));	
		КонецЕсли;
	КонецЦикла;
	
	
	ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокГруппыРаздела"
	, Новый Структура("ЗаголовокГруппыРаздела","Объекты, конвертируемые без особенностей (типы источника и приемника совпадают, отсутствуют дополнительные обработчики данных)"),,1);
	
	ТаблицаПКО.Свернуть("ПКО");
	ТаблицаПКО.Колонки.Добавить("НеТиповое");
	
	// в таблице ПКО пометим нетиповые для последующего вывода. Типовые выведем сразу:
	
	ПорядковыйНомер = 1;
	Для Каждого ЭлементПКО из ТаблицаПКО Цикл
		Если ЭлементПКО.ПКО <> Null Тогда
			Если (Не ПустаяСтрока(ЭлементПКО.ПКО.АлгоритмПередЗагрузкойОбъекта)
				ИЛИ Не ПустаяСтрока(ЭлементПКО.ПКО.АлгоритмПриЗагрузкеОбъекта)
				ИЛИ Не ПустаяСтрока(ЭлементПКО.ПКО.АлгоритмПослеЗагрузкиОбъекта)
				ИЛИ Не ПустаяСтрока(ЭлементПКО.ПКО.АлгоритмПоследовательностьПолейПоиска)
				ИЛИ Не ПустаяСтрока(ЭлементПКО.ПКО.АлгоритмПередВыгрузкойОбъекта)
				ИЛИ Не ПустаяСтрока(ЭлементПКО.ПКО.АлгоритмПриВыгрузкеОбъекта)
				ИЛИ Не ПустаяСтрока(ЭлементПКО.ПКО.АлгоритмПослеВыгрузкиОбъекта)
				ИЛИ Не ПустаяСтрока(ЭлементПКО.ПКО.АлгоритмПослеВыгрузкиОбъектаВФайлОбмена)
				ИЛИ	ЭлементПКО.ПКО.ТипИсточника <> ЭлементПКО.ПКО.ТипПриемника)
				//Добавим условие по набору констант
				ИЛИ (ЭлементПКО.ПКО.Источник.Тип =Перечисления.ТипыОбъектов.НаборКонстант И Конвертация.Источник <> Конвертация.Приемник)
				Тогда
				ЭлементПКО.НеТиповое = Истина;
				
			Иначе
				ЭлементПКО.НеТиповое = Ложь;
				ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииОтступ"
				, Новый Структура("НомерПП, ИмяДанных, ТипДанных",ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер),Строка(ЭлементПКО.ПКО.Источник.Тип) + " """+ ЭлементПКО.ПКО.Источник.Синоним, ЭлементПКО.ПКО.ТипИсточника),,2,Строка(ЭлементПКО.ПКО.Источник.Тип)+": """+Строка(ЭлементПКО.ПКО.Источник.Синоним)+""".");	
				ПорядковыйНомер = ПорядковыйНомер +1;				
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	//Выведем нетиповые ПКО
	ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокГруппыРаздела"
	, Новый Структура("ЗаголовокГруппыРаздела","Объекты, конвертируемые с особенностями"),,1);
	
	ПорядковыйНомер = 1;
	Для Каждого ЭлементПКО из ТаблицаПКО Цикл
		
		Если ЭлементПКО.НеТиповое <>Неопределено И ЭлементПКО.НеТиповое Тогда
					
			ИмяОбластиПечати = ?(ПустаяСтрока(ЭлементПКО.ПКО.Описание) И ВыводитьСистемныеСообщения ,"СтрокаДанныеКонвертацииОтступОшибка","СтрокаДанныеКонвертацииОтступ");
		 				
			//Если особенность в том, что не задан источник, тогда изменим параметры вывода на "Дополнительные данные"
			
			Если ВыводитьСистемныеСообщения Тогда
				
				Если ЭлементПКО.ПКО.Источник.Наименование = "" Тогда
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, ИмяОбластиПечати
					, Новый Структура("НомерПП, ИмяДанных, ТипДанных, ОписаниеДанных"
					, ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер)
					, "Выгрузка дополнительных данных по правилу: "+СокрЛП(Строка(ЭлементПКО.ПКО.Код)) 
					, "Объект-приемник: "+ЭлементПКО.ПКО.Приемник
					, ?(ПустаяСтрока(ЭлементПКО.ПКО.Описание),"Описание не задано", ЭлементПКО.ПКО.Описание)),,2
					, "Выгружаются дополнительные данные по правилу: "+ СокрЛП(Строка(ЭлементПКО.ПКО.Код)));	
				Иначе
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, ИмяОбластиПечати
					, Новый Структура("НомерПП, ИмяДанных, ТипДанных, ОписаниеДанных"
					,ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер)
					, Строка(ЭлементПКО.ПКО.Источник.Тип) + " """+ ЭлементПКО.ПКО.Источник.Синоним+""""
					, ЭлементПКО.ПКО.ТипИсточника, ?(ПустаяСтрока(ЭлементПКО.ПКО.Описание),"Описание не задано"
					, ЭлементПКО.ПКО.Описание)),,2
					,Строка(ЭлементПКО.ПКО.Источник.Тип)+": """+Строка(ЭлементПКО.ПКО.Источник.Синоним)+""".");	
					
				КонецЕсли;
				
			Иначе	
				
				Если ПустаяСтрока(ЭлементПКО.ПКО.Описание) Тогда
					НаборТипов = "НомерПП, ИмяДанных, ТипДанных";
				Иначе
					НаборТипов = "НомерПП, ИмяДанных, ТипДанных, ОписаниеДанных";
				КонецЕсли;
								
				Если ЭлементПКО.ПКО.Источник.Наименование = "" Тогда
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, ИмяОбластиПечати
					, Новый Структура(НаборТипов
					, ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер)
					, "Выгрузка дополнительных данных по правилу: "+СокрЛП(Строка(ЭлементПКО.ПКО.Код)) 
					, "Объект-приемник: "+ЭлементПКО.ПКО.Приемник
					, ?(ПустаяСтрока(ЭлементПКО.ПКО.Описание),"Описание не задано", ЭлементПКО.ПКО.Описание)),,2
					, "Выгружаются дополнительные данные по правилу: "+ СокрЛП(Строка(ЭлементПКО.ПКО.Код)));	
				Иначе
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, ИмяОбластиПечати
					, Новый Структура(НаборТипов
					,ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер)
					, Строка(ЭлементПКО.ПКО.Источник.Тип) + " """+ ЭлементПКО.ПКО.Источник.Синоним+""""
					, ЭлементПКО.ПКО.ТипИсточника, ?(ПустаяСтрока(ЭлементПКО.ПКО.Описание),"Описание не задано"
					, ЭлементПКО.ПКО.Описание)),,2
					,Строка(ЭлементПКО.ПКО.Источник.Тип)+": """+Строка(ЭлементПКО.ПКО.Источник.Синоним)+""".");	
					
				КонецЕсли;
				
				
			КонецЕсли;	
				
			ПорядковыйНомер = ПорядковыйНомер +1;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиНеконвертируемыеОбъектыМетаданных(Макет,ТабДок,РезультатЗапроса)
	
	//формируем массив выгружаемых объектов-источников ПКО
	
	ВывестиСтрокуВТабличныйДокумент(Макет,ТабДок,"ЗаголовокГруппыРаздела",
	Новый Структура ("ЗаголовокГруппыРаздела","Неконвертируемые объекты конфигурации"),,1);
	
	СписокПКО = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПКО");
	
	Пока СписокПКО.Найти(Null) <> Неопределено Цикл
		Индекс = СписокПКО.Найти(Null);
		СписокПКО.Удалить(Индекс);
	КонецЦикла;
	
	СписокОбъектов = Новый СписокЗначений;
	
	Для Каждого ЭлементПКО из СписокПКО Цикл
		Если ЭлементПКО <> null И Не ПустаяСтрока(ЭлементПКО.Источник.Наименование) Тогда
			СписокОбъектов.Добавить(ЭлементПКО.Источник);
		КонецЕсли;
	КонецЦикла;
	
	//Найдем все объекты конфигурации, которые не выгружаются из источника
	
	ЗапросНеКонвертируемых = Новый Запрос;
	ЗапросНеКонвертируемых.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объекты.Ссылка КАК Ссылка,
	|	Объекты.Родитель КАК Родитель
	|ИЗ
	|	Справочник.Объекты КАК Объекты
	|ГДЕ
	|	Объекты.ЭтоГруппа = ЛОЖЬ
	|    И Объекты.Владелец = &Владелец
	|	И (НЕ Объекты.Ссылка В (&МассивСсылок))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель,
	|	Объекты.Имя";
	ЗапросНеКонвертируемых.УстановитьПараметр("МассивСсылок",СписокОбъектов);
	ЗапросНеКонвертируемых.УстановитьПараметр("Владелец",Конвертация.Источник);
	
	НеКонвертируемыеОбъекты =  ЗапросНеКонвертируемых.Выполнить().Выгрузить();
	
	//Выведем в отчет все неконвертируемые объекты в порядке, заведенном в конфигураторе.
	
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"Справочники","Справочники");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"Документы","Документы");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"Перечисления","Перечисления");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"ПланыВидовХарактеристик", "Планы видов характеристик");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"ПланыСчетов", "Планы счетов");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"ПланыВидовРасчета", "Планы видов расчета");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"РегистрыСведений", "Регистры сведений");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"РегистрыНакопления", "Регистры накопления");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"РегистрыБухгалтерии", "Регистры бухгалтерии");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"РегистрыРасчета", "Регистры расчета");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"БизнесПроцессы", "Бизнес-процессы");
	ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,НеКонвертируемыеОбъекты,"Задачи", "Задачи");
	
КонецПроцедуры

Процедура ВывестиНеконвертируемыеОбъектыВОтчет(Макет,ТабДок,ТаблицаОбъектов, ИмяГруппы, ПредставлениеГруппы)
	
	ОбъектОтбора = Справочники.Объекты.НайтиПоНаименованию(ИмяГруппы);
	Если ОбъектОтбора = Неопределено ИЛИ НЕ ОбъектОтбора.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Родитель",ОбъектОтбора);
	ПодчиненныеОбъекты = ТаблицаОбъектов.НайтиСтроки(ПараметрыОтбора);
	
	Если ПодчиненныеОбъекты.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокГруппыНеконвертируемыхОбъектов"
	, Новый Структура("ТипОбъекта, КоличествоОбъектов", ПредставлениеГруппы, ПодчиненныеОбъекты.Количество()),,2);
	ВывестиСписокОбъектовВКолонки(Макет,ТабДок,ПодчиненныеОбъекты,"СтрокаДанныхНеконвертируемыхОбъектов");
КонецПроцедуры

Процедура ВывестиДетальныеЗаписиПоПКО(Макет,ТабДок, РезультатЗапроса)
	
	//Сформируем список ПКО для вывода в отчет
	ТаблицаПКО = РезультатЗапроса.Выгрузить();
	ТаблицаВсехПравил = РезультатЗапроса.Выгрузить();
	ТаблицаПКО.Свернуть("ПКО");
	ТаблицаПКО.Колонки.Добавить("Источник");
	
	Для Каждого ЭлементПКО из ТаблицаПКО Цикл
		ЭлементПКО.Источник = ?(ПустаяСтрока(ЭлементПКО.ПКО.Источник.Наименование),ЭлементПКО.ПКО.Наименование,ЭлементПКО.ПКО.Источник);
	КонецЦикла;
	
	Для Каждого ЭлементПКО из ТаблицаПКО Цикл
		
		Если ЭлементПКО.ПКО = Null Тогда
			Продолжить;
		КонецЕсли;
		//Имя Справочника
		Если ПустаяСтрока(ЭлементПКО.ПКО.Источник.Наименование) Тогда
			ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокГруппыРаздела"
			, Новый Структура("ЗаголовокГруппыРаздела","Выгружаются дополнительные данные по правилу: "+ СокрЛП(Строка(ЭлементПКО.ПКО.Код))),,1,ЭлементПКО.ПКО);
		Иначе	
			ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокГруппыРаздела"
			, Новый Структура("ЗаголовокГруппыРаздела",Строка(ЭлементПКО.ПКО.Источник.Тип)+": """+Строка(ЭлементПКО.ПКО.Источник.Синоним)+"""."),,1,ЭлементПКО.ПКО);
		КонецЕсли;
		
		//НайдемДубликатыОбъектов
		
		МассивСтрок = ТаблицаПКО.НайтиСтроки(Новый Структура("Источник",ЭлементПКО.Источник));
		Если МассивСтрок.Количество() = 1 Тогда
			
			//Объект-приемник для данного ПКО					
			
			ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейОдиночнойГруппы"
			, Новый Структура("ЗаголовокДеталейГруппы", "Конвертируется в " + Строка(ЭлементПКО.ПКО.Приемник.Тип)+" """+Строка(ЭлементПКО.ПКО.Приемник.Синоним)+"""."),Ложь,2);
			
			// Описание флажков ПКО					
			ВывестиОписаниеВыгрузкиПоНастройкамПКО(Макет,ТабДок,ЭлементПКО.ПКО,ТаблицаВсехПравил);	
			
			// Детальный отчет по всем свойствам
			ВывестиДетальноеОписаниеПоСвойствам(Макет,ТабДок,ЭлементПКО.ПКО,ТаблицаВсехПравил);
			
			// Детальный отчет по всем значениям
			
			ВывестиДетальноеОписаниеПоЗначениям(Макет,ТабДок,ЭлементПКО.ПКО,ТаблицаВсехПравил);
			
		Иначе
			
			ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейОдиночнойГруппы"
			, Новый Структура("ЗаголовокДеталейГруппы", "Конвертируется в несколько объектов ("+ МассивСтрок.Количество() +")	"),Ложь,2);
			
			Для Каждого ЭлементМассива Из МассивСтрок Цикл
				
				ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппы"
				, Новый Структура("ЗаголовокДеталейГруппы", "Конвертируется в "+ Строка(ЭлементМассива.ПКО.Приемник.Тип)+" """+Строка(ЭлементМассива.ПКО.Приемник.Синоним)+"""."),Ложь,2,ЭлементМассива.ПКО);
				
				// Описание флажков ПКО					
				ВывестиОписаниеВыгрузкиПоНастройкамПКО(Макет,ТабДок,ЭлементМассива.ПКО,ТаблицаВсехПравил,1);	
				
				// Детальный отчет по всем свойствам
				ВывестиДетальноеОписаниеПоСвойствам(Макет,ТабДок,ЭлементМассива.ПКО,ТаблицаВсехПравил,1);
				
				// Детальный отчет по всем значениям
				
				ВывестиДетальноеОписаниеПоЗначениям(Макет,ТабДок,ЭлементМассива.ПКО,ТаблицаВсехПравил,1);
				
				Индекс = ТаблицаПКО.Индекс(ЭлементМассива);
				
				Если Индекс > ТаблицаПКО.Индекс(ЭлементПКО) Тогда
					ТаблицаПКО.Удалить(ЭлементМассива);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДетальноеОписаниеПоЗначениям(Макет,ТабДок,ЭлементПКО,ТаблицаВсехПравил,ДопУровень = 0)
	
	//Выведем заголовок группы отчета
	ВыведенЗаголовокРаздела = Ложь;						
	//Найдем все правила конвертации значения по данному ПКО
	
	ПараметрыПоискаЗначений = Новый Структура("ПКО, ИдентификаторТипа, Отключить", ЭлементПКО, 0, Ложь);
	ТабЗначений = ТаблицаВсехПравил.НайтиСтроки(ПараметрыПоискаЗначений);
	ПорядковыйНомер = 1;
	СписокКонвертируемыхЗначений = Новый СписокЗначений;			
	Если ТабЗначений.Количество() > 0 Тогда
		//Выведем конвертируемые значения
		ВыведенЗаголовокГруппы = Ложь;
		Для Каждого СтрокаЗначений Из ТабЗначений Цикл
			
			Если Не ВыведенЗаголовокРаздела Тогда
				ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппы"
				, Новый Структура("ЗаголовокДеталейГруппы", "Детально по значениям"),,2+ДопУровень);
				ВыведенЗаголовокРаздела = Истина;
			КонецЕсли;
			
			Если Не ВыведенЗаголовокГруппы Тогда
				ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппыОтступ"
				, Новый Структура("ЗаголовокДеталейГруппыОтступ", "Конвертируются значения: "),,3+ДопУровень);
				ВыведенЗаголовокГруппы = Истина;
			КонецЕсли;
			
			ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииТройнойОтступ"
			, Новый Структура("НомерПП, ИмяДанных", ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер), СтрокаЗначений.Ссылка.Источник),,4+ДопУровень);
			СписокКонвертируемыхЗначений.Добавить(СтрокаЗначений.Ссылка.Источник);						
			ПорядковыйНомер = ПорядковыйНомер + 1;
		КонецЦикла;
	КонецЕсли;
	
	//Выведем неконвертируемые значения
	
	//Добавим условие на флажок
	
	Если ВыводитьНеконвертируемыеЗначения Тогда
		ПорядковыйНомер = 1;
		
		ВыведенЗаголовокГруппы =Ложь;				
		Если ЗначениеЗаполнено(ЭлементПКО.Источник) Тогда
			ВыборкаЗначений = Справочники.Значения.Выбрать(,ЭлементПКО.Источник);
			Пока ВыборкаЗначений.Следующий() Цикл
				Если СписокКонвертируемыхЗначений.НайтиПоЗначению(ВыборкаЗначений.Ссылка) = Неопределено Тогда
					
					Если Не ВыведенЗаголовокРаздела Тогда
						ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппы"
						, Новый Структура("ЗаголовокДеталейГруппы", "Детально по значениям"),,2+ДопУровень);
						ВыведенЗаголовокРаздела = Истина;
					КонецЕсли;
					
					Если Не ВыведенЗаголовокГруппы Тогда
						ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппыОтступ"
						, Новый Структура("ЗаголовокДеталейГруппыОтступ", "Не конвертируются значения: "),,3+ДопУровень);
						ВыведенЗаголовокГруппы = Истина;
					КонецЕсли;
					
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииТройнойОтступ"
					, Новый Структура("НомерПП, ИмяДанных",ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер), ВыборкаЗначений.Наименование),,4+ДопУровень);
					ПорядковыйНомер = ПорядковыйНомер + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиДетальноеОписаниеПоСвойствам(Макет,ТабДок,ЭлементПКО,ТаблицаВсехПравил,ДопУровень = 0)
	
	//Выведем заголовок группы отчета
	
	//Найдем все правила конвертации свойств по данному ПКО, и выведем их в конвертируемые свойства или параметры
	
	ПараметрыПоискаСвойств = Новый Структура("ПКО, ИдентификаторТипа, Отключить", ЭлементПКО, 1, Ложь);
	ТаблицаСвойств = ТаблицаВсехПравил.НайтиСтроки(ПараметрыПоискаСвойств);
	СписокКонвертируемыхСвойств = Новый СписокЗначений;
	СписокКонвертируемыхСвойствПриемника = Новый СписокЗначений;
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокСвойствТабличныхЧастей = Новый ТаблицаЗначений;
	СписокСвойствТабличныхЧастей.Колонки.Добавить("ПравилоСвойств");
	СписокСвойствТабличныхЧастей.Колонки.Добавить("ТабличнаяЧасть");
		
	ВыведенЗаголовокРаздела = Ложь;
	ВыведенЗаголовокГруппы = Ложь;
			
	Если ТаблицаСвойств.Количество() > 0 Тогда
		
		//Выведем конвертируемые свойства
		ПорядковыйНомер = 1;			
		Для Каждого СтрокаСвойства Из ТаблицаСвойств Цикл
			
			//В данной ветке выводим только свойства шапки документа/справочника.
			//Табличные части запишем в отдельный список со всеми правилами - и обработаем их после
			
			Если СтрокаСвойства.Ссылка.Источник.Вид = Перечисления.ВидыСвойств.ТабличнаяЧасть Тогда
				СписокТабличныхЧастей.Добавить(СтрокаСвойства.Ссылка.Источник);
			КонецЕсли;
			
			Если СтрокаСвойства.Ссылка.Приемник.Вид = Перечисления.ВидыСвойств.ТабличнаяЧасть Тогда
				СписокТабличныхЧастей.Добавить(СтрокаСвойства.Ссылка.Приемник);
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаСвойства.Ссылка.Родитель.Наименование) Тогда
				СтрокаСвойстваТЧ = СписокСвойствТабличныхЧастей.Добавить();
				СтрокаСвойстваТЧ.ПравилоСвойств = СтрокаСвойства.Ссылка;
				Если ПустаяСтрока(СтрокаСвойства.Ссылка.Родитель.Источник.Наименование) Тогда
					СтрокаСвойстваТЧ.ТабличнаяЧасть = СтрокаСвойства.Ссылка.Родитель.Приемник;
				Иначе
					СтрокаСвойстваТЧ.ТабличнаяЧасть = СтрокаСвойства.Ссылка.Родитель.Источник;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаСвойства.Ссылка.Приемник.Наименование) Тогда
				СписокКонвертируемыхСвойствПриемника.Добавить(СтрокаСвойства.Ссылка.Приемник);
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаСвойства.Ссылка.Источник.Наименование)  Тогда
				
				ПредставлениеВОтчете = ДобавитьОписаниеТипа(СтрокаСвойства.Ссылка.Источник, СтрокаСвойства.Ссылка.ИмяИсточника);
				
				Если Не ВыведенЗаголовокРаздела Тогда
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппы"
					, Новый Структура("ЗаголовокДеталейГруппы", "Детально по свойствам"),,2+ДопУровень);
					ВыведенЗаголовокРаздела = Истина;	
				КонецЕсли;
				
				Если Не ВыведенЗаголовокГруппы Тогда	
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппыОтступ"
					, Новый Структура("ЗаголовокДеталейГруппыОтступ", "Конвертируются свойства: "),,3+ДопУровень);
					ВыведенЗаголовокГруппы = Истина;
				КонецЕсли;
				
				ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииТройнойОтступ"
				, Новый Структура("НомерПП, ИмяДанных, ТипДанных", ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер), ПредставлениеВОтчете, СтрокаСвойства.Ссылка.ТипИсточника ),,4+ДопУровень);
				СписокКонвертируемыхСвойств.Добавить(СтрокаСвойства.Ссылка.Источник);
				ПорядковыйНомер = ПорядковыйНомер+1;
			КонецЕсли;
			
		КонецЦикла;
		ВыведенЗаголовокГруппы = Ложь;
		//Выведем конвертируемые параметры
		
		ПорядковыйНомер = 1;				
		Для Каждого СтрокаСвойства Из ТаблицаСвойств Цикл
			Если Не ПустаяСтрока(СтрокаСвойства.Ссылка.Родитель.Наименование) Тогда			
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаСвойства.Ссылка.Источник.Наименование) Тогда
				НеЗаданоОписание = ПустаяСтрока(СтрокаСвойства.Ссылка.Описание) И ВыводитьСистемныеСообщения;
				ИмяОбластиСтроки = ?(НеЗаданоОписание,"СтрокаДанныеКонвертацииТройнойОтступОшибка","СтрокаДанныеКонвертацииТройнойОтступ");
				
				Если Не ВыведенЗаголовокРаздела Тогда
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппы"
					, Новый Структура("ЗаголовокДеталейГруппы", "Детально по свойствам"),,2+ДопУровень);
					ВыведенЗаголовокРаздела = Истина;	
				КонецЕсли;
				
				Если Не ВыведенЗаголовокГруппы Тогда
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппыОтступ"
					, Новый Структура("ЗаголовокДеталейГруппыОтступ", "Конвертируются дополнительные данные: "),,3+ДопУровень);	
					ВыведенЗаголовокГруппы = Истина;
				КонецЕсли;
				
				
				Если ПустаяСТрока(СтрокаСвойства.Ссылка.Приемник.Наименование) Тогда
					НаборТиповДанных = "НомерПП, ИмяДанных";
				Иначе
					НаборТиповДанных = "НомерПП, ИмяДанных, ТипДанных";
				КонецЕсли;
				
				Если ВыводитьСистемныеСообщения  ИЛИ НЕ ПустаяСтрока(СтрокаСвойства.Ссылка.Описание) Тогда
					НаборТиповДанных = НаборТиповДанных + ", ОписаниеДанных";
				КонецЕсли;
				
				
				Если ПустаяСТрока(СтрокаСвойства.Ссылка.Приемник.Наименование) Тогда
					
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, ИмяОбластиСтроки
					, Новый Структура(НаборТиповДанных, ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер), СтрокаСвойства.Ссылка.ИмяПараметраДляПередачи, ?(НеЗаданоОписание,"Описание не задано!" ,СтрокаСвойства.Ссылка.Описание)),,4+ДопУровень);
					
				Иначе
					ПредставлениеВОтчете = ДобавитьОписаниеТипа(СтрокаСвойства.Ссылка.Приемник, СтрокаСвойства.Ссылка.ИмяПриемника);		
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, ИмяОбластиСтроки
					, Новый Структура(НаборТиповДанных,ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер), ПредставлениеВОтчете, СтрокаСвойства.Ссылка.ТипПриемника, ?(НеЗаданоОписание,"Описание не задано!" ,СтрокаСвойства.Ссылка.Описание)),,4+ДопУровень);
						
				КонецЕсли;
				ПорядковыйНомер = ПорядковыйНомер + 1;		
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// добавим условие на флажок
	
	Если ВыводитьНеконвертируемыеСвойства Тогда
		
		//Выведем неконвертируемые свойства
		ВыведенЗаголовокГруппы = Ложь;
		
		Если ЗначениеЗаполнено(ЭлементПКО.Источник) Тогда
			ВыборкаСвойств = Справочники.Свойства.Выбрать(,ЭлементПКО.Источник);
			ПорядковыйНомер = 1;
			Пока ВыборкаСвойств.Следующий() Цикл
				Если ВыборкаСвойств.Ссылка.Уровень()> 0 ИЛИ ВыборкаСвойств.Ссылка.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				Если СписокКонвертируемыхСвойств.НайтиПоЗначению(ВыборкаСвойств.Ссылка) = Неопределено Тогда
					
					Если Не ВыведенЗаголовокРаздела Тогда
						ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппы"
						, Новый Структура("ЗаголовокДеталейГруппы", "Детально по свойствам"),,2+ДопУровень);
						ВыведенЗаголовокРаздела = Истина;	
					КонецЕсли;
					
					Если Не ВыведенЗаголовокГруппы Тогда
						ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппыОтступ"
						, Новый Структура("ЗаголовокДеталейГруппыОтступ", "Не конвертируются свойства: "),,3+ДопУровень);
						ВыведенЗаголовокГруппы = Истина;
					КонецЕсли;
					
					ПредставлениеВОтчете = ДобавитьОписаниеТипа(ВыборкаСвойств.Ссылка,ВыборкаСвойств.Ссылка.Наименование);
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииТройнойОтступ"
					, Новый Структура("НомерПП, ИмяДанных, ТипДанных",ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер), ВыборкаСвойств.Наименование, ВыборкаСвойств.ТипыСтрокой),,4+ДопУровень);
					ПорядковыйНомер = ПорядковыйНомер +1;		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
	КонецЕсли;
	
	// выведем незаполненные свойства
	
	// добавим условие на флажок
	
	Если ВыводитьНезаполняемыеСвойства Тогда
		
		ВыведенЗаголовокГруппы = Ложь;
		Если ЗначениеЗаполнено(ЭлементПКО.Приемник) Тогда
			ВыборкаСвойств = Справочники.Свойства.Выбрать(,ЭлементПКО.Приемник);
			ПорядковыйНомер =1;
			Пока ВыборкаСвойств.Следующий() Цикл
				Если ВыборкаСвойств.Ссылка.Уровень()> 0 ИЛИ ВыборкаСвойств.Ссылка.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				
				Если СписокКонвертируемыхСвойствПриемника.НайтиПоЗначению(ВыборкаСвойств.Ссылка) = Неопределено Тогда
					
					Если Не ВыведенЗаголовокРаздела Тогда
						ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппы"
						, Новый Структура("ЗаголовокДеталейГруппы", "Детально по свойствам"),,2+ДопУровень);
						ВыведенЗаголовокРаздела = Истина;	
					КонецЕсли;
					
					Если Не ВыведенЗаголовокГруппы Тогда
						
						ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппыОтступ"
						, Новый Структура("ЗаголовокДеталейГруппыОтступ", "Не заполняются свойства приемника: "),,3+ДопУровень);
						ВыведенЗаголовокГруппы = Истина;
					КонецЕсли;
					
					ПредставлениеВОтчете = ДобавитьОписаниеТипа(ВыборкаСвойств.Ссылка, ВыборкаСвойств.Ссылка.Наименование);
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииТройнойОтступ"
					, Новый Структура("НомерПП, ИмяДанных, ТипДанных",ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер), ПредставлениеВОтчете, ВыборкаСвойств.Ссылка.ТипыСтрокой),,4+ДопУровень);
					ПорядковыйНомер = ПорядковыйНомер + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
	КонецЕсли;
	
	// После того, как обработаны все данные шапки документа, выведем данные по табличным частям
	
	Если СписокТабличныхЧастей.Количество() > 0 Тогда
		
		ВывестиДанныеПоТабличнымЧастям(Макет, ТабДок, ЭлементПКО, СписокТабличныхЧастей, СписокСвойствТабличныхЧастей,ДопУровень);
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура предназначена для вывода данных конвертации табличных частей объекта
Процедура ВывестиДанныеПоТабличнымЧастям(Макет, ТабДок, ЭлементПКО, СписокТабличныхЧастей, СписокСвойствТабличныхЧастей,ДопУровень)
	
	// Для каждой табличной части, присутствующей в данном ПКО
	// выведем сначала ПКС для данных ТЧ, а потом все неконвертируемые свойства.
	
	Для Каждого ТабличнаяЧасть Из СписокТабличныхЧастей Цикл
		
		//выведем заголовок по данной ТЧ
		
		КонвертируемыеСвойства = СписокСвойствТабличныхЧастей.НайтиСтроки(Новый Структура("ТабличнаяЧасть",ТабличнаяЧасть.Значение));
		
		Если КонвертируемыеСвойства.Количество() > 0 Тогда
			
			ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппы"
			, Новый Структура("ЗаголовокДеталейГруппы", "Детально по свойствам табличной части: "+ТабличнаяЧасть.Значение.Наименование),,2+ДопУровень);
			
			
			
			// выводим конвертируемые свойства
		КонецЕсли;
		ВыведенЗаголовокГруппы = Ложь;
		ПорядковыйНомер = 1;
		
		Для Каждого Свойство Из КонвертируемыеСвойства Цикл
			
			Если Не ПустаяСтрока(Свойство.ПравилоСвойств.Источник.Наименование) Тогда
				
				Если Не ВыведенЗаголовокГруппы Тогда
					
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппыОтступ"
					, Новый Структура("ЗаголовокДеталейГруппыОтступ", "Конвертируются свойства: "),,3+ДопУровень);
					ВыведенЗаголовокГруппы = Истина;
					
				КонецЕсли;
				
				ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииТройнойОтступ"
				, Новый Структура("НомерПП, ИмяДанных, ТипДанных", ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер), Свойство.ПравилоСвойств.ИмяИсточника, Свойство.ПравилоСвойств.ТипИсточника ),,4+ДопУровень);
				ПорядковыйНомер = ПорядковыйНомер +1;		
			КонецЕсли;	
			
		КонецЦикла;
		
		//Выводим дополнительные параметры
		
		ВыведенЗаголовокГруппы = Ложь;
		
		ПорядковыйНомер = 1;					
		Для Каждого Свойство Из КонвертируемыеСвойства Цикл
			
			Если ПустаяСтрока(Свойство.ПравилоСвойств.Источник.Наименование) Тогда
				
				Если Не ВыведенЗаголовокГруппы Тогда
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "ЗаголовокДеталейГруппыОтступ"
					, Новый Структура("ЗаголовокДеталейГруппыОтступ", "Конвертируются дополнительные данные: "),,3+ДопУровень);
					ВыведенЗаголовокГруппы = Истина;
				КонецЕсли;
				
				ОбластьВывода = ?(ПустаяСтрока(Свойство.ПравилоСвойств.Описание) И ВыводитьСистемныеСообщения,"СтрокаДанныеКонвертацииТройнойОтступОшибка","СтрокаДанныеКонвертацииТройнойОтступ");
				
				Если ПустаяСТрока(Свойство.ПравилоСвойств.Приемник.Наименование) Тогда
					НаборТиповДанных = "НомерПП, ИмяДанных";
				Иначе
					НаборТиповДанных = "НомерПП, ИмяДанных, ТипДанных";
				КонецЕсли;
				
				Если ВыводитьСистемныеСообщения ИЛИ НЕ ПустаяСтрока(Свойство.ПравилоСвойств.Описание) Тогда
					НаборТиповДанных = НаборТиповДанных + ", ОписаниеДанных";
				КонецЕсли;
				
				Если ПустаяСтрока(Свойство.ПравилоСвойств.Приемник.Наименование) Тогда
					
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, ОбластьВывода
					, Новый Структура(НаборТиповДанных
					,ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер)
					, Свойство.ПравилоСвойств.ИмяПараметраДляПередачи
					, ?(ПустаяСтрока(Свойство.ПравилоСвойств.Описание) И ВыводитьСистемныеСообщения,"Описание не задано", Свойство.ПравилоСвойств.Описание) )
					,,4+ДопУровень);
				Иначе
					
					ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, ОбластьВывода
					, Новый Структура(НаборТиповДанных,
					ДобавитьРазделительПорядковогоНомера(ПорядковыйНомер),
					Свойство.ПравилоСвойств.ИмяПриемника, Свойство.ПравилоСвойств.ТипПриемника,
					?(ПустаяСтрока(Свойство.ПравилоСвойств.Описание) И ВыводитьСистемныеСообщения, "Описание не задано", Свойство.ПравилоСвойств.Описание))
					,,4+ДопУровень);
				КонецЕсли;		
				ПорядковыйНомер = ПорядковыйНомер + 1;		
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла
	
КонецПроцедуры

// Процедура анализирует настройки ПКО и выводит их текстовое представление.
// Также выводит сопособ выгрузки данных (по ПВД или по ссылкам), и комментарии к ПКО и ПВД
//
// Параметры:
// Макет - ТабличныйДокумент, структура отчета
// ТабДок - ТабличныйДокумент, вывод отчета на экран
// ЭлементПКО - Справочник.ПравилаКонвертацииОбъектов - анализируемое правило
Процедура ВывестиОписаниеВыгрузкиПоНастройкамПКО(Макет,ТабДок,ЭлементПКО,ТаблицаПравил,ДопУровень = 0)
	
	СтрокаОписания = "";
	
	ПараметрыОтбораПолейПоиска = Новый Структура("ПКО, ИдентификаторТипа", ЭлементПКО,1);
	СписокСвойств = ТаблицаПравил.НайтиСтроки(ПараметрыОтбораПолейПоиска);
	СписокПолейПоиска = Новый СписокЗначений;
	Для Каждого КонвертируемоеСвойство Из СписокСвойств Цикл
		Если ЗначениеЗаполнено(КонвертируемоеСвойство.Ссылка.Поиск) И КонвертируемоеСвойство.Ссылка.Поиск Тогда
			СписокПолейПоиска.Добавить(КонвертируемоеСвойство.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементПКО.СинхронизироватьПоИдентификатору Тогда
		СтрокаОписания = "Сопоставление выполняется по внутреннему идентификатору  ";
	КонецЕсли;
	
	Если ЭлементПКО.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли Тогда
		Если ПустаяСтрока(СтрокаОписания) Тогда
			СтрокаОписания = "Сопоставление выполняется по полям поиска: ";
		Иначе
			СтрокаОписания = СтрокаОписания + ", а затем по полям поиска: ";
		КонецЕсли;
		
		Для Каждого КонвертируемоеСвойство Из СписокПолейПоиска Цикл
			Если ПустаяСтрока(КонвертируемоеСвойство.Значение.ИмяИсточника) Тогда
				
				СтрокаОписания = СтрокаОписания +  КонвертируемоеСвойство.Значение.ИмяПриемника + ", ";	
				
			Иначе
				
				СтрокаОписания = СтрокаОписания + КонвертируемоеСвойство.Значение.ИмяИсточника  + ", ";	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Если НЕ ЭлементПКО.СинхронизироватьПоИдентификатору И НЕ ЭлементПКО.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли Тогда
		Если СписокПолейПоиска.Количество()> 0 Тогда
			Если ПустаяСтрока(СтрокаОписания) Тогда
				СтрокаОписания = "Сопоставление выполняется по полям поиска: ";
			КонецЕсли;
			
			Для Каждого КонвертируемоеСвойство Из СписокПолейПоиска Цикл
				
				Если ПустаяСтрока(КонвертируемоеСвойство.Значение.ИмяИсточника) Тогда
					
					СтрокаОписания = СтрокаОписания +  КонвертируемоеСвойство.Значение.ИмяПриемника + ", ";	
					
				Иначе
					
					СтрокаОписания = СтрокаОписания + КонвертируемоеСвойство.Значение.ИмяИсточника  + ", ";	
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаОписания) Тогда
		
		СтрокаОписания = "Сопоставление не выполняется.";
		
	Иначе
		
		СтрокаОписания = Лев(СтрокаОписания,СтрДлина(СтрокаОписания)-2)+".";
		
	КонецЕсли;
	
	ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииОтступ"
	, Новый Структура("ИмяДанных", СтрокаОписания),,2+ДопУровень);	
	
	//Выведем ошибочные случаи
	
	Если ВыводитьСистемныеСообщения Тогда
		
		ОписаниеОшибки = "";
		
		Если ЭлементПКО.СинхронизироватьПоИдентификатору И Не ЭлементПКО.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли И СписокПолейПоиска.Количество()> 0 Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Избыточно заданы поля поиска";
		КонецЕсли;
		
		Если ЭлементПКО.СинхронизироватьПоИдентификатору И ЭлементПКО.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли И СписокПолейПоиска.Количество() = 0 Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Не заданы поля поиска";
		КонецЕсли;
		
		Если ЭлементПКО.Источник.Тип = Перечисления.ТипыОбъектов.РегистрСведений ИЛИ
			ЭлементПКО.Источник.Тип = Перечисления.ТипыОбъектов.РегистрБухгалтерии ИЛИ
			ЭлементПКО.Источник.Тип = Перечисления.ТипыОбъектов.РегистрНакопления ИЛИ
			ЭлементПКО.Источник.Тип = Перечисления.ТипыОбъектов.РегистрРасчета Тогда
			
			Если СписокПолейПоиска.Количество() > 0 Тогда
				ОписаниеОшибки = ОписаниеОшибки + "Избыточно заданы поля поиска";
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииОтступОшибкаОписание"
			, Новый Структура("ИмяДанных", ОписаниеОшибки),,2+ДопУровень);	
		КонецЕсли;
		
	КонецЕсли;
	
	// Попытаемся найти ПВД, связанное с данным ПКО.
	
	ПараметрыОтбораПравилВыгрузки = Новый Структура("ПКО, ИдентификаторТипа,Отключить",ЭлементПКО, 2, Ложь);
	ПравилаВыгрузки = ТаблицаПравил.НайтиСтроки(ПараметрыОтбораПравилВыгрузки);
	
	СтрокаВыгрузки = "";
	
	Если  ПравилаВыгрузки.Количество() = 0 Тогда
		СтрокаВыгрузки = "Объект не выгружается непосредственно, а только по ссылкам из других объектов.";
		ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииОтступ"
		, Новый Структура("ИмяДанных", СтрокаВыгрузки),,2+ДопУровень);	
	Иначе
		СтрокаВыгрузки = "Объект имеет собственные правила выгрузки. ";	
		ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииОтступ"
		, Новый Структура("ИмяДанных", СтрокаВыгрузки),,2+ДопУровень);	
		Для Каждого ПравилоВыгрузки Из ПравилаВыгрузки Цикл
			Если Не ПустаяСтрока(ПравилоВыгрузки.Ссылка.Описание) Тогда
				ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииОтступ"
				, Новый Структура("ОписаниеДанных", ПравилоВыгрузки.Ссылка.Описание),,2+ДопУровень);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Теперь выведем комментарий к самому правилу конвертации, 
	
	СтрокаОписанияКонвертацииОбъекта = "";
	Если ПустаяСтрока(ЭлементПКО.Описание) Тогда
		СтрокаОписанияКонвертацииОбъекта = "Правило конвертации не описано.";
		
		Если ВыводитьСистемныеСообщения И ((Не ПустаяСтрока(ЭлементПКО.АлгоритмПередЗагрузкойОбъекта)
			ИЛИ Не ПустаяСтрока(ЭлементПКО.АлгоритмПриЗагрузкеОбъекта)
			ИЛИ Не ПустаяСтрока(ЭлементПКО.АлгоритмПослеЗагрузкиОбъекта)
			ИЛИ Не ПустаяСтрока(ЭлементПКО.АлгоритмПоследовательностьПолейПоиска)
			ИЛИ Не ПустаяСтрока(ЭлементПКО.АлгоритмПередВыгрузкойОбъекта)
			ИЛИ Не ПустаяСтрока(ЭлементПКО.АлгоритмПриВыгрузкеОбъекта)
			ИЛИ Не ПустаяСтрока(ЭлементПКО.АлгоритмПослеВыгрузкиОбъекта)
			ИЛИ Не ПустаяСтрока(ЭлементПКО.АлгоритмПослеВыгрузкиОбъектаВФайлОбмена)
			ИЛИ	ЭлементПКО.ТипИсточника <> ЭлементПКО.ТипПриемника)
			//Добавим условие по набору констант
			ИЛИ (ЭлементПКО.Источник.Тип =Перечисления.ТипыОбъектов.НаборКонстант И Конвертация.Источник <> Конвертация.Приемник))
			Тогда
			ОбластьЗаписи = "СтрокаДанныеКонвертацииОтступОшибкаОписание";
		Иначе
			ОбластьЗаписи  = "СтрокаДанныеКонвертацииОтступ";
		КонецЕсли;
		
		ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, ОбластьЗаписи
		, Новый Структура("ИмяДанных" , СтрокаОписанияКонвертацииОбъекта),,2+ДопУровень);	
	Иначе
		ВывестиСтрокуВТабличныйДокумент(Макет, ТабДок, "СтрокаДанныеКонвертацииОтступ"
		, Новый Структура("ОписаниеДанных", ЭлементПКО.Описание),,2+ДопУровень);	
	КонецЕсли;
	
КонецПроцедуры
