
Перем мДеревоРезультатовПоиска;

Функция НайтиПоСтрокеОбъектовРодителя(СтрокаОсновнаяДерева, СтрокаТаблицы)
	
	СтрокаРодителя = СтрокаОсновнаяДерева.Строки.Найти(СтрокаТаблицы.Тип, "ИсходнаяКонфигурация");
	
	Если СтрокаРодителя = Неопределено Тогда
		
		СтрокаРодителя = СтрокаОсновнаяДерева.Строки.Добавить();
		СтрокаРодителя.ИсходнаяКонфигурация = СтрокаТаблицы.Тип;
		СтрокаРодителя.КонфигурацияСравнения = СтрокаТаблицы.Тип;
		
	КонецЕсли;
	
	Возврат СтрокаРодителя;
	
КонецФункции

Процедура ВосстановитьЗначениеБулево(Значение, ИмяВосстановления)
	
	ЗначениеЭлемента = ВосстановитьЗначение(ИмяВосстановления);
	Если ЗначениеЭлемента = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Значение = ЗначениеЭлемента;
	
КонецПроцедуры

Процедура ВыполнитьСравнение()
	
	мДеревоРезультатовПоиска = Неопределено;
	
	ДеревоРезультатСравнения.Строки.Очистить();
	
	ЗапросОбъектов = Новый Запрос(
		"ВЫБРАТЬ Различные
		|	СинхронизированныеОбъекты.Тип КАК Тип,
		|	СинхронизированныеОбъекты.Источник КАК Источник,
		|	СинхронизированныеОбъекты.Приемник КАК Приемник
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА Источники.Тип ЕСТЬ NULL 
		|				ТОГДА Приемники.Тип
		|			ИНАЧЕ Источники.Тип
		|		КОНЕЦ КАК Тип,
		|		Источники.Источник КАК Источник,
		|		Приемники.Приемник КАК Приемник
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ОбъектыИсточника.Тип КАК Тип,
		|			ОбъектыИсточника.Ссылка КАК Источник,
		|			ОбъектыИсточника.Наименование КАК Наименование
		|		ИЗ
		|			Справочник.Объекты КАК ОбъектыИсточника
		|		ГДЕ
		|			ОбъектыИсточника.ПометкаУдаления = ЛОЖЬ
		|			И ОбъектыИсточника.ЭтоГруппа = ЛОЖЬ
		|			И ОбъектыИсточника.Владелец = &КонфигурацияИсточник
		|			И (НЕ ОбъектыИсточника.Тип В (&МассивТипов))) КАК Источники
		|			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ОбъектыПриемника.Тип КАК Тип,
		|				ОбъектыПриемника.Ссылка КАК Приемник,
		|				ОбъектыПриемника.Наименование КАК Наименование
		|			ИЗ
		|				Справочник.Объекты КАК ОбъектыПриемника
		|			ГДЕ
		|				ОбъектыПриемника.ПометкаУдаления = ЛОЖЬ
		|				И ОбъектыПриемника.ЭтоГруппа = ЛОЖЬ
		|				И ОбъектыПриемника.Владелец = &КонфигурацияПриемник
		|				И (НЕ ОбъектыПриемника.Тип В (&МассивТипов))) КАК Приемники
		|			ПО Источники.Наименование = Приемники.Наименование
		|				И Источники.Тип = Приемники.Тип) КАК СинхронизированныеОбъекты
		|");
		
	МассивТипов = ПолучитьМассивТиповПоКоторымНеВыполняетсяСинхронизацияПКО();
	
	ЗапросОбъектов.УстановитьПараметр("МассивТипов", МассивТипов);	
	ЗапросОбъектов.УстановитьПараметр("КонфигурацияИсточник", КонфигурацияИсходная);
	ЗапросОбъектов.УстановитьПараметр("КонфигурацияПриемник", КонфигурацияСравнения);
	ЗапросОбъектов.УстановитьПараметр("ПустойОбъект", Справочники.Объекты.ПустаяСсылка());
	
	ТаблицаДанныхСравнения = ЗапросОбъектов.Выполнить().Выгрузить();
	
	СтрокаОсновнаяДерева = ДеревоРезультатСравнения.Строки.Добавить();
	СтрокаОсновнаяДерева.ИсходнаяКонфигурация = "Конфигурация";
	СтрокаОсновнаяДерева.КонфигурацияСравнения = "Конфигурация";
	
	КоличествоСтрок = ТаблицаДанныхСравнения.Количество();
	КоличествоОбработано = 0;
	Состояние("Обработано " + КоличествоОбработано + " из " + КоличествоСтрок);
	
	Для Каждого СтрокаТаблицы из ТаблицаДанныхСравнения Цикл
		
		СтрокаРодителя = НайтиПоСтрокеОбъектовРодителя(СтрокаОсновнаяДерева, СтрокаТаблицы);
		СтрокаДобавления = СтрокаРодителя.Строки.Добавить();	
		СтрокаДобавления.РезультатСравнения = 0;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Источник) Тогда
			СтрокаДобавления.ИсходнаяКонфигурация = СтрокаТаблицы.Источник;
			СтрокаДобавления.ТипИсточника = СтрокаТаблицы.Тип;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Приемник) Тогда
				СтрокаДобавления.РезультатСравнения = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Приемник) Тогда
			СтрокаДобавления.КонфигурацияСравнения = СтрокаТаблицы.Приемник;
			СтрокаДобавления.ТипПриемника = СтрокаТаблицы.Тип;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Источник) Тогда
				СтрокаДобавления.РезультатСравнения = 2;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДобавления.РезультатСравнения = 0 Тогда
			
			ПоказатьРазличияСвойствМетаданного(СтрокаДобавления);	
			ПоказатьРазличияЗначенийМетаданного(СтрокаДобавления);
			
		КонецЕсли;
		
		КоличествоОбработано = КоличествоОбработано + 1;
		Состояние("Обработано " + КоличествоОбработано + " из " + КоличествоСтрок);
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	УдалитьРекурсивноНеНужныеСтрокиДерева(ДеревоРезультатСравнения.Строки);
	
	ПодготовитьДеревоОтличийДляПоказаПользователю();
		
	// создаем копию для дерева для дальнейшей фильтрации
	мДеревоРезультатовПоиска = ДеревоРезультатСравнения.Скопировать();
	
	Если ЭлементыФормы.КоманднаяПанельРезультатСравнения.Кнопки.ПроизвестиОтбор.Пометка Тогда
	
		ПрименитьФильтрациюПриВыводеДерева();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДеревоОтличийДляПоказаПользователю()
	
	УдалитьРекурсивноНеНужныеСтрокиДерева(ДеревоРезультатСравнения.Строки);
	
	Для Каждого Строка Из ДеревоРезультатСравнения.Строки Цикл
		
		ЭлементыФормы.ДеревоРезультатСравнения.Развернуть(Строка);
		
	КонецЦикла;
	
	ДеревоРезультатСравнения.Строки.Сортировать("РезультатСравнения Убыв", Истина);
	
КонецПроцедуры

Функция ОпределитьПоПравиламПодходитСтрокаДерева(СтрокаДерева)
	
	НужноДобавлять = Истина;
	
	Если НЕ ОтображатьОбъектыПоКоторымЕстьПравила Тогда
		Возврат НужноДобавлять;
	КонецЕсли;
					
	// проверка на наличие правил обмена
	Источник = СтрокаДерева.ИсходнаяКонфигурация;	
	Приемник = СтрокаДерева.КонфигурацияСравнения;	
	
	УровеньДерева = СтрокаДерева.Уровень();
	Если УровеньДерева = 2 Тогда
			
		// 2 - уровень ПКО
		// а дальше ПКС и ПКЗ
		
		МассивПКО = ПолучитьМассивПКО(СтрокаДерева);
		
		НужноДобавлять = МассивПКО.Количество() > 0;		
	
	КонецЕсли;		
	
	Возврат НужноДобавлять;
		
КонецФункции

Процедура СкопироватьРекурсивноСтрокиДереваПоФильтрам(СтрокиИсходные, СтрокиПриемника)
	
	Для Каждого СтрокаДерева Из СтрокиИсходные Цикл
		
		СтрокаДобавления = Неопределено;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			НужноДобавлять = ОпределитьПоПравиламПодходитСтрокаДерева(СтрокаДерева);
			
			Если НужноДобавлять Тогда
			
				СтрокаДобавления = СтрокиПриемника.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДобавления, СтрокаДерева);
				
			КонецЕсли;
			
		Иначе
			
			Если (СтрокаДерева.РезультатСравнения = 1
				И ОтображатьДобавленныеОбъекты)
				ИЛИ 
				(СтрокаДерева.РезультатСравнения = 2
				И ОтображатьУдаленныеОбъекты)
				ИЛИ 
				(СтрокаДерева.РезультатСравнения = 3
				И ОтображатьИзмененныеОбъекты) Тогда
				
				НужноДобавлять = ОпределитьПоПравиламПодходитСтрокаДерева(СтрокаДерева);;
								
				Если НужноДобавлять Тогда
				
					СтрокаДобавления = СтрокиПриемника.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДобавления, СтрокаДерева);
					
					Если (СтрокаДобавления.РезультатСравнения = 1
						И НЕ ОтображатьДобавленныеОбъекты)
						ИЛИ
						(СтрокаДобавления.РезультатСравнения = 2
						И НЕ ОтображатьУдаленныеОбъекты)
						ИЛИ
						(СтрокаДобавления.РезультатСравнения = 3
						И НЕ ОтображатьИзмененныеОбъекты) Тогда
						
						СтрокаДобавления.РезультатСравнения = 0;
						
					КонецЕсли;
						
				КонецЕсли;									
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДобавления <> Неопределено
			И СтрокаДерева.Строки.Количество() > 0 Тогда
			
			СкопироватьРекурсивноСтрокиДереваПоФильтрам(СтрокаДерева.Строки, СтрокаДобавления.Строки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьФильтрациюПриВыводеДерева()
	
	Если ДеревоРезультатСравнения.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если мДеревоРезультатовПоиска = Неопределено Тогда
		Предупреждение("Невозможно выполнить фильтрацию. Необходимо повторить операцию сравнения конфигураций.");
		Возврат;
	КонецЕсли;
	
	ДеревоРезультатСравнения.Строки.Очистить();
	
	Если НЕ ЭлементыФормы.КоманднаяПанельРезультатСравнения.Кнопки.ПроизвестиОтбор.Пометка 
		ИЛИ (
		ОтображатьДобавленныеОбъекты 
		И ОтображатьУдаленныеОбъекты
		И ОтображатьИзмененныеОбъекты
		И НЕ ОтображатьОбъектыПоКоторымЕстьПравила) Тогда
		
		ДеревоРезультатСравнения = мДеревоРезультатовПоиска.Скопировать();
		
	Иначе
		
		СкопироватьРекурсивноСтрокиДереваПоФильтрам(мДеревоРезультатовПоиска.Строки, ДеревоРезультатСравнения.Строки);	
		
	КонецЕсли;
	
	ПодготовитьДеревоОтличийДляПоказаПользователю();
	
КонецПроцедуры

Процедура УдалитьРекурсивноНеНужныеСтрокиДерева(СтрокиДерева, Уровень = 0)
	
	Номер = СтрокиДерева.Количество() - 1;
	Пока Номер >= 0 Цикл
		
		СтрокаМетаданного = СтрокиДерева[Номер];
		
		УдалитьРекурсивноНеНужныеСтрокиДерева(СтрокаМетаданного.Строки, Уровень + 1);
		
		Если Уровень > 0 Тогда
		
			Если СтрокаМетаданного.РезультатСравнения = 0
				И СтрокаМетаданного.Строки.Количество() = 0 Тогда
			
				СтрокиДерева.Удалить(СтрокаМетаданного);						
									
			КонецЕсли;
			
		КонецЕсли;
		
		Номер = Номер - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьРазличияЗначенийМетаданного(СтрокаДереваРазличий)
	
	ОбъектИсточник = СтрокаДереваРазличий.ИсходнаяКонфигурация;
	ОбъектСравнения = СтрокаДереваРазличий.КонфигурацияСравнения;	
	
	Если ОбъектИсточник = ОбъектСравнения Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Значения.Ссылка,
	               |	Значения.Наименование КАК Наименование,
	               |	Значения.Владелец КАК Владелец
	               |ИЗ
	               |	Справочник.Значения КАК Значения
	               |ГДЕ
	               |	Значения.Владелец В(&МассивВладельцев)
	               |	И Значения.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Владелец,
	               |	Наименование
	               |ИТОГИ ПО
	               |	Владелец";
				   
	МассивВладельцев = Новый Массив();
	МассивВладельцев.Добавить(ОбъектИсточник);
	МассивВладельцев.Добавить(ОбъектСравнения);
				   
	Запрос.УстановитьПараметр("МассивВладельцев", МассивВладельцев);
	
	СоответствиеИсточника = Новый ТаблицаЗначений;
	СоответствиеИсточника.Колонки.Добавить("Источник");
	СоответствиеИсточника.Колонки.Добавить("Приемник");
	СоответствиеИсточника.Колонки.Добавить("Наименование");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Ссылка)
			ИЛИ НЕ ЗначениеЗаполнено(Выборка.Владелец) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоИсточник = (Выборка.Владелец = ОбъектИсточник);
		
		СтрокаТаблицы = СоответствиеИсточника.Найти(Выборка.Наименование, "Наименование");
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			СтрокаТаблицы = СоответствиеИсточника.Добавить();
			СтрокаТаблицы.Наименование = Выборка.Наименование;
			
			Если ЭтоИсточник Тогда
				СтрокаТаблицы.Источник = Выборка.Ссылка;
			Иначе
				СтрокаТаблицы.Приемник = Выборка.Ссылка;
			КонецЕсли;
			
		Иначе
			
			СоответствиеИсточника.Удалить(СтрокаТаблицы);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СоответствиеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредопределенныеСтроки = СтрокаДереваРазличий.Строки.Добавить();
	ПредопределенныеСтроки.ИсходнаяКонфигурация = "Предопределенные";
	ПредопределенныеСтроки.КонфигурацияСравнения = "Предопределенные";
	
	Для Каждого СтрокаТаблицы Из СоответствиеИсточника Цикл
		
		СтрокаДобавления = ПредопределенныеСтроки.Строки.Добавить();	
		СтрокаДобавления.ИсходнаяКонфигурация = СтрокаТаблицы.Источник;
		СтрокаДобавления.КонфигурацияСравнения = СтрокаТаблицы.Приемник;
		
		Если ЗначениеЗаполнено(СтрокаДобавления.ИсходнаяКонфигурация) Тогда
			СтрокаДобавления.РезультатСравнения = 1;
			СтрокаДобавления.ВидИсточника = Перечисления.ВидыСвойств.Свойство;
		Иначе
			СтрокаДобавления.РезультатСравнения = 2;
			СтрокаДобавления.ВидПриемника = Перечисления.ВидыСвойств.Свойство;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьРазличияСвойствМетаданного(СтрокаДереваРазличий)
	
	ОбъектИсточник = СтрокаДереваРазличий.ИсходнаяКонфигурация;
	ОбъектСравнения = СтрокаДереваРазличий.КонфигурацияСравнения;	
	
	Если ОбъектИсточник = ОбъектСравнения Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Свойства.Ссылка,
	               |	Свойства.Родитель КАК Родитель,
	               |	Свойства.Родитель.Наименование КАК НаименованиеРодителя,
	               |	Свойства.Родитель.Вид КАК ВидРодителя,
	               |	Свойства.ЭтоГруппа КАК ЭтоГруппа,
	               |	Свойства.Наименование КАК Наименование,
	               |	Свойства.Владелец КАК Владелец,
	               |	Свойства.Вид,
	               |	Свойства.ТипыСтрокой
	               |ИЗ
	               |	Справочник.Свойства КАК Свойства
	               |ГДЕ
	               |	Свойства.Владелец В(&МассивВладельцев)
	               |	И Свойства.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Владелец,
	               |	Родитель,
	               |	ЭтоГруппа,
	               |	Наименование
	               |ИТОГИ ПО
	               |	Владелец,
	               |	Родитель ИЕРАРХИЯ";
				   
	МассивВладельцев = Новый Массив();
	МассивВладельцев.Добавить(ОбъектИсточник);
	МассивВладельцев.Добавить(ОбъектСравнения);
				   
	Запрос.УстановитьПараметр("МассивВладельцев", МассивВладельцев);
	
	СоответствиеИсточника = Новый ДеревоЗначений;
	СоответствиеИсточника.Колонки.Добавить("Источник");
	СоответствиеИсточника.Колонки.Добавить("Приемник");
	СоответствиеИсточника.Колонки.Добавить("Наименование");
	СоответствиеИсточника.Колонки.Добавить("ЭтоГруппаИсточник");
	СоответствиеИсточника.Колонки.Добавить("ЭтоГруппаПриемник");
	СоответствиеИсточника.Колонки.Добавить("ТипыИсточника");
	СоответствиеИсточника.Колонки.Добавить("ТипыПриемника");
	СоответствиеИсточника.Колонки.Добавить("ВидИсточника");
	СоответствиеИсточника.Колонки.Добавить("ВидПриемника");
	СоответствиеИсточника.Колонки.Добавить("Вид");
	
	СтруктураПоиска = Новый Структура("Наименование, Вид");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Ссылка)
			ИЛИ НЕ ЗначениеЗаполнено(Выборка.Владелец) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоИсточник = (Выборка.Владелец = ОбъектИсточник);
		
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			
			ОбъектПоиска = Неопределено;
			
			Если ЭтоИсточник Тогда
				ОбъектПоиска = СоответствиеИсточника.Строки.Найти(Выборка.Родитель, "Источник");
			Иначе
				ОбъектПоиска = СоответствиеИсточника.Строки.Найти(Выборка.Родитель, "Приемник");
			КонецЕсли;
			
			Если ОбъектПоиска = Неопределено Тогда
				
				//ОбъектПоиска = СоответствиеИсточника.Строки.Найти(Выборка.НаименованиеРодителя, "Наименование");
				СтруктураПоиска.Наименование = Выборка.НаименованиеРодителя;
				СтруктураПоиска.Вид			 = Выборка.ВидРодителя;
				
				ОбъектыПоиска = СоответствиеИсточника.Строки.НайтиСтроки(СтруктураПоиска);
				Если ОбъектыПоиска.Количество() <> 0 Тогда
					
					ОбъектПоиска = ОбъектыПоиска[0];
					
				Иначе
					
					Сообщить(" - не найден родитель: """ + Выборка.НаименованиеРодителя + """ (" + Выборка.ВидРодителя + ") для элемента: """
					 + Выборка.Наименование+""" ("+Выборка.Вид+")! Элемент пропущен.", СтатусСообщения.Важное);
					 
					Продолжить;
				КонецЕсли;
								
			КонецЕсли;
			
		Иначе
			
			ОбъектПоиска = СоответствиеИсточника;
			
		КонецЕсли;
		
		//СтрокаДерева = ОбъектПоиска.Строки.Найти(Выборка.Наименование, "Наименование");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		СтрокиДерева = ОбъектПоиска.Строки.НайтиСтроки(СтруктураПоиска);
		Если СтрокиДерева.Количество() = 0 Тогда		
			СтрокаДерева = ОбъектПоиска.Строки.Добавить();
		Иначе
			СтрокаДерева = СтрокиДерева[0];
		КонецЕсли;
				
		Если СтрокаДерева = Неопределено Тогда		
			СтрокаДерева = ОбъектПоиска.Строки.Добавить();
		КонецЕсли;
		
		Если ЭтоИсточник Тогда
			СтрокаДерева.Источник = Выборка.Ссылка;
			СтрокаДерева.ЭтоГруппаИсточник = Выборка.ЭтоГруппа;
			СтрокаДерева.ТипыИсточника = Выборка.ТипыСтрокой;
			СтрокаДерева.ВидИсточника = Выборка.Вид;
		Иначе
			СтрокаДерева.Приемник = Выборка.Ссылка;
			СтрокаДерева.ЭтоГруппаПриемник = Выборка.ЭтоГруппа;
			СтрокаДерева.ТипыПриемника = Выборка.ТипыСтрокой;
			СтрокаДерева.ВидПриемника = Выборка.Вид;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаДерева.Наименование)
			И Не ПустаяСтрока(Выборка.Наименование) Тогда
			
			СтрокаДерева.Наименование = Выборка.Наименование;
			
		КонецЕсли;
		
		Если (НЕ ЗначениеЗаполнено(СтрокаДерева.Вид))
			И ЗначениеЗаполнено(Выборка.Вид) Тогда
			СтрокаДерева.Вид = Выборка.Вид;
		КонецЕсли;
								
	КонецЦикла;
	
	Для Каждого СтрокаДереваСравнения Из СоответствиеИсточника.Строки Цикл
		
		НужноДобавитьСтроку = ОпределитьНужноВыгружатьСтроку(СтрокаДереваСравнения);
				
		Если НужноДобавитьСтроку Тогда
			СтрокаДерева = ДобавитьСтрокуВОбщееДерево(СтрокаДереваРазличий, СтрокаДереваСравнения);
			// добавляем строку но не детализируем ее
			Продолжить;
		Иначе
			СтрокаДерева = Неопределено;	
		КонецЕсли;		
		
		Для Каждого ВложеннаяСтрока Из СтрокаДереваСравнения.Строки Цикл
			
			НужноДобавитьСтроку = ОпределитьНужноВыгружатьСтроку(ВложеннаяСтрока);	
			
			Если НужноДобавитьСтроку Тогда
				
				Если СтрокаДерева = Неопределено Тогда
					
					СтрокаДерева = ДобавитьСтрокуВОбщееДерево(СтрокаДереваРазличий, СтрокаДереваСравнения);	
					
				КонецЕсли;
				
				ДобавитьСтрокуВОбщееДерево(СтрокаДерева, ВложеннаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьНужноВыгружатьСтроку(СтрокаСравнения)
	
	Если НЕ ЗначениеЗаполнено(СтрокаСравнения.Источник)
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаСравнения.Приемник) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтрокаСравнения.ЭтоГруппаИсточник <> СтрокаСравнения.ЭтоГруппаПриемник
		ИЛИ СтрокаСравнения.ВидИсточника <> СтрокаСравнения.ВидПриемника Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтрокаСравнения.ТипыИсточника <> СтрокаСравнения.ТипыПриемника Тогда
		
		Если СтрДлина(СтрокаСравнения.ТипыИсточника) = СтрДлина(СтрокаСравнения.ТипыПриемника) Тогда
			
			ТаблицаТипов = Новый ТаблицаЗначений;
			ТаблицаТипов.Колонки.Добавить("ТипИсточника");
			ТаблицаТипов.Колонки.Добавить("ТипПриемника");
			ТаблицаТипов.Колонки.Добавить("ИмяТипаИсточника");
			
			// возможно типы все таки совпадают
			ОпределитьРазницуТипов(ТаблицаТипов, СтрокаСравнения.Источник, СтрокаСравнения.Приемник);
			
			Если ТаблицаТипов.Количество() > 0 Тогда
			
				Возврат Истина;
				
			КонецЕсли;
			
			// для строк, чисел и дат дополнительное сравнение необходимо
			НаличиеЧислаВТипе = Найти(СтрокаСравнения.ТипыИсточника, "Число"); 
			
			Если НаличиеЧислаВТипе
				И (СтрокаСравнения.Источник.КвалификаторыЧисла_Длина <> СтрокаСравнения.Приемник.КвалификаторыЧисла_Длина
					ИЛИ СтрокаСравнения.Источник.КвалификаторыЧисла_Точность <> СтрокаСравнения.Приемник.КвалификаторыЧисла_Точность) Тогда
				
				Возврат Истина;	
				
			КонецЕсли;
			
			НаличиеСтрокиВТипе = Найти(СтрокаСравнения.ТипыИсточника, "Строка");
			
			Если НаличиеСтрокиВТипе
				И (СтрокаСравнения.Источник.КвалификаторыСтроки_Длина <> СтрокаСравнения.Приемник.КвалификаторыСтроки_Длина
					ИЛИ СтрокаСравнения.Источник.КвалификаторыСтроки_Фиксированная <> СтрокаСравнения.Приемник.КвалификаторыСтроки_Фиксированная) Тогда
				
				Возврат Истина;	
				
			КонецЕсли;
			
			НаличиеДатыВТипе = Найти(СтрокаСравнения.ТипыИсточника, "Дата");
			
			Если НаличиеДатыВТипе
				И (СтрокаСравнения.Источник.КвалификаторыДаты_Состав <> СтрокаСравнения.Приемник.КвалификаторыДаты_Состав) Тогда
				
				Возврат Истина;	
				
			КонецЕсли;
			
		Иначе
			
			Возврат Истина;
						
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДобавитьСтрокуВОбщееДерево(СтрокиДерева, СтрокаСравнения)
	
	СтрокаДобавления = СтрокиДерева.Строки.Добавить();	
	СтрокаДобавления.РезультатСравнения = 0;
	
	Если ЗначениеЗаполнено(СтрокаСравнения.Источник) Тогда
		СтрокаДобавления.ИсходнаяКонфигурация = СтрокаСравнения.Источник;
		Если Не ЗначениеЗаполнено(СтрокаСравнения.Приемник) Тогда
			СтрокаДобавления.РезультатСравнения = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСравнения.Приемник) Тогда
		СтрокаДобавления.КонфигурацияСравнения = СтрокаСравнения.Приемник;
		Если Не ЗначениеЗаполнено(СтрокаСравнения.Источник) Тогда
			СтрокаДобавления.РезультатСравнения = 2;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДобавления.РезультатСравнения = 0 Тогда
		
		Если СтрокаСравнения.ТипыИсточника <> СтрокаСравнения.ТипыПриемника
			ИЛИ СтрокаСравнения.ЭтоГруппаИсточник <> СтрокаСравнения.ЭтоГруппаПриемник
			ИЛИ СтрокаСравнения.ВидИсточника <> СтрокаСравнения.ВидПриемника Тогда
			
			СтрокаДобавления.РезультатСравнения = 3;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСравнения.ВидИсточника) Тогда
		СтрокаДобавления.ВидИсточника = СтрокаСравнения.ВидИсточника;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСравнения.ВидПриемника) Тогда
		СтрокаДобавления.ВидПриемника = СтрокаСравнения.ВидПриемника;
	КонецЕсли;	
		
	Возврат СтрокаДобавления;
	
КонецФункции

Процедура КнопкаВыполнитьСравнение(Кнопка)
	
	Если Не ЗначениеЗаполнено(КонфигурацияИсходная) Тогда
		Предупреждение("Не заполнена исходная конфигурация");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонфигурацияСравнения) Тогда
		Предупреждение("Не заполнена конфигурация сравнения");
		Возврат;
	КонецЕсли;
	
	Если КонфигурацияИсходная = КонфигурацияСравнения Тогда
		Предупреждение("Конфигурации совпадают");
		Возврат;
	КонецЕсли;	
	
	ВыполнитьСравнение();	
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ВосстановитьЗначениеБулево(ОтображатьДобавленныеОбъекты, "СравнениеКонфигураций.ОтображатьДобавленныеОбъекты");
	ВосстановитьЗначениеБулево(ОтображатьУдаленныеОбъекты, "СравнениеКонфигураций.ОтображатьУдаленныеОбъекты");
	ВосстановитьЗначениеБулево(ОтображатьИзмененныеОбъекты, "СравнениеКонфигураций.ОтображатьИзмененныеОбъекты");
	ВосстановитьЗначениеБулево(ОтображатьОбъектыПоКоторымЕстьПравила, "СравнениеКонфигураций.ОтображатьОбъектыПоКоторымЕстьПравила");
	
	ВосстановитьЗначениеБулево(ЭлементыФормы.КоманднаяПанельРезультатСравнения.Кнопки.ПроизвестиОтбор.Пометка, "СравнениеКонфигураций.ПроизвестиОтбор");
	
	Если НЕ ЗначениеЗаполнено(КонфигурацияИсходная) Тогда
		
		СохраненноеЗначение = ВосстановитьЗначение("СравнениеКонфигураций.КонфигурацияИсходная");
			
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			
			Попытка
				ОбъектСохраненнойКонфигурации = СохраненноеЗначение.ПолучитьОбъект();
			Исключение
				СохраненноеЗначение = Неопределено;
			КонецПопытки;
			
		Иначе
			СохраненноеЗначение = Неопределено;
		КонецЕсли;
			
		Если СохраненноеЗначение = Неопределено Тогда
				
			Выборка = Справочники.Конфигурации.Выбрать();	
				
			Если Выборка.Следующий() Тогда
					
				СохраненноеЗначение = Выборка.Ссылка;
								
			КонецЕсли;				
				
		КонецЕсли;
		
		КонфигурацияИсходная = СохраненноеЗначение;
				
	Конецесли;	
	
	Если НЕ ЗначениеЗаполнено(КонфигурацияСравнения) Тогда
		
		СохраненноеЗначение = ВосстановитьЗначение("СравнениеКонфигураций.КонфигурацияСравнения");
			
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			
			Попытка
				ОбъектСохраненнойКонфигурации = СохраненноеЗначение.ПолучитьОбъект();
			Исключение
				СохраненноеЗначение = Неопределено;
			КонецПопытки;
			
		Иначе
			СохраненноеЗначение = Неопределено;
		КонецЕсли;
			
		Если СохраненноеЗначение = Неопределено Тогда
				
			Выборка = Справочники.Конфигурации.Выбрать();	
				
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Ссылка <> КонфигурацияИсходная Тогда
					СохраненноеЗначение = Выборка.Ссылка;
					Прервать;
				КонецЕсли;
					
			КонецЦикла;				
				
		КонецЕсли;
		
		КонфигурацияСравнения = СохраненноеЗначение;
				
	Конецесли;
	
	Конвертация = ВосстановитьЗначение("СравнениеКонфигураций.Конвертация");
	ОбновитьДанныеКнопкиОтбора();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("СравнениеКонфигураций.ОтображатьДобавленныеОбъекты", ОтображатьДобавленныеОбъекты);
	СохранитьЗначение("СравнениеКонфигураций.ОтображатьУдаленныеОбъекты", ОтображатьУдаленныеОбъекты);
	СохранитьЗначение("СравнениеКонфигураций.ОтображатьИзмененныеОбъекты", ОтображатьИзмененныеОбъекты);
	СохранитьЗначение("СравнениеКонфигураций.ОтображатьОбъектыПоКоторымЕстьПравила", ОтображатьОбъектыПоКоторымЕстьПравила);
	
	СохранитьЗначение("СравнениеКонфигураций.ПроизвестиОтбор", ЭлементыФормы.КоманднаяПанельРезультатСравнения.Кнопки.ПроизвестиОтбор.Пометка);
	
	СохранитьЗначение("СравнениеКонфигураций.КонфигурацияИсходная", КонфигурацияИсходная);
	СохранитьЗначение("СравнениеКонфигураций.КонфигурацияСравнения", КонфигурацияСравнения);
	СохранитьЗначение("СравнениеКонфигураций.Конвертация", Конвертация);
	
КонецПроцедуры

Процедура ОбъектыСравненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, 
		ЗначИмяКолонкиАнализаИмени = "ИсходнаяКонфигурация", 
		ИмяКолонкиАнализаТипа = "ТипИсточника", ИмяКолонкиАнализаВида = "ВидИсточника") Экспорт
	
	ДанныеДляУстановки = ОформлениеСтроки.Ячейки[ЗначИмяКолонкиАнализаИмени];
	ЗначениеТипа = ДанныеСтроки[ИмяКолонкиАнализаТипа];	
	ЗначениеАнализа = ДанныеСтроки[ЗначИмяКолонкиАнализаИмени];
	ЗначениеВида = ДанныеСтроки[ИмяКолонкиАнализаВида];
	
	// имя
	Если ЗначениеАнализа = Перечисления.ТипыОбъектов.ПланОбмена Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланОбмена);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.Справочник Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Справочник);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.Документ Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Документ);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.Перечисление Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Перечисление);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.ПланВидовХарактеристик Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланВидовХарактеристик);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.ПланСчетов Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланСчетов);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.ПланВидовРасчета Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланВидовРасчета);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.РегистрСведений Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.РегистрНакопления Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрНакопления);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.РегистрБухгалтерии Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрБухгалтерии);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.РегистрРасчета Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрРасчета);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.БизнесПроцесс Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.БизнесПроцесс);
		
	ИначеЕсли ЗначениеАнализа = Перечисления.ТипыОбъектов.Задача Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Задача);
		
	ИначеЕсли ЗначениеАнализа = "Предопределенные" Тогда	
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Предопределенные);
		
	ИначеЕсли ЗначениеАнализа = "Конфигурация" Тогда	
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Конфигурация);
		
	// тип	
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.Справочник Тогда
			
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.СправочникОбъект);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.Документ Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ДокументОбъект);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.Перечисление Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Перечисление);
								
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.ПланВидовХарактеристик Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланВидовХарактеристикОбъект);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.ПланСчетов Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланСчетовОбъект);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.ПланВидовРасчета Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланВидовРасчетаОбъект);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.РегистрСведений Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрСведенийЗапись);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.РегистрНакопления Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрНакопления);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.РегистрБухгалтерии Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрБухгалтерии);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.РегистрРасчета Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрРасчета);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.БизнесПроцесс Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.БизнесПроцессОбъект);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.СтартБизнесПроцесса);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.Задача Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ЗадачаОбъект);
		
	ИначеЕсли ЗначениеТипа = Перечисления.ТипыОбъектов.ПланОбмена Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ПланОбменаОбъект);
		
	// вид	
		
	ИначеЕсли ЗначениеВида = Перечисления.ВидыСвойств.Измерение
		ИЛИ ЗначениеВида = Перечисления.ВидыСвойств.Реквизит
		ИЛИ ЗначениеВида = Перечисления.ВидыСвойств.Ресурс
		ИЛИ ЗначениеВида = Перечисления.ВидыСвойств.Свойство
		ИЛИ ЗначениеВида = Перечисления.ВидыСвойств.ВидыСубконтоСчета
		ИЛИ ЗначениеВида = Перечисления.ВидыСвойств.НаборЗаписейПоследовательности Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Элемент);
		
	ИначеЕсли ЗначениеВида = Перечисления.ВидыСвойств.НаборДвиженийРегистраБухгалтерии Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрБухгалтерии);
		
	ИначеЕсли ЗначениеВида = Перечисления.ВидыСвойств.НаборДвиженийРегистраНакопления Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрНакопления);
		
	ИначеЕсли ЗначениеВида = Перечисления.ВидыСвойств.НаборДвиженийРегистраРасчета Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрРасчета);
		
	ИначеЕсли ЗначениеВида = Перечисления.ВидыСвойств.НаборДвиженийРегистраСведений
		ИЛИ ЗначениеВида = Перечисления.ВидыСвойств.НаборЗаписейПодчиненногоРегистраСведений Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
		
	ИначеЕсли ЗначениеВида = Перечисления.ВидыСвойств.ПодчиненныйСправочник Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.Справочник);
		
	ИначеЕсли ЗначениеВида = Перечисления.ВидыСвойств.ТабличнаяЧасть Тогда
		
		ДанныеДляУстановки.УстановитьКартинку(БиблиотекаКартинок.ТабличнаяЧасть);
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ДеревоРезультатСравненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектыСравненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, "ИсходнаяКонфигурация", "ТипИсточника", "ВидИсточника");
	ОбъектыСравненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, "КонфигурацияСравнения", "ТипПриемника", "ВидПриемника");
	
	Если ДанныеСтроки.РезультатСравнения = 1 Тогда
		
		// добавлен в первом
		ОформлениеСтроки.ЦветФона = WebЦвета.БледноЗеленый;
		
	ИначеЕсли ДанныеСтроки.РезультатСравнения = 2 Тогда
		
		// удален а первом
		ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
		
	ИначеЕсли ДанныеСтроки.РезультатСравнения = 3 Тогда
		
		// изменен
		ОформлениеСтроки.ЦветФона = WebЦвета.ТопленоеМолоко;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьРазницуТипов(ТаблицаТипов, Источник, Приемник)
	
	// заполняем таблицу типами источника и приемника
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Свойства")
		И Не Источник.Пустая() Тогда
		
		Для Каждого ТипДанных Из Источник.Типы Цикл
			
			СтрокаТаблицы = ТаблицаТипов.Добавить();	
			СтрокаТаблицы.ТипИсточника = ТипДанных.Тип;
			СтрокаТаблицы.ИмяТипаИсточника = ТипДанных.Тип.Имя;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(Приемник) = Тип("СправочникСсылка.Свойства")
		И Не Приемник.Пустая() Тогда
		
		Для Каждого ТипДанных Из Приемник.Типы Цикл
			
			ИмяТипаПриемника = ТипДанных.Тип.Имя;
			СтрокаТаблицы = ТаблицаТипов.Найти(ИмяТипаПриемника, "ИмяТипаИсточника");
			Если СтрокаТаблицы = Неопределено Тогда
				
				СтрокаТаблицы = ТаблицаСравненияТипов.Добавить();
				СтрокаТаблицы.ТипПриемника = ТипДанных.Тип;
				
			Иначе
				
				ТаблицаТипов.Удалить(СтрокаТаблицы);
				
			КонецЕсли;			
						
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДеревоРезультатСравненияПриАктивизацииСтроки(Элемент)
	
	ТаблицаСравненияТипов.Очистить();
	
	Если ЭлементыФормы.ДеревоРезультатСравнения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Источник = ЭлементыФормы.ДеревоРезультатСравнения.ТекущиеДанные.ИсходнаяКонфигурация;
	Приемник = ЭлементыФормы.ДеревоРезультатСравнения.ТекущиеДанные.КонфигурацияСравнения;
	
	ОпределитьРазницуТипов(ТаблицаСравненияТипов, Источник, Приемник);	
	
КонецПроцедуры

Процедура ТаблицаСравненияТиповПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыМетаданныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки.ТипИсточника, "ТипИсточника");
	ОформлениеСтроки.Ячейки.ТипИсточника.ОтображатьКартинку = Истина;
	
	ОбъектыМетаданныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки.ТипПриемника, "ТипПриемника");
	ОформлениеСтроки.Ячейки.ТипПриемника.ОтображатьКартинку = Истина;
	
КонецПроцедуры

Функция ПолучитьСтрокуСтандартнойВыгрузкиСсылки(СсылкаНаОбъект)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-16");
	
	Попытка
		ЗаписатьXML(ЗаписьXML, СсылкаНаОбъект.ПолучитьОбъект()); 
	Исключение
	КонецПопытки;
	
	СтрXML = ЗаписьXML.Закрыть();
	Возврат СтрXML;
	
КонецФункции

Процедура КоманднаяПанельРезультатСравненияПоказатьРазличия(Кнопка)
	
	Если ЭлементыФормы.ДеревоРезультатСравнения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеИсходное = ЭлементыФормы.ДеревоРезультатСравнения.ТекущиеДанные.ИсходнаяКонфигурация; 
	ЗначениеСравнения = ЭлементыФормы.ДеревоРезультатСравнения.ТекущиеДанные.КонфигурацияСравнения;
	
	// сохраняем эти строки в 2 файла и сравниваем файлы
	ИмяКаталога = КаталогВременныхФайлов();
	
	ИмяФайлаДо = ИмяКаталога + "\" + "Исходное.txt";
	ИмяФайлаПосле = ИмяКаталога + "\" + "Сравнение.txt";
	
	Текст = Новый ЗаписьТекста(ИмяФайлаДо, КодировкаТекста.ANSI);
	Текст.Записать(ПолучитьСтрокуСтандартнойВыгрузкиСсылки(ЗначениеИсходное));
	Текст.Закрыть();
	
	Текст = Новый ЗаписьТекста(ИмяФайлаПосле, КодировкаТекста.ANSI);
	Текст.Записать(ПолучитьСтрокуСтандартнойВыгрузкиСсылки(ЗначениеСравнения));
	Текст.Закрыть();
	
	Сравнение = Новый СравнениеФайлов;
	
	Сравнение.ПервыйФайл = ИмяФайлаДо;
	Сравнение.ВторойФайл = ИмяФайлаПосле;
	
	Сравнение.СпособСравнения = СпособСравненияФайлов.ТекстовыйДокумент;
	
	Сравнение.ПоказатьРазличия();
	
	УдалитьФайлы(ИмяФайлаДо);
	УдалитьФайлы(ИмяФайлаПосле);
	
КонецПроцедуры

Функция ПолучитьМассивПКО(ДанныеДерева)
	
	МассивПКО = Новый Массив();
	
	СтрокаДляПКО = ДанныеДерева;
	
	УровеньДерева = СтрокаДляПКО.Уровень();
	
	Если УровеньДерева < 2 Тогда
		Возврат МассивПКО;
	КонецЕсли;
	
	Пока УровеньДерева > 2 Цикл
		
		СтрокаДляПКО = СтрокаДляПКО.Родитель;	
		УровеньДерева = СтрокаДляПКО.Уровень();
		
	КонецЦикла;
	
	МассивОбъектов = Новый Массив();
	Если ЗначениеЗаполнено(ДанныеДерева.ИсходнаяКонфигурация)
		И ТипЗнч(ДанныеДерева.ИсходнаяКонфигурация) = Тип("СправочникСсылка.Объекты") Тогда
		МассивОбъектов.Добавить(ДанныеДерева.ИсходнаяКонфигурация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДерева.КонфигурацияСравнения)
		И ТипЗнч(ДанныеДерева.КонфигурацияСравнения) = Тип("СправочникСсылка.Объекты") Тогда
		МассивОбъектов.Добавить(ДанныеДерева.КонфигурацияСравнения);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ПравилаКонвертацииОбъектов.Ссылка КАК ПКО
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
				   |ГДЕ 
				   |	ПравилаКонвертацииОбъектов.Владелец = &Конвертация
				   |	И (ПравилаКонвертацииОбъектов.Источник В (&МассивОбъектов)
				   |		ИЛИ ПравилаКонвертацииОбъектов.Приемник В (&МассивОбъектов) )
				   |	И ПравилаКонвертацииОбъектов.ПометкаУдаления = Ложь";
				   
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("Конвертация", Конвертация);
	
	МассивПКО = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПКО");
	
	Возврат МассивПКО;	
	
КонецФункции

Процедура КоманднаяПанельРезультатСравненияПерейтиКПравилу(Кнопка)
	
	ДанныеДерева = ЭлементыФормы.ДеревоРезультатСравнения.ТекущиеДанные;
	
	Если ДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Конвертация) Тогда
		Предупреждение("Не указаны правила обмена");
		Возврат;
	КонецЕсли;	
	
	Источник = ДанныеДерева.ИсходнаяКонфигурация;	
	Приемник = ДанныеДерева.КонфигурацияСравнения;	
	
	УровеньДерева = ДанныеДерева.Уровень();
	Если УровеньДерева < 2 Тогда
		Возврат;
	КонецЕсли;
	
	// 2 - уровень ПКО
	// а дальше ПКС и ПКЗ
	
	МассивПКО = ПолучитьМассивПКО(ДанныеДерева);
	
	Если МассивПКО.Количество() = 0 Тогда
		Предупреждение("Правила не найдены");
		Возврат;
	КонецЕсли;
	
	Если УровеньДерева = 2
		ИЛИ (Не ЗначениеЗаполнено(Источник)
			И Не ЗначениеЗаполнено(Приемник)) Тогда
		
		// перейти на правило в форме настройки
		Форма = ПолучитьОбщуюФорму("ПравилаОбмена");
		Форма.Конвертация = Конвертация;
		Форма.ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = МассивПКО[0];
		//Форма.ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяСтрока = СсылкаНаПКС;
		Форма.Открыть();
		Возврат;
		
	КонецЕсли;
		
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Свойства")
		ИЛИ ТипЗнч(Приемник) = Тип("СправочникСсылка.Свойства") Тогда
		
		МассивОбъектов = Новый Массив();
		Если ЗначениеЗаполнено(Источник) Тогда
			МассивОбъектов.Добавить(Источник);
		КонецЕсли;
		Если ЗначениеЗаполнено(Приемник) Тогда
			МассивОбъектов.Добавить(Приемник);
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ПравилаКонвертацииСвойств.Ссылка КАК ПКС
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
				   |ГДЕ 
				   |	ПравилаКонвертацииСвойств.Владелец В (&МассивПКО)
				   |	И (ПравилаКонвертацииСвойств.Источник В (&МассивОбъектов)
				   |		ИЛИ ПравилаКонвертацииСвойств.Приемник В (&МассивОбъектов) )
				   |	И ПравилаКонвертацииСвойств.ПометкаУдаления = Ложь";
				   
		Запрос.УстановитьПараметр("МассивПКО", МассивПКО);
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		
		МассивПКС = Запрос.Выполнить().Выгрузить().ЗагрузитьКолонку("ПКС");
		
		Форма = ПолучитьОбщуюФорму("ПравилаОбмена");
		Форма.Конвертация = Конвертация;
		Форма.ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = МассивПКО[0];
		Если МассивПКС.Количество() > 0 Тогда
			Форма.ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяСтрока = МассивПКС[0];
		КонецЕсли;
		Форма.Открыть();
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Значения")
		ИЛИ ТипЗнч(Приемник) = Тип("СправочникСсылка.Значения") Тогда
		
		МассивОбъектов = Новый Массив();
		Если ЗначениеЗаполнено(Источник) Тогда
			МассивОбъектов.Добавить(Источник);
		КонецЕсли;
		Если ЗначениеЗаполнено(Приемник) Тогда
			МассивОбъектов.Добавить(Приемник);
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ПравилаКонвертацииЗначений.Ссылка КАК ПКЗ
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииЗначений КАК ПравилаКонвертацииЗначений
				   |ГДЕ 
				   |	ПравилаКонвертацииЗначений.Владелец В (&МассивПКО)
				   |	И (ПравилаКонвертацииЗначений.Источник В (&МассивОбъектов)
				   |		ИЛИ ПравилаКонвертацииЗначений.Приемник В (&МассивОбъектов) )
				   |	И ПравилаКонвертацииЗначений.ПометкаУдаления = Ложь";
				   
		Запрос.УстановитьПараметр("МассивПКО", МассивПКО);
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		
		МассивПКЗ = Запрос.Выполнить().Выгрузить().ЗагрузитьКолонку("ПКЗ");
		
		Форма = ПолучитьОбщуюФорму("ПравилаОбмена");
		Форма.Конвертация = Конвертация;
		Форма.ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = МассивПКО[0];
		Если МассивПКЗ.Количество() > 0 Тогда
			Форма.ЭлементыФормы.ПравилаКонвертацииЗначений.ТекущаяСтрока = МассивПКЗ[0];
		КонецЕсли;
		Форма.Открыть();		
		
	Иначе
		
		Форма = ПолучитьОбщуюФорму("ПравилаОбмена");
		Форма.Конвертация = Конвертация;
		Форма.ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = МассивПКО[0];
		Форма.Открыть();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеКнопкиОтбора()
	
	Кнопка = ЭлементыФормы.КоманднаяПанельРезультатСравнения.Кнопки.ПроизвестиОтбор;
	
	Если Кнопка.Пометка Тогда
		
		Кнопка.Текст = "Отменить отбор";
		Кнопка.Подсказка = "Отменить отбор";
		Кнопка.Пояснение = "Отменить отбор";
		Кнопка.Картинка = БиблиотекаКартинок.ОтключитьОтбор;
		
	Иначе
		
		Кнопка.Текст = "Произвести отбор";
		Кнопка.Подсказка = "Произвести отбор";
		Кнопка.Пояснение = "Произвести отбор";
		Кнопка.Картинка = БиблиотекаКартинок.ОтборИСортировка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельРезультатСравненияПроизвестиОтбор(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ОбновитьДанныеКнопкиОтбора();
	ПрименитьФильтрациюПриВыводеДерева();
	
КонецПроцедуры

Процедура ПриИзмененииПараметровФильтрации(Элемент)
	
	Если ЭлементыФормы.КоманднаяПанельРезультатСравнения.Кнопки.ПроизвестиОтбор.Пометка Тогда
		
		ПрименитьФильтрациюПриВыводеДерева();
		
	КонецЕсли;
	
КонецПроцедуры

ОтображатьДобавленныеОбъекты = Истина;
ОтображатьУдаленныеОбъекты = Истина;
ОтображатьИзмененныеОбъекты = Истина;
ОтображатьОбъектыПоКоторымЕстьПравила = Ложь;
