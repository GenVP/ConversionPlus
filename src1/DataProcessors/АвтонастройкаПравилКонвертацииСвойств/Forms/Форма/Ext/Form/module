
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ

Перем мДействиеНачалоВыбораИсточник; //Действие при начале выбора источника
Перем мДействиеПриИзмененииИсточник; //Действие при изменении источника
Перем мДействиеОчисткаИсточник;      //Действие при очистке источник
Перем мДействиеНачалоВыбораПриемник; //Действие при начале выбора приемника
Перем мДействиеПриИзмененииПриемник; //Действие при изменении приемника
Перем мДействиеОчисткаПриемник;      //Действие при очистке приемника

Перем мИзмененИсточник;              //Флаг, признак изменения источника
Перем мИзмененПриемник;              //Флаг, признак изменения приемника


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТаблицаРезультата

Процедура ТаблицаРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	Если (НЕ Элемент.ТекущаяСтрока.ПравилоКС.Пустая()) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(ВыбраннаяСтрока.ПравилоКС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаРезультатаПередНачаломИзменения(Элемент, Отказ)

	Если (Элемент.ТекущаяСтрока = Неопределено) Тогда
    	Возврат;
	КонецЕсли;

	Если Элемент.ТекущаяКолонка.Имя = "ПравилоКС" Тогда
		Отказ = Ложь;
	ИначеЕсли (Элемент.ТекущаяКолонка.Имя = "ТипИсточника") ИЛИ (Элемент.ТекущаяКолонка.Имя = "ТипПриемника") Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаРезультатаПриНачалеРедактирования(Элемент, НоваяСтрока)

	Элемент.Колонки["ТипИсточника"].ЭлементУправления.Доступность = Ложь;
	Элемент.Колонки["ТипПриемника"].ЭлементУправления.Доступность = Ложь;

	Если (НЕ Элемент.ТекущаяСтрока.ПравилоКС.Пустая()) Тогда
		Элемент.Колонки["Источник"].ЭлементУправления.Доступность = Ложь;
		Элемент.Колонки["Приемник"].ЭлементУправления.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаРезультатаПриНачалеРедактирования()

Процедура ТаблицаРезультатаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если      Элемент.ТекущаяКолонка.Имя = "Источник" И мИзмененИсточник Тогда

		Элемент.ТекущаяСтрока.Строки.Очистить();

		СинхронизироватьСвойства(Элемент.ТекущаяСтрока.Строки,
		                         ПравилоКО.Источник,
								 ПравилоКО.Приемник,
								 Элемент.ТекущаяСтрока.Источник,
								 Элемент.ТекущаяСтрока.Приемник,
								 ,
								 ,
								 Ложь);

		Элемент.ТекущаяСтрока.Пометка = Истина;

		//После указания ручного соответствия удалим дублирующую строку
		УсловиеПоиска = Новый Структура;
		УсловиеПоиска.Вставить("Источник", Элемент.ТекущаяСтрока.Источник);

		НайденныеСтроки = ТаблицаРезультат.Строки.НайтиСтроки(УсловиеПоиска, Истина);

        Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Приемник.Пустая() И (НЕ НайденнаяСтрока = Элемент.ТекущаяСтрока) Тогда
				Если НайденнаяСтрока.Родитель = Неопределено Тогда
					ТаблицаРезультат.Строки.Удалить(НайденнаяСтрока);
				Иначе
					НайденнаяСтрока.Родитель.Строки.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		УстановитьПометкиСогласноПараметрам(Элемент.ТекущаяСтрока, Ложь);
		
		мИзмененИсточник = Ложь;

	ИначеЕсли Элемент.ТекущаяКолонка.Имя = "Приемник" И мИзмененПриемник Тогда

		Элемент.ТекущаяСтрока.Строки.Очистить();

		СинхронизироватьСвойства(Элемент.ТекущаяСтрока.Строки,
		                         ПравилоКО.Источник,
								 ПравилоКО.Приемник,
								 Элемент.ТекущаяСтрока.Источник,
								 Элемент.ТекущаяСтрока.Приемник,
								 ,
								 ,
								 Ложь);

		Элемент.ТекущаяСтрока.Пометка = Истина;

		//После указания ручного соответствия удалим дублирующую строку
		УсловиеПоиска = Новый Структура;
		УсловиеПоиска.Вставить("Приемник", Элемент.ТекущаяСтрока.Приемник);

		НайденныеСтроки = ТаблицаРезультат.Строки.НайтиСтроки(УсловиеПоиска, Истина);

        Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Источник.Пустая() И (НЕ НайденнаяСтрока = Элемент.ТекущаяСтрока) Тогда
				Если НайденнаяСтрока.Родитель = Неопределено Тогда
					ТаблицаРезультат.Строки.Удалить(НайденнаяСтрока);
				Иначе
					НайденнаяСтрока.Родитель.Строки.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		УстановитьПометкиСогласноПараметрам(Элемент.ТекущаяСтрока, Ложь);
		мИзмененПриемник = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаРезультатаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Ячейки = ОформлениеСтроки.Ячейки;

	Ячейки["ПравилоКС"].ОтображатьКартинку = Истина;
	Ячейки["Источник"].ОтображатьКартинку  = Истина;
	Ячейки["Приемник"].ОтображатьКартинку  = Истина;

	Если ДанныеСтроки.Строки.Количество() Тогда
		Ячейки["ПравилоКС"].ИндексКартинки = 0;
	Иначе
		Ячейки["ПравилоКС"].ИндексКартинки = 1;
	КонецЕсли;

	Если НЕ ДанныеСтроки.Источник.Пустая() Тогда
        Если ДанныеСтроки.Источник.ЭтоГруппа Тогда
			Ячейки["Источник"].ИндексКартинки = ?(ДанныеСтроки.Источник.ПометкаУдаления, 2, 0);
		Иначе
			Ячейки["Источник"].ИндексКартинки = ?(ДанныеСтроки.Источник.ПометкаУдаления, 3, 1);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ДанныеСтроки.Приемник.Пустая() Тогда
        Если ДанныеСтроки.Приемник.ЭтоГруппа Тогда
			Ячейки["Приемник"].ИндексКартинки = ?(ДанныеСтроки.Приемник.ПометкаУдаления, 2, 0);
		Иначе
			Ячейки["Приемник"].ИндексКартинки = ?(ДанныеСтроки.Приемник.ПометкаУдаления, 3, 1);
		КонецЕсли;
	КонецЕсли;
	
	ИсточникНеПустой = НЕ ДанныеСтроки.Источник.Пустая();
	ПриемникНеПустой = НЕ ДанныеСтроки.Приемник.Пустая();
	
	Если (ИсточникНеПустой) И (ПриемникНеПустой) Тогда
		Если ДанныеСтроки.ПравилоКС.Пустая() Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.ШелковыйОттенок;
		Иначе
			ОформлениеСтроки.ЦветТекста = WebЦвета.ЗеленыйЛес;
		КонецЕсли;
	Иначе
        Если ДанныеСтроки.ПравилоКС.Пустая() Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.СветлоГрифельноСерый;
		Иначе
			ОформлениеСтроки.ЦветТекста = WebЦвета.ЗеленыйЛес;
		КонецЕсли;
	КонецЕсли;

	Если ДанныеСтроки.Источник.ЭтоГруппа Тогда
		Ячейки.ТипИсточника.УстановитьТекст(ДанныеСтроки.Источник.Вид);
		Ячейки.ТипПриемника.УстановитьТекст(ДанныеСтроки.Приемник.Вид);
	Иначе
		Ячейки.ТипИсточника.УстановитьТекст(ДанныеСтроки.Источник.ТипыСтрокой);
		Ячейки.ТипПриемника.УстановитьТекст(ДанныеСтроки.Приемник.ТипыСтрокой);
	КонецЕсли;

	Если НЕ ДанныеСтроки.ПравилоКС.Пустая() Тогда
		ОформлениеСтроки.Ячейки["Источник"].ТолькоПросмотр  = Истина;
		ОформлениеСтроки.Ячейки["Приемник"].ТолькоПросмотр  = Истина;
		ОформлениеСтроки.Ячейки["ПравилоКО"].ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаРезультатаПриИзмененииФлажка(Элемент, Колонка)
	
	УстановитьПометкиСогласноПараметрам(Элемент.ТекущаяСтрока, Истина);
	    
КонецПроцедуры

Процедура НачалоВыбораИсточник(Элемент, СтандартнаяОбработка)

    Если ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Приемник.ЭтоГруппа Тогда

		Элемент.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы;
		
	Иначе

		СтандартнаяОбработка = Ложь;

		Форма = Справочники.Свойства.ПолучитьФормуВыбора(, Элемент);
		Форма.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

		ТекущийРодитель = ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Родитель;

		Если ТекущийРодитель <> Неопределено Тогда
			Форма.РодительОтбор = ТекущийРодитель.Источник;
		КонецЕсли;

		Форма.НеИзменятьРодителя        = Истина;
		Форма.ПараметрОтборПоВладельцу  = ПравилоКО.Источник;
		Форма.ПараметрВыборПоВладельцу  = ПравилоКО.Источник;
		
		Форма.НачальноеЗначениеВыбора   = Элемент.Значение;

		Форма.Открыть();

	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииИсточник(Элемент)

	мИзмененИсточник = Истина;
	
КонецПроцедуры

Процедура ОчисткаИсточник(Элемент, СтандартнаяОбработка)

	Если Элемент.Значение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Пометка = Ложь;

	ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Строки.Очистить();

	СинхронизироватьСвойства(ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Строки,
							 ПравилоКО.Источник,
							 ПравилоКО.Приемник,
							 Справочники.Свойства.ПустаяСсылка(),
							 ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Приемник,
							 ,
							 ,
							 Ложь);


    Если ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Родитель = Неопределено Тогда

		СтрокаВДереве = ТаблицаРезультат.Строки.Найти(Элемент.Значение, "Источник");
		
		Если СтрокаВДереве = Неопределено Тогда
			
			НоваяСтрока = ТаблицаРезультат.Строки.Добавить();
	    	НоваяСтрока.Источник = Элемент.Значение;
		
			СинхронизироватьСвойства(НоваяСтрока.Строки,
									 ПравилоКО.Источник,
									 ПравилоКО.Приемник,
									 ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Источник,
									 Справочники.Свойства.ПустаяСсылка(),
									 ,
									 ,
									 Ложь);
			
		КонецЕсли;		
		
	Иначе

		СтрокаВДереве = ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Родитель.Строки.Найти(Элемент.Значение, "Источник");
		
		Если СтрокаВДереве = Неопределено Тогда
			НоваяСтрока = ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Родитель.Строки.Добавить();
			НоваяСтрока.Источник = Элемент.Значение;		
		КонецЕсли;		
		
	КонецЕсли;
	
	ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Пометка = Ложь;

	Элемент.Значение = Справочники.Свойства.ПустаяСсылка();
	
КонецПроцедуры

Процедура НачалоВыбораПриемник(Элемент, СтандартнаяОбработка)

    Если ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Источник.ЭтоГруппа Тогда

		Элемент.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы;

	Иначе

		СтандартнаяОбработка = Ложь;

		Форма = Справочники.Свойства.ПолучитьФормуВыбора(, Элемент);
		Форма.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

		ТекущийРодитель = ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Родитель;

		Если ТекущийРодитель <> Неопределено Тогда
			Форма.РодительОтбор = ТекущийРодитель.Приемник;
		КонецЕсли;

		Форма.НеИзменятьРодителя        = Истина;
		Форма.ПараметрОтборПоВладельцу  = ПравилоКО.Приемник;
		Форма.ПараметрВыборПоВладельцу  = ПравилоКО.Приемник;
		
		Форма.НачальноеЗначениеВыбора   = Элемент.Значение;

		Форма.Открыть();

	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииПриемник(Элемент)

	мИзмененПриемник = Истина;
	
КонецПроцедуры

Процедура ОчисткаПриемник(Элемент, СтандартнаяОбработка)

	Если Элемент.Значение.Пустая() Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Пометка = Ложь;

	ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Строки.Очистить();

	СинхронизироватьСвойства(ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Строки,
							 ПравилоКО.Источник,
							 ПравилоКО.Приемник,
							 ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Источник,
							 Справочники.Свойства.ПустаяСсылка(),
							 ,
							 ,
							 Ложь);


    Если ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Родитель = Неопределено Тогда

		СтрокаВДереве = ТаблицаРезультат.Строки.Найти(Элемент.Значение, "Приемник");
		
		Если СтрокаВДереве = Неопределено Тогда
			
			НоваяСтрока = ТаблицаРезультат.Строки.Добавить();
	    	НоваяСтрока.Приемник = Элемент.Значение;
		
			СинхронизироватьСвойства(НоваяСтрока.Строки,
									 ПравилоКО.Источник,
									 ПравилоКО.Приемник,
									 Справочники.Свойства.ПустаяСсылка(),
									 ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Приемник,
									 ,
									 ,
									 Ложь);
			
		КонецЕсли;		
		
	Иначе

		СтрокаВДереве = ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Родитель.Строки.Найти(Элемент.Значение, "Приемник");
		
		Если СтрокаВДереве = Неопределено Тогда
			
			НоваяСтрока = ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Родитель.Строки.Добавить();
			НоваяСтрока.Приемник = Элемент.Значение;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	ЭлементыФормы.ТаблицаРезультата.ТекущаяСтрока.Пометка = Ложь;

	Элемент.Значение = Справочники.Свойства.ПустаяСсылка();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельФормы

Процедура КоманднаяПанельФормыУстановитьПометки(Кнопка)

	Для каждого Строка из ТаблицаРезультат.Строки Цикл
		Строка.Пометка = 1;
		УстановитьПометкиСогласноПараметрам(Строка, Истина);
       КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельФормыУстановитьПометки()

Процедура КоманднаяПанельФормыСнятьПометки(Кнопка)

	Для каждого Строка из ТаблицаРезультат.Строки Цикл
		Строка.Пометка = 0;
		УстановитьПометкиСогласноПараметрам(Строка, Истина);		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельФормыСнятьПометки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

Процедура ЗаписатьПравила()
	
	СохранитьПравилаКС(ТаблицаРезультат.Строки, СоздаватьПравилаКО);

	Для каждого Строка из ЭлементыФормы.ТаблицаРезультата.Значение.Строки Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура НижняяКоманднаяПанельЗаписать(Кнопка)

	ЗаписатьПравила();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ПравилоКО.Пустая() Тогда
		СообщитьОбОшибке("Не выбрано правило конвертации объекта.", Отказ);
	КонецЕсли;
	
	РежимАвтоматическогоСопоставления = Ложь;
		
КонецПроцедуры

Процедура ОбновитьДанныеОСинхронизацииСвойств()
	
	Если НЕ ВыполнитьСинхронизацию() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Заголовок = "Настройка правил конвертации свойств (" + СокрЛП(ПравилоКО.Код) + ")";
	
	ЭлементыФормы.ТаблицаРезультата.Данные = "ТаблицаРезультат";
	ЭлементыФормы.ТаблицаРезультата.СоздатьКолонки();

	Ячейка = ЭлементыФормы.ТаблицаРезультата.Колонки.Источник.ЭлементУправления;

	Ячейка.ВыбиратьТип = Ложь;
    Ячейка.КнопкаОткрытия = Истина;
    Ячейка.ВыборПоВладельцу = ПравилоКО.Источник;
	Ячейка.УстановитьДействие("НачалоВыбора", мДействиеНачалоВыбораИсточник);
    Ячейка.УстановитьДействие("ПриИзменении", мДействиеПриИзмененииИсточник);
	Ячейка.УстановитьДействие("Очистка",      мДействиеОчисткаИсточник);
	
	Ячейка = ЭлементыФормы.ТаблицаРезультата.Колонки.Приемник.ЭлементУправления;

	Ячейка.ВыбиратьТип = Ложь;
    Ячейка.КнопкаОткрытия = Истина;
	Ячейка.ВыборПоВладельцу = ПравилоКО.Приемник;
	Ячейка.УстановитьДействие("НачалоВыбора", мДействиеНачалоВыбораПриемник);
    Ячейка.УстановитьДействие("ПриИзменении", мДействиеПриИзмененииПриемник);
	Ячейка.УстановитьДействие("Очистка",      мДействиеОчисткаПриемник);
	
	Ячейка = ЭлементыФормы.ТаблицаРезультата.Колонки.ПравилоКС.ЭлементУправления;
	
	Ячейка.ВыбиратьТип = Ложь;
    Ячейка.КнопкаОткрытия = Истина;

	Ячейка = ЭлементыФормы.ТаблицаРезультата.Колонки.ПравилоКО.ЭлементУправления;
    Ячейка.ВыборПоВладельцу = ПравилоКО.Владелец;
	Ячейка.ВыбиратьТип = Ложь;
    Ячейка.КнопкаОткрытия = Истина;

    Колонки  = ЭлементыФормы.ТаблицаРезультата.Колонки;

	Колонки["ПравилоКС"].ДанныеФлажка  = "Пометка";
	Колонки["ПравилоКС"].КартинкиСтрок = БиблиотекаКартинок.ГруппаИЭлемент;
	
	Колонки["ПравилоКС"].ИзменятьВидимость    = Ложь;
    Колонки["Источник"].ИзменятьВидимость     = Ложь;
	Колонки["Источник"].КартинкиСтрок         = БиблиотекаКартинок.ГруппаИЭлемент;
	Колонки["Приемник"].ИзменятьВидимость     = Ложь;
	Колонки["Приемник"].КартинкиСтрок         = БиблиотекаКартинок.ГруппаИЭлемент;
	Колонки["ПравилоКО"].ИзменятьВидимость    = Ложь;
	Колонки["ТипИсточника"].ИзменятьВидимость = Ложь;
    Колонки["ТипПриемника"].ИзменятьВидимость = Ложь;
	Колонки["Пометка"].ИзменятьВидимость      = Ложь;

	Колонки["ПравилоКС"].РежимРедактирования  = РежимРедактированияКолонки.Непосредственно;

	Колонки["Пометка"].Видимость              = Ложь;
	
	Колонки["НаименованиеИсточника"].Видимость = Ложь;
	Колонки["ВидИсточника"].Видимость = Ложь;
	
	Колонки["НаименованиеПриемника"].Видимость = Ложь;
	Колонки["ВидПриемника"].Видимость = Ложь;
	
	УстановитьПометкиУНайденныхСтрок(Ложь);
	
	Если Не ОтображатьВсеДанные Тогда
		ТаблицаРезультат.Строки.Сортировать("Пометка УБЫВ, ВидПриемника, ВидИсточника, Источник, Приемник", Истина);
	КонецЕсли;
			
КонецПроцедуры

Процедура ПриОткрытии()

	ОбработатьУстановкуСвойствОтображенияДанных();
	
	ОбновитьДанныеОСинхронизацииСвойств();
	
	ОбновитьДоступностьФлагаСоздаватьПКСДляПолейПоиска();
		    	
КонецПроцедуры

Процедура НижняяКоманднаяПанельОК(Кнопка)
	
	ЗаписатьПравила();
	Закрыть();
	
КонецПроцедуры

Процедура ОбработатьУстановкуСвойствОтображенияДанных()
	
	ЭлементыФормы.КоманднаяПанельТаблицыРезультата.Кнопки.РежимОтображения.Текст = ?(ОтображатьВсеДанные, "Не сопоставленные", "Все");
	ЭлементыФормы.КоманднаяПанельТаблицыРезультата.Кнопки.РежимОтображения.Пометка = НЕ ОтображатьВсеДанные;
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицыРезультатаРежимОтображения(Кнопка)
	
	ОтображатьВсеДанные = НЕ ОтображатьВсеДанные;
	ОбработатьУстановкуСвойствОтображенияДанных();
	
	ОбновитьДанныеОСинхронизацииСвойств();	
	
КонецПроцедуры

Процедура ОбновитьДоступностьФлагаСоздаватьПКСДляПолейПоиска()
	
	ЭлементыФормы.СоздаватьПКСТолькоДляПолейПоиска.Доступность = СоздаватьПравилаКО;	
	
КонецПроцедуры

Процедура СоздаватьПравилаКОПриИзменении(Элемент)
	
	ОбновитьДоступностьФлагаСоздаватьПКСДляПолейПоиска();	
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицыРезультатаУдалитьНаборыДвижений(Кнопка)
	
	НомерСтроки = ТаблицаРезультат.Строки.Количество() - 1;
	// удаляем из сопоставления все наборы движений
	Пока НомерСтроки >= 0 Цикл
		
		СтрокаДерева = ТаблицаРезультат.Строки[НомерСтроки];
		
		Если Найти(СтрокаДерева.ВидИсточника, "Набор движений") > 0
			ИЛИ Найти(СтрокаДерева.ВидПриемника, "Набор движений") > 0 Тогда
			
			ТаблицаРезультат.Строки.Удалить(СтрокаДерева);	
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки - 1;	
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДействиеНачалоВыбораИсточник = Новый Действие("НачалоВыбораИсточник");
мДействиеПриИзмененииИсточник = Новый Действие("ПриИзмененииИсточник");
мДействиеОчисткаИсточник      = Новый Действие("ОчисткаИсточник");
мДействиеНачалоВыбораПриемник = Новый Действие("НачалоВыбораПриемник");
мДействиеПриИзмененииПриемник = Новый Действие("ПриИзмененииПриемник");
мДействиеОчисткаПриемник      = Новый Действие("ОчисткаПриемник");

мИзмененИсточник = Ложь;
мИзмененПриемник = Ложь;

СоздаватьПравилаКО = Истина;
