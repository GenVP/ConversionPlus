
Процедура ВыполнитьУдалениеПравилДляДвижений()
	
	Сообщить("Начато удаление правил: " + ТекущаяДата());
	
	МассивПравилНеИзменять = ПравилаКоторыеИгнорировать.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ПравилаКонвертацииСвойств.Ссылка
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
	               |ГДЕ
				   |    ПравилаКонвертацииСвойств.Владелец.Владелец = &Конвертация
				   |	И ПравилаКонвертацииСвойств.ЭтоГруппа = Истина
	               |	И (НЕ ПравилаКонвертацииСвойств.Владелец В (&МассивПравилНеИзменять))
				   |	И
				   |(ПравилаКонвертацииСвойств.Источник.Вид В (&ВидыОтбора)
				   |	ИЛИ ПравилаКонвертацииСвойств.Приемник.Вид В (&ВидыОтбора))";
				   
	Запрос.УстановитьПараметр("Конвертация", Конвертация);
	
	Если МассивПравилНеИзменять.Количество() = 0 Тогда
		МассивПравилНеИзменять.Добавить(Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка());
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивПравилНеИзменять", МассивПравилНеИзменять);
	
	МассивВидовОтбора = Новый Массив();
	МассивВидовОтбора.Добавить(Перечисления.ВидыСвойств.НаборДвиженийРегистраБухгалтерии);
	МассивВидовОтбора.Добавить(Перечисления.ВидыСвойств.НаборДвиженийРегистраНакопления);
	МассивВидовОтбора.Добавить(Перечисления.ВидыСвойств.НаборДвиженийРегистраРасчета);
	МассивВидовОтбора.Добавить(Перечисления.ВидыСвойств.НаборДвиженийРегистраСведений);
	МассивВидовОтбора.Добавить(Перечисления.ВидыСвойств.НаборЗаписейПодчиненногоРегистраСведений);
	МассивВидовОтбора.Добавить(Перечисления.ВидыСвойств.НаборЗаписейПоследовательности);
	
	Запрос.УстановитьПараметр("ВидыОтбора", МассивВидовОтбора);
	
	Состояние("Удаление ПКС");
	НомерТекущегоПравила = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();		
		
		НомерТекущегоПравила = НомерТекущегоПравила + 1;
		
		Если НомерТекущегоПравила % 25 = 0 Тогда
			
			Состояние("Удаление ПКС переносящих движения документов, обработано: " + Строка(НомерТекущегоПравила) + ". ПКО для которого удаляются правила: " + Объект.Владелец);
			
		КонецЕсли;
		
		Объект.Удалить();
		
	КонецЦикла;	
	
	Сообщить("Удаление правил завершено: " + ТекущаяДата());
	Сообщить(Символы.ПС);
	
КонецПроцедуры

Процедура ВыполнитьУдалениеПравилДляРегистровПодчиненныхРегистратору()
	
	Сообщить("Начато удаление правил для подчиненных регистраторам регистров: " + ТекущаяДата());
	
	МассивПравилНеИзменять = ПравилаКоторыеИгнорировать.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПравилаКонвертацииОбъектов.Ссылка
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
				   |
				   |	Левое соединение Справочник.Свойства КАК СвойстваИсточника
				   |		По СвойстваИсточника.Владелец = ПравилаКонвертацииОбъектов.Источник
				   |			И СвойстваИсточника.Наименование = ""Регистратор""
				   |
				   |	Левое соединение Справочник.Свойства КАК СвойстваПриемника
				   |		По СвойстваПриемника.Владелец = ПравилаКонвертацииОбъектов.Приемник
				   |			И СвойстваПриемника.Наименование = ""Регистратор""
	               |ГДЕ
	               |	ПравилаКонвертацииОбъектов.Владелец = &Конвертация
	               |	И (ПравилаКонвертацииОбъектов.Источник.Тип В (&ТипыОбъекта)
	               |			ИЛИ ПравилаКонвертацииОбъектов.Приемник.Тип В (&ТипыОбъекта))
	               |	И (НЕ ПравилаКонвертацииОбъектов.Ссылка В (&МассивПравилНеИзменять))
				   |	И (НЕ СвойстваИсточника.Ссылка Есть NULL
				   |		ИЛИ НЕ СвойстваПриемника.Ссылка Есть NULL)
				   |	";
				   
	Запрос.УстановитьПараметр("Конвертация", Конвертация);
	
	Если МассивПравилНеИзменять.Количество() = 0 Тогда
		МассивПравилНеИзменять.Добавить(Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка());
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивПравилНеИзменять", МассивПравилНеИзменять);
	
	МассивВидовОтбора = Новый Массив();
	МассивВидовОтбора.Добавить(Перечисления.ТипыОбъектов.ПланВидовРасчета);
	МассивВидовОтбора.Добавить(Перечисления.ТипыОбъектов.РегистрБухгалтерии);
	МассивВидовОтбора.Добавить(Перечисления.ТипыОбъектов.РегистрНакопления);
	МассивВидовОтбора.Добавить(Перечисления.ТипыОбъектов.РегистрСведений);
		
	Запрос.УстановитьПараметр("ТипыОбъекта", МассивВидовОтбора);
	
	Состояние("Удаление ПКО");
	НомерТекущегоПравила = 0;
	МассивУдаленныхПКО = Новый Массив();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивУдаленныхПКО.Добавить(Выборка.Ссылка);
		Объект = Выборка.Ссылка.ПолучитьОбъект();		
		
		НомерТекущегоПравила = НомерТекущегоПравила + 1;
		
		Если НомерТекущегоПравила % 5 = 0 Тогда
			
			Состояние("Удаление правил конвертации подчиненных регистраторам регистров: " + Строка(НомерТекущегоПравила));
			
		КонецЕсли;
		
		Объект.Удалить();
		
	КонецЦикла;	
	
	Сообщить("Удаление правил для подчиненных регистраторам регистров завершено: " + ТекущаяДата());
	Сообщить(Символы.ПС);
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные
				   |	ПравилаВыгрузкиДанных.Ссылка
				   |ИЗ
				   |	Справочник.ПравилаВыгрузкиДанных КАК ПравилаВыгрузкиДанных
				   |ГДЕ
				   |	ПравилаВыгрузкиДанных.ПравилоКонвертации В (&ПКО)";
	Запрос.УстановитьПараметр("ПКО", МассивУдаленныхПКО);
	ВыборкаПравилаВыгрузки = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПравилаВыгрузки.Следующий() цикл
			
		Объект = ВыборкаПравилаВыгрузки.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьИнвертированиеПравил()
	
	Сообщить("Начато инвертирование правил: " + ТекущаяДата());
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаКонвертацииОбъектов.Ссылка,
	               |	ПравилаКонвертацииОбъектов.Приемник
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	               |ГДЕ
	               |	ПравилаКонвертацииОбъектов.Владелец = &Конвертация
	               |	И ПравилаКонвертацииОбъектов.ЭтоГруппа = ЛОЖЬ
	               |";
				   
	Если ЗначениеЗаполнено(ПравилоКонвертацииДляИнвертирования) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И ПравилаКонвертацииОбъектов.Ссылка В ИЕРАРХИИ(&ОграничениеПКО)"
					   
	КонецЕсли;				  
				   
	Запрос.УстановитьПараметр("Конвертация", Конвертация);			   
	Запрос.УстановитьПараметр("ОграничениеПКО", ПравилоКонвертацииДляИнвертирования);
	
	НомерИзменяемогоПравила = 0;
	Выборка = Запрос.Выполнить().Выбрать();		
	
	Пока Выборка.Следующий() Цикл
		
		НомерИзменяемогоПравила = НомерИзменяемогоПравила + 1;
		
		//инвертирование значений
		ВыборкаЗначений = Справочники.ПравилаКонвертацииЗначений.Выбрать(,Выборка.Ссылка);
		Пока ВыборкаЗначений.Следующий() цикл
			
			Если ВыборкаЗначений.ЭтоГруппа Тогда 
				Продолжить; 
			КонецЕсли;
			
			Объект = ВыборкаЗначений.Ссылка.ПолучитьОбъект();
			СтарыйПриемник = Объект.Приемник;
			СтарыйИсточник = Объект.Источник;
			
			Объект.Приемник = СтарыйИсточник;
			Объект.Источник = СтарыйПриемник;
            Объект.Наименование = "";
            Объект.Записать();
			
		КонецЦикла;
				
		ВыборкаСвойств = Справочники.ПравилаКонвертацииСвойств.Выбрать(,Выборка.Ссылка);
		Пока ВыборкаСвойств.Следующий() цикл
			
			Объект = ВыборкаСвойств.Ссылка.ПолучитьОбъект();
			СтарыйПриемник = Объект.Приемник;
			СтарыйИсточник = Объект.Источник;
			
			Объект.Приемник = СтарыйИсточник;
			Объект.Источник = СтарыйПриемник;
            Объект.Наименование = "";
						
			Объект.Записать();
			
		КонецЦикла;
		
		
		//правила выгрузки
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПравилаВыгрузкиДанных.Ссылка
		               |ИЗ
		               |	Справочник.ПравилаВыгрузкиДанных КАК ПравилаВыгрузкиДанных
		               |ГДЕ
		               |	ПравилаВыгрузкиДанных.ПравилоКонвертации = &ПКО";
		Запрос.УстановитьПараметр("ПКО", Выборка.Ссылка);
		ВыборкаПравилаВыгрузки = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПравилаВыгрузки.Следующий() цикл
			
			Объект = ВыборкаПравилаВыгрузки.Ссылка.ПолучитьОбъект();
			Объект.ОбъектВыборки = Выборка.Приемник;
			Объект.Записать();
			
		КонецЦикла;
		
		//собственно объект
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		СтарыйПриемник = Объект.Приемник;
		СтарыйИсточник = Объект.Источник;
		
		Объект.Приемник = СтарыйИсточник;
		Объект.Источник = СтарыйПриемник;
		Объект.Наименование = "";
		Объект.Код = "";		
		
		Попытка
			Объект.Записать();
		Исключение
			Сообщить("Ошибка при инвертировании истоника и приемника у ПКО: " + Строка(Выборка.Ссылка), СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЦикла;
	
	Сообщить("Инвертирование правил завершено: " + ТекущаяДата());
	Сообщить(Символы.ПС);
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если Конвертация.Пустая() Тогда
		Предупреждение("Не выбрана конвертация для изменения.");
		Возврат;
	КонецЕсли;
	
	ОтветПользователя = Вопрос("Операция изменения правил необратима. Выполнить выбранные изменения?", 
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если УдалениеПравилДляДвиженийДокументов Тогда
		
		ВыполнитьУдалениеПравилДляДвижений();
		
	КонецЕсли;
	
	Если УдалениеПравилДляРегистровПодчиненныхРегистратору Тогда
		
		ВыполнитьУдалениеПравилДляРегистровПодчиненныхРегистратору();	
		
	КонецЕсли;
	
	Если ИнвертироватьПКО Тогда
		
		ВыполнитьИнвертированиеПравил();
		
	КонецЕсли;
	
КонецПроцедуры
