///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ 

Перем ТекущийРаздел; // Строка, имя текущего раздела

Перем ПоследниеВыбранныеПравила; // Массив, содержит 10 последних выбранных правил.

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Выполняет добавление последних выбранных правил конвертации к списку истории.
// При этом из списка удаляются самые старые правила. Максимальное количество конвертаций
// в истории - 10.
//
// Параметры:
//  Конвертация - Ссылка на справочник "Конвертации".
//
Процедура ОбработатьПоследниеВыбранныеПравила(Конвертация)
	
	Если НЕ ЗначениеЗаполнено(Конвертация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПоследниеВыбранныеПравила = Неопределено Тогда
		
		ПоследниеВыбранныеПравила = Новый Массив;
		
	КонецЕсли;
	
	Если ПоследниеВыбранныеПравила.Найти(Конвертация) = Неопределено Тогда
		
		ПоследниеВыбранныеПравила.Вставить(0, Конвертация);
		
	КонецЕсли;
	
	Пока ПоследниеВыбранныеПравила.ВГраница() > 9 Цикл 
		
		ПоследниеВыбранныеПравила.Удалить(ПоследниеВыбранныеПравила.ВГраница());
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьПоследниеВыбранныеПравила() 

// Выполняет проверку существования в информационной базе выбранных правил обмена.
//
Процедура ПроверитьАктуальностьВыбранныхПравил() 
	
	Если ТипЗнч(ПоследниеВыбранныеПравила) <> Тип("Массив") Тогда
		
		ПоследниеВыбранныеПравила = Новый Массив;
		
		Возврат;
		
	КонецЕсли;
		
	НеактуальныеЭлементы = Новый Массив;
	
	Инд = 0;
	
	Пока Инд <= ПоследниеВыбранныеПравила.ВГраница() Цикл
		
		Если ОбъектБазыДанныхСуществует(ПоследниеВыбранныеПравила[Инд]) Тогда
			
			Инд = Инд + 1;
			
			Продолжить;
			
		КонецЕсли;
		
		ПоследниеВыбранныеПравила.Удалить(Инд);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьАктуальностьВыбранныхПравил() 

// Получает значение пометки из таблицы значений "ТаблицаРеквизитов" для указанного справочника и реквизита.
//
// Параметры:
//  Справочник - Строка - имя справочника.
//  Реквизит - Строка - имя реквизита.
//
// Возвращаемое значение:
//  Значение пометки - Булево - текущее значение пометки.
//
Функция ПолучитьЗначениеПометки(Справочник, Реквизит)
	
	Отбор = Новый Структура("Справочник,Реквизит", Справочник, Реквизит);
	
	Строки = ТаблицаРеквизитов.НайтиСтроки(Отбор);
	
	Если Строки.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Строки[0].Пометка;
		
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеПометки()

// Выполняет установку пометки в таблице значений "ТаблицаРеквизитов" по данным дерева значений.
//
// Параметры:
//  Справочник - Строка - имя обрабатываемого справочника.
//  Реквизит - Строка - имя обрабатываемого реквизита.
//  Пометка - Булево - значение пометки.
// 
Процедура УстановитьЗначениеПометки(Справочник, Реквизит, Пометка)
	
	Отбор = Новый Структура("Справочник,Реквизит", Справочник, Реквизит);
	
	Строки = ТаблицаРеквизитов.НайтиСтроки(Отбор);
	
	Если Строки.Количество() > 0 Тогда
		
		Для каждого Строка Из Строки Цикл
			
			Строка.Пометка = Пометка;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеПометки() 

// Выполняет заполнение дерева значений "ДеревоРеквизитов" по данным макета "ДоступныеРеквизиты"
// и таблицы значений "ТаблицаРеквизитов".
//
Процедура ЗаполнитьНастройкуРеквизитов()
	
	ДеревоРеквизитов.Строки.Очистить();
	
	УзелАлгоритмы = ДеревоРеквизитов.Строки.Добавить();
	УзелАлгоритмы.Представление	= "Обработчики событий";
	УзелАлгоритмы.Картинка		= "Группа";
	
	УзелРеквизиты = ДеревоРеквизитов.Строки.Добавить();
	УзелРеквизиты.Представление	= "Реквизиты";
	УзелРеквизиты.Картинка		= "Группа";
	
	Макет = ЭтотОбъект.ПолучитьМакет("ДоступныеРеквизиты");
	
	Область = Макет.ПолучитьОбласть(ТекущийРаздел.Значение);
	
	Для Ном = 1 по Область.ВысотаТаблицы Цикл
		
		ИмяГруппы = Область.Область(Ном, 1).Текст; 
		
		Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Реквизит = Область.Область(Ном, 2).Текст;
		
		Если НЕ СравниватьПорядокВыполнения И Реквизит = "Порядок" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ИмяГруппы = "Алгоритмы" Тогда
			
			НоваяСтрока = УзелАлгоритмы.Строки.Добавить();
			НоваяСтрока.Картинка = "Алгоритм";
			
		Иначе
			
			НоваяСтрока = УзелРеквизиты.Строки.Добавить();
			НоваяСтрока.Картинка = "Реквизит";
			
		КонецЕсли;
		
		НоваяСтрока.Реквизит		= Реквизит;
		НоваяСтрока.Представление	= Область.Область(Ном, 3).Текст;
		НоваяСтрока.Пометка			= ПолучитьЗначениеПометки(ТекущийРаздел.Значение, НоваяСтрока.Реквизит);
		
		УстановитьПометкуРодителя(НоваяСтрока);
		
	КонецЦикла; 
	
	ЭлементыФормы.ДеревоРеквизитов.Развернуть(УзелАлгоритмы);
	ЭлементыФормы.ДеревоРеквизитов.Развернуть(УзелРеквизиты);
	
КонецПроцедуры // ЗаполнитьНастройкуРеквизитов()

// Выполняет проверку внесения существенных изменений в настройки сравнения.
// 
// Возвращаемое значение:
//  Булево - Истина - признак внесения существенных изменений, которые приведут
//           к необходимости очистки дерева сравнения.
//
Функция ИзмененыНастройки()
	
	Если ТекущиеПараметры.СравниватьОбщие <> СравниватьОбщие
		ИЛИ ТекущиеПараметры.СравниватьПравилаКонвертацииОбъектов <> СравниватьПравилаКонвертацииОбъектов
		ИЛИ ТекущиеПараметры.СравниватьПравилаКонвертацииСвойств <> СравниватьПравилаКонвертацииСвойств
		ИЛИ ТекущиеПараметры.СравниватьПравилаКонвертацииСвойствПоКоду <> СравниватьПравилаКонвертацииСвойствПоКоду
		ИЛИ ТекущиеПараметры.СравниватьПравилаКонвертацииЗначений <> СравниватьПравилаКонвертацииЗначений
		ИЛИ ТекущиеПараметры.СравниватьПравилаВыгрузкиДанных <> СравниватьПравилаВыгрузкиДанных
		ИЛИ ТекущиеПараметры.СравниватьПравилаОчисткиДанных <> СравниватьПравилаОчисткиДанных
		ИЛИ ТекущиеПараметры.СравниватьАлгоритмы <> СравниватьАлгоритмы
		ИЛИ ТекущиеПараметры.СравниватьЗапросы <> СравниватьЗапросы 
		ИЛИ ТекущиеПараметры.СравниватьПомеченныеНаУдаление <> СравниватьПомеченныеНаУдаление
		ИЛИ ТекущиеПараметры.СравниватьСсылкиПоПредставлению <> СравниватьСсылкиПоПредставлению Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаРеквизитов"	, ТаблицаРеквизитов);
	Запрос.УстановитьПараметр("РеквизитыСравнения"	, РеквизитыСравнения);
	Запрос.УстановитьПараметр("Конвертации"			, Конвертации);
	Запрос.УстановитьПараметр("ПравилаОбмена"		, ПравилаОбмена);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРеквизитов.Пометка,
	|	ТаблицаРеквизитов.Справочник,
	|	ТаблицаРеквизитов.Реквизит
	|ПОМЕСТИТЬ ВТ_ТаблицаРеквизитов
	|ИЗ
	|	&ТаблицаРеквизитов КАК ТаблицаРеквизитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыСравнения.Пометка,
	|	РеквизитыСравнения.Справочник,
	|	РеквизитыСравнения.Реквизит
	|ПОМЕСТИТЬ ВТ_РеквизитыСравнения
	|ИЗ
	|	&РеквизитыСравнения КАК РеквизитыСравнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРеквизитов.Справочник,
	|	ТаблицаРеквизитов.Реквизит
	|ИЗ
	|	ВТ_ТаблицаРеквизитов КАК ТаблицаРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеквизитыСравнения КАК РеквизитыСравнения
	|		ПО ТаблицаРеквизитов.Справочник = РеквизитыСравнения.Справочник
	|			И ТаблицаРеквизитов.Реквизит = РеквизитыСравнения.Реквизит
	|ГДЕ
	|	ТаблицаРеквизитов.Пометка <> РеквизитыСравнения.Пометка";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаОбмена.Конвертация,
	|	1 КАК Разница
	|ПОМЕСТИТЬ ВТ_ПравилаОбмена
	|ИЗ
	|	&ПравилаОбмена КАК ПравилаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Конвертации.Конвертация,
	|	-1 КАК Разница
	|ПОМЕСТИТЬ ВТ_Конвертации
	|ИЗ
	|	&Конвертации КАК Конвертации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Конвертация,
	|	СУММА(Данные.Разница) КАК Разница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПравилаОбмена.Конвертация КАК Конвертация,
	|		ПравилаОбмена.Разница КАК Разница
	|	ИЗ
	|		ВТ_ПравилаОбмена КАК ПравилаОбмена
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Конвертации.Конвертация,
	|		Конвертации.Разница
	|	ИЗ
	|		ВТ_Конвертации КАК Конвертации) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Конвертация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Данные.Разница) <> 0";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ИзмененыНастройки()

// Выполняет заполнение доступных разделов настроек.
//  
Процедура ЗаполнитьРазделыНастройки() 
	
	РазделыНастройки.Очистить(); 		
	
	РазделыНастройки.Добавить("Общие", "Общие настройки"); 	
	
	Если СравниватьОбщие Тогда
		
		РазделыНастройки.Добавить("Конвертации", "Правила обмена");
		
	КонецЕсли;
	
	Если СравниватьПравилаКонвертацииОбъектов Тогда
		
		РазделыНастройки.Добавить("ПравилаКонвертацииОбъектов", "Правила конвертации объектов");
		
	КонецЕсли;		
	
	Если СравниватьПравилаКонвертацииСвойств Тогда
		
		РазделыНастройки.Добавить("ПравилаКонвертацииСвойств", "Правила конвертации свойств");
		
	КонецЕсли;
	
	Если СравниватьПравилаВыгрузкиДанных Тогда
		
		РазделыНастройки.Добавить("ПравилаВыгрузкиДанных", "Правила выгрузки данных");
		
	КонецЕсли;	
	
	Если СравниватьПравилаОчисткиДанных Тогда
		
		РазделыНастройки.Добавить("ПравилаОчисткиДанных", "Правила очистки данных");     
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьРазделыНастройки() 

// Функция считывает путь установки KDiff из реестра и если не находит информации
// проверяет путь установки по умолчанию.
//
// Возвращаемое значение:
//  ИсполняемыйФайлKDiff3 - Строка - путь к исполняемому файлу KDiff3.
//
Функция ПолучитьПредполагаемыйПутьУстановкиKDiff3()
	
	ПапкаПрограммы = "";
	
	СистИнформация = Новый СистемнаяИнформация;
	ВерсияОС = СистИнформация.ВерсияОС;
	
	МожноИспользоватьКомандуРеестра = (Найти(ВерсияОС, "Windows 95") = 0) И (Найти(ВерсияОС, "Windows 98") = 0);
	
	Если МожноИспользоватьКомандуРеестра Тогда
		
		ВремПапка = КаталогВременныхФайлов();
		
		КомандаСистемы("reg query HKCU\Software\KDiff3 /s > FindKDiff3.txt", ВремПапка);
		
		ТекстДокумент = Новый ТекстовыйДокумент;
		ТекстДокумент.Прочитать(ВремПапка + "FindKDiff3.txt");
		
		ПредСтрока = "";
		ПапкаПрограммы = "";
		
		Для НомерСтроки = 0 По ТекстДокумент.КоличествоСтрок() Цикл
			
			ТекущаяСтрока = ТекстДокумент.ПолучитьСтроку(НомерСтроки);
			
			Если Найти(ПредСтрока, "InstalledForAllUsers") > 0 Тогда
				
				Поз = Найти(ТекущаяСтрока, "REG_SZ");
				
				Если Поз > 0 Тогда
					
					ПапкаПрограммы = СокрЛП(Сред(ТекущаяСтрока, Поз + 6));
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПредСтрока = ТекущаяСтрока;
			
		КонецЦикла;
		
		УдалитьФайлы(ВремПапка + "\FindKDiff3.txt");
		
	КонецЕсли;   	
		
	Если ЗначениеЗаполнено(ПапкаПрограммы) Тогда
		
		Возврат ПапкаПрограммы + "\KDiff3.exe";
		
	Иначе
		                     		
		ПредполагаемыеПути = Новый Массив;
		ПредполагаемыеПути.Добавить("%PROGRAMFILES%\KDiff3\KDiff3.exe");
		ПредполагаемыеПути.Добавить("%PROGRAMFILES(x86)%\KDiff3\KDiff3.exe");
		
		Для каждого ПредполагаемыйПуть Из ПредполагаемыеПути Цикл
			
			ИсполняемыйФайл = Новый Файл(ПредполагаемыйПуть);
			
			Если ИсполняемыйФайл.Существует() Тогда
				
				Возврат ИсполняемыйФайл;			
				
			КонецЕсли; 			
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат "";	
	
КонецФункции // ПолучитьПредполагаемыйПутьУстановкиKDiff3()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ФЛАЖКАМИ 

// Выполняет рекурсивную установку флажков в подчиненных строках переданной строки 
// дерева значений.
//
// Параметры:
//  СтрокаДерева - Строка дерева значений - строка дерева значений, в
//                 подчиненных строках которой необходимо установить флажок.
//  Значение - Число - значение пометки.
//
Процедура УстановитьФлажки(СтрокаДерева, Значение)

	Для каждого Стр Из СтрокаДерева.Строки Цикл
		
		Стр.Пометка = Значение;
		
		УстановитьЗначениеПометки(ТекущийРаздел.Значение, Стр.Реквизит, Значение);
		
		УстановитьФлажки(Стр, Стр.Пометка);
		
	КонецЦикла;

КонецПроцедуры // УстановитьФлажки()

// Выполняет проверку подчиненных строк на соответствие пометки пометке
// переданной строки дерева значений.
// 
// Параметры:
//  СтрокаДерева - Строка дерева значений - строка дерева значений,
//                 в подчиненных строках которой должна быть выполнена
//                 проверка.
//
Функция УстановленоДляВсех(СтрокаДерева)
	
	Для каждого Стр Из СтрокаДерева.Родитель.Строки Цикл
		
		Если Стр.Пометка <> СтрокаДерева.Пометка Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // УстановленоДляВсех()

// Выполняет установку пометки в родительской строке дерева значений.
//
// Параметры:
//  СтрокаДерева - Строка дерева значений - строка дерева значений,
//                 в родительской строке которой должно быть изменено
//                 значение пометки.
//
Процедура УстановитьПометкуРодителя(СтрокаДерева)
	
	Пока СтрокаДерева.Родитель <> Неопределено Цикл
		
		СтрокаДерева.Родитель.Пометка = ?(УстановленоДляВсех(СтрокаДерева), СтрокаДерева.Пометка, 2);
		СтрокаДерева = СтрокаДерева.Родитель;
		
	КонецЦикла;  
	
КонецПроцедуры // УстановитьПометкуРодителя()

// Выполняет установку флажков в подчиненных строках дерева значений.
//
// Параметры:
//  СтрокаДерева - Строка дерева значений - строка дерева значений,
//                 подчиненные строки которой должны быть обработаны.
//  Пометка - Число - значение пометки.
//
Процедура ИзменитьПометкиПодчиненных(СтрокаДерева, Пометка)
	
	СтрокаДерева.Пометка = Пометка;
	
	Для каждого ПодчиненнаяСтрока ИЗ СтрокаДерева.Строки Цикл
		
		ИзменитьПометкиПодчиненных(ПодчиненнаяСтрока, Пометка);
		
	КонецЦикла;
	
КонецПроцедуры // ИзменитьПометкиПодчиненных() 

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ 

// Выполняет управление видимостью и доступностью элементов формы в зависимости
// от произведенных настроек.
//
Процедура УстановитьВидимость()
	
	Если ТекущаяНастройка = "ОбщиеНастройки" Тогда
		
		ЭлементыФормы.ГиперссылкаВариантыНастройки.Заголовок = НСтр("ru = 'Перейти к настройке правил обмена'");
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Настройки;
		
		ЭлементыФормы.ЗаголовокРаздела.Заголовок = ТекущийРаздел.Представление;
		
		Если ТекущийРаздел.Значение = "Общие" Тогда
			
			ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.ОбщиеНастройки;
			
		Иначе
			
			ЗаполнитьНастройкуРеквизитов();
			
			ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.НастройкаРеквизитов;
			
		КонецЕсли;
		
		// Доступность реквизитов
		
		ВыполняетсяСравнениеПКС = СравниватьПравилаКонвертацииОбъектов И СравниватьПравилаКонвертацииСвойств;
		
		ЭлементыФормы.НадписьВариантСопоставления.Видимость				= ВыполняетсяСравнениеПКС;
		ЭлементыФормы.СопоставлятьПоКоду.Видимость						= ВыполняетсяСравнениеПКС;
		ЭлементыФормы.СопоставлятьПоНаименованию.Видимость				= ВыполняетсяСравнениеПКС;
		ЭлементыФормы.СравниватьПравилаКонвертацииСвойств.Доступность	= СравниватьПравилаКонвертацииОбъектов;
		ЭлементыФормы.СравниватьПравилаКонвертацииЗначений.Доступность	= СравниватьПравилаКонвертацииОбъектов; 
		ЭлементыФормы.НадписьИсполняемыйФайлKDiff3.Видимость			= ИспользоватьKDiff3ДляОбъединенияМодулей;
		ЭлементыФормы.ИсполняемыйФайлKDiff3.Видимость					= ИспользоватьKDiff3ДляОбъединенияМодулей;
		
	Иначе
		
		ЭлементыФормы.ГиперссылкаВариантыНастройки.Заголовок = НСтр("ru = 'Перейти к общим настройкам'");
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ПравилаОбмена;
		
	КонецЕсли;
		
КонецПроцедуры // УстановитьВидимость() 

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ РЕКВИЗИТОВ ФОРМЫ 

Процедура РазделыНастройкиПриАктивизацииСтроки(Элемент)
	
	ТекущийРаздел = Элемент.ТекущаяСтрока;
	
	УстановитьВидимость();
	
КонецПроцедуры // РазделыНастройкиПриАктивизацииСтроки()

Процедура СравниватьОбщиеПриИзменении(Элемент)
	
	ЗаполнитьРазделыНастройки();
	УстановитьВидимость();
	
КонецПроцедуры // СравниватьОбщиеПриИзменении()

Процедура СравниватьПравилаКонвертацииОбъектовПриИзменении(Элемент)
	
	ЗаполнитьРазделыНастройки();
	УстановитьВидимость();
	
КонецПроцедуры // СравниватьПравилаКонвертацииОбъектовПриИзменении()

Процедура СравниватьПравилаКонвертацииСвойствПриИзменении(Элемент)
	
	ЗаполнитьРазделыНастройки();
	УстановитьВидимость();
	
КонецПроцедуры // СравниватьПравилаКонвертацииСвойствПриИзменении()

Процедура СравниватьПравилаВыгрузкиДанныхПриИзменении(Элемент)
	
	ЗаполнитьРазделыНастройки();
	УстановитьВидимость();
	
КонецПроцедуры // СравниватьПравилаВыгрузкиДанныхПриИзменении()

Процедура СравниватьПравилаОчисткиДанныхПриИзменении(Элемент)
	
	ЗаполнитьРазделыНастройки();
	УстановитьВидимость();
	
КонецПроцедуры // СравниватьПравилаОчисткиДанныхПриИзменении()

Процедура СравниватьПорядокВыполненияПриИзменении(Элемент)
	
	Если НЕ СравниватьПорядокВыполнения Тогда
		
		СтруктураОтбор = Новый Структура("Реквизит", "Порядок");
		
		СтрокиТаблицы = ТаблицаРеквизитов.НайтиСтроки(СтруктураОтбор);
		
		Для каждого ТаблицаСтрока Из СтрокиТаблицы Цикл
			
			ТаблицаРеквизитов.Удалить(ТаблицаСтрока);
			
		КонецЦикла;
		
	Иначе
		
		МассивСправочники = Новый Массив;
		
		МассивСправочники.Добавить("ПравилаКонвертацииОбъектов");
		МассивСправочники.Добавить("ПравилаКонвертацииСвойств");
		МассивСправочники.Добавить("ПравилаВыгрузкиДанных");
		МассивСправочники.Добавить("ПравилаОчисткиДанных");
		
		Для каждого Справочник Из МассивСправочники Цикл
			
			НоваяСтрока = ТаблицаРеквизитов.Добавить();
			
			НоваяСтрока.Справочник	= Справочник;
			НоваяСтрока.Реквизит	= "Порядок";
			НоваяСтрока.Пометка		= Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СравниватьПорядокВыполненияПриИзменении()

Процедура ИспользоватьKDiff3ДляОбъединенияМодулейПриИзменении(Элемент)
	
	Если ИспользоватьKDiff3ДляОбъединенияМодулей И НЕ ЗначениеЗаполнено(ИсполняемыйФайлKDiff3) Тогда
		
		ИсполняемыйФайлKDiff3 = ПолучитьПредполагаемыйПутьУстановкиKDiff3();
		
	КонецЕсли;	
	
	УстановитьВидимость();
	
КонецПроцедуры // ИспользоватьKDiff3ДляОбъединенияМодулейПриИзменении()

Процедура ГиперссылкаKDiff3Нажатие(Элемент)
	
	ЗапуститьПриложение("http://kdiff3.sourceforge.net/");
	
КонецПроцедуры // ГиперссылкаKDiff3Нажатие()

Процедура ИсполняемыйФайлKDiff3НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок						= НСтр("ru = 'Выберите исполняемый файл KDiff3'");
	ДиалогВыбораФайла.ПредварительныйПросмотр		= Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла				= Элемент.Значение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Ложь;
	ДиалогВыбораФайла.Расширение					= "exe";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Элемент.Значение = ДиалогВыбораФайла.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры // ИсполняемыйФайлKDiff3НачалоВыбора()  

Процедура ГиперссылкаВариантыНастройкиНажатие(Элемент)
	
	Если ТекущаяНастройка = "ОбщиеНастройки" Тогда	
		ТекущаяНастройка = "ПравилаОбмена";
	Иначе
		ТекущаяНастройка = "ОбщиеНастройки";
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ГиперссылкаВариантыНастройкиНажатие()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ТАБЛИЧНОГО ПОЛЯ ДеревоРеквизитов

Процедура ДеревоРеквизитовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого СтрокаДерева Из ОформленияСтрок Цикл
		
		СтрокаДерева.Ячейки.Представление.УстановитьФлажок(СтрокаДерева.ДанныеСтроки.Пометка);
		СтрокаДерева.Ячейки.Представление.УстановитьКартинку(ЭлементыФормы[СтрокаДерева.ДанныеСтроки.Картинка].Картинка);
		
	КонецЦикла;	
		
КонецПроцедуры // ДеревоРеквизитовПриПолученииДанных()

Процедура ДеревоРеквизитовПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = ЭлементыФормы.ДеревоРеквизитов.ТекущиеДанные;
	
	ТекущиеДанные.Пометка = ?(ТекущиеДанные.Пометка = 1, 0, 1);
	
	УстановитьЗначениеПометки(ТекущийРаздел.Значение, ТекущиеДанные.Реквизит, ТекущиеДанные.Пометка);
	
	УстановитьФлажки(ТекущиеДанные, ТекущиеДанные.Пометка);
	
	УстановитьПометкуРодителя(ТекущиеДанные); 
	
КонецПроцедуры // ДеревоРеквизитовПриИзмененииФлажка()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ПравилаОбмена 

Процедура ПравилаОбменаКонвертацияПриИзменении(Элемент) 	
	
	ОбработатьПоследниеВыбранныеПравила(Элемент.Значение);
	
КонецПроцедуры // ПравилаОбменаКонвертацияПриИзменении()

Процедура ПравилаОбменаКонвертацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если ПоследниеВыбранныеПравила = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПоследниеВыбранныеПравила);
	
КонецПроцедуры // ПравилаОбменаКонвертацияНачалоВыбораИзСписка()

Процедура ПравилаОбменаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Конвертации") Тогда
		
		Если ВыбранноеЗначение.ЭтоГруппа Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Ссылка", ВыбранноеЗначение);
			Запрос.УстановитьПараметр("ВыбранныеКонвертации", ПравилаОбмена.ВыгрузитьКолонку("Конвертация"));
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Конвертации.Ссылка
			|ИЗ
			|	Справочник.Конвертации КАК Конвертации
			|ГДЕ
			|	Конвертации.Ссылка В ИЕРАРХИИ(&Ссылка)
			|	И НЕ Конвертации.ЭтоГруппа
			|	И НЕ Конвертации.Ссылка В (&ВыбранныеКонвертации)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Конвертации.Наименование";
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НоваяСтрока = ПравилаОбмена.Добавить();
				НоваяСтрока.Конвертация = ВыборкаДетальныеЗаписи.Ссылка;
				
				ОбработатьПоследниеВыбранныеПравила(ВыбранноеЗначение); 
				
			КонецЦикла;
			
		Иначе
			
			Если ПравилаОбмена.Найти(ВыбранноеЗначение, "Конвертация") = Неопределено Тогда
				
				НоваяСтрока = ПравилаОбмена.Добавить();
				НоваяСтрока.Конвертация = ВыбранноеЗначение;
				
				ОбработатьПоследниеВыбранныеПравила(ВыбранноеЗначение); 
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли; 
	
КонецПроцедуры // ПравилаОбменаОбработкаВыбора()

Процедура ПравилаОбменаПередУдалением(Элемент, Отказ)
	
	Если ПравилаОбмена.Количество() <= 2 Или Элемент.ТекущиеДанные.Пометка Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПравилаОбменаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Пометка Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПравилаОбменаПередНачаломИзменения(Элемент, Отказ)
	
	Если ЭлементыФормы.ПравилаОбмена.ТекущиеДанные.Пометка ТОгда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ 

Процедура КоманднаяПанельПравилаОбменаПодбор(Кнопка)
	
	ФормаВыбора = Справочники.Конвертации.ПолучитьФормуВыбора(, ЭлементыФормы.ПравилаОбмена);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть(); 	
	
КонецПроцедуры // КоманднаяПанельПравилаОбменаПодбор()   

Процедура УстановитьВсеФлажкиНажатие(Элемент)
	
	СравниватьОбщие							= Истина;
	СравниватьПравилаКонвертацииОбъектов	= Истина;
	СравниватьПравилаКонвертацииСвойств		= Истина;
	СравниватьПравилаКонвертацииЗначений	= Истина;
	СравниватьПравилаВыгрузкиДанных			= Истина;
	СравниватьПравилаОчисткиДанных			= Истина;
	СравниватьАлгоритмы						= Истина;
	СравниватьЗапросы						= Истина;
	
	ЗаполнитьРазделыНастройки();
	
	УстановитьВидимость(); 	
	
КонецПроцедуры // УстановитьВсеФлажкиНажатие()

Процедура СнятьВсеФлажкиНажатие(Элемент)
	
	СравниватьОбщие							= Ложь;
	СравниватьПравилаКонвертацииОбъектов	= Ложь;
	СравниватьПравилаКонвертацииСвойств		= Ложь;
	СравниватьПравилаКонвертацииЗначений	= Ложь;
	СравниватьПравилаВыгрузкиДанных			= Ложь;
	СравниватьПравилаОчисткиДанных			= Ложь;
	СравниватьАлгоритмы						= Ложь;
	СравниватьЗапросы						= Ложь;
	
	ЗаполнитьРазделыНастройки();

	УстановитьВидимость();
	
КонецПроцедуры // СнятьВсеФлажкиНажатие()

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если ИспользоватьKDiff3ДляОбъединенияМодулей Тогда
		
		Если ЗначениеЗаполнено(ИсполняемыйФайлKDiff3) Тогда
			
			Файл = Новый Файл(ИсполняемыйФайлKDiff3);
			
			Если НЕ Файл.Существует() Тогда
				
				Предупреждение(НСтр("ru = 'Не обнаружен исполняемый файл KDiff3!'"));
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Предупреждение(НСтр("ru = 'Не указан исполняемый файл KDiff3!'"));
			Возврат;
				
		КонецЕсли;
		
	КонецЕсли;	
	
	ВнесеныИзменения = ИзмененыНастройки();   
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("СравниватьОбщие"							, СравниватьОбщие);
	ПараметрыНастройки.Вставить("СравниватьПравилаКонвертацииОбъектов"		, СравниватьПравилаКонвертацииОбъектов);
	ПараметрыНастройки.Вставить("СравниватьПравилаКонвертацииСвойств"		, СравниватьПравилаКонвертацииСвойств);
	ПараметрыНастройки.Вставить("СравниватьПравилаКонвертацииСвойствПоКоду"	, СравниватьПравилаКонвертацииСвойствПоКоду);
	ПараметрыНастройки.Вставить("СравниватьПравилаКонвертацииЗначений"		, СравниватьПравилаКонвертацииЗначений);
	ПараметрыНастройки.Вставить("СравниватьПравилаВыгрузкиДанных"			, СравниватьПравилаВыгрузкиДанных);
	ПараметрыНастройки.Вставить("СравниватьПравилаОчисткиДанных"			, СравниватьПравилаОчисткиДанных);
	ПараметрыНастройки.Вставить("СравниватьАлгоритмы"						, СравниватьАлгоритмы);
	ПараметрыНастройки.Вставить("СравниватьЗапросы"							, СравниватьЗапросы);
	ПараметрыНастройки.Вставить("СравниватьПомеченныеНаУдаление"			, СравниватьПомеченныеНаУдаление);
	ПараметрыНастройки.Вставить("СравниватьСсылкиПоПредставлению"			, СравниватьСсылкиПоПредставлению);	
	ПараметрыНастройки.Вставить("СравниватьПорядокВыполнения"				, СравниватьПорядокВыполнения);
	ПараметрыНастройки.Вставить("ОпределятьТипКартинкиПоИсточнику"			, ОпределятьТипКартинкиПоИсточнику);
	ПараметрыНастройки.Вставить("ТребоватьПодтвержденияПередОбъединением"	, ТребоватьПодтвержденияПередОбъединением);
	ПараметрыНастройки.Вставить("ИспользоватьKDiff3ДляОбъединенияМодулей"	, ИспользоватьKDiff3ДляОбъединенияМодулей);  
	ПараметрыНастройки.Вставить("ИсполняемыйФайлKDiff3"						, ИсполняемыйФайлKDiff3);   
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма.ВладелецФормы, ПараметрыНастройки);	
	
	РеквизитыСравнения.Загрузить(ТаблицаРеквизитов);
	Конвертации.Загрузить(ПравилаОбмена);
	
	Если ВнесеныИзменения Тогда	
		
		Оповестить("ОбновитьПравилаОбмена");
		
	Иначе
		
		Оповестить("УстановитьВидимость");
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры // ОсновныеДействияФормыОК()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ 

Процедура ПриОткрытии()
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ТекущиеПараметры);
	
	ЗаполнитьРазделыНастройки();
	
	ТекущийРаздел = РазделыНастройки[0];
	
	ЭлементыФормы.РазделыНастройки.ТекущаяСтрока = ТекущийРаздел;
	
	ТаблицаРеквизитов.Индексы.Добавить("Справочник,Реквизит");
	
	ПоследниеВыбранныеПравила = ВосстановитьЗначение("СравнениеИОбъединениеПравилОбмена.ПоследниеВыбранныеПравила");
	
	ПроверитьАктуальностьВыбранныхПравил();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриОткрытии() 

Процедура ПриЗакрытии()
	
	СохранитьЗначение("СравнениеИОбъединениеПравилОбмена.ПоследниеВыбранныеПравила", ПоследниеВыбранныеПравила);
	
КонецПроцедуры // ПриЗакрытии()

