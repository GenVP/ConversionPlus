////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОбработкаСохраненияРегистрации;
Перем мОбработкаЗагрузкиРегистрации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОткрыватьПриВходе = УправлениеПользователями.ПолучитьБулевоЗначениеПоУмолчанию(глТекущийПользователь, "ОткрыватьПравилаРегистрации", Ложь);
	
	УстановитьРегистрациюПриВходе();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// запрещаем автоудаление колонок с обработчиками
	ПравилаРегистрацииОбъектов.Колонки.Добавить("АлгоритмПередОбработкойПравила", Ложь);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	УправлениеПользователями.УстановитьБулевоЗначениеПоУмолчанию(глТекущийПользователь, "ОткрыватьПравилаРегистрации", ОткрыватьПриВходе);
	
	СохранитьЗначение("ПравилаРегистрации.ПоследняяРегистрация", Регистрация);
	СохранитьЗначение("ПравилаРегистрации.ПРО.ТекущаяСтрока", ЭлементыФормы.ПравилаРегистрацииОбъектов.ТекущаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПравилаРегистрацииОбъектов

Процедура ПравилаРегистрацииОбъектовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеСтроки.ЭтоГруппа Тогда
		
		Если Не ДанныеСтроки.Ссылка.ПометкаУдаления И Не ДанныеСтроки.Ссылка.Отключить И Не ДанныеСтроки.Ссылка.Валидное Тогда
			
			// невалидные строки выделяем цветом
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
			
		ИначеЕсли ДанныеСтроки.Ссылка.Отключить Тогда
			
			// отключенные правила выделяем цветом
			ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
			
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.ОбъектНастройки.УстановитьТекст(ДанныеСтроки.ОбъектНастройки.Синоним);
		
		// вывод катринки СинтаксическийКонтроль при наличии обработчиков у правила
		Если Не ПустаяСтрока(ДанныеСтроки.АлгоритмПередОбработкойПравила) Тогда
			
			ОформлениеСтроки.Ячейки.ОбъектНастройки.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
			ОформлениеСтроки.Ячейки.ОбъектНастройки.ОтображатьКартинку = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНДНЫХ ПАНЕЛЕЙ

Процедура КоманднаяПанельФормыСохранитьРегистрацию(Кнопка)
	
	Если мОбработкаСохраненияРегистрации = Неопределено Тогда
		мОбработкаСохраненияРегистрации = Обработки.ВыгрузкаРегистрации.Создать();
	КонецЕсли;
	
	мОбработкаСохраненияРегистрации.РегистрацияДляВыгрузки = Регистрация;
	
	ФормаОбработки = мОбработкаСохраненияРегистрации.ПолучитьФорму();
	
	Если ФормаОбработки.Открыта() Тогда
		ФормаОбработки.Активизировать();
	Иначе
		ФормаОбработки.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыЗагрузитьРегистрацию(Кнопка)
	
	Если мОбработкаЗагрузкиРегистрации = Неопределено Тогда
		мОбработкаЗагрузкиРегистрации = Обработки.ЗагрузкаРегистрации.Создать();
	КонецЕсли;
	
	мОбработкаЗагрузкиРегистрации.Регистрация               = Регистрация;
	мОбработкаЗагрузкиРегистрации.Конфигурация              = Регистрация.Конфигурация;
	мОбработкаЗагрузкиРегистрации.РежимЗагрузкиРегистрации  = "Обновить";
	мОбработкаЗагрузкиРегистрации.РежимЗагрузкиКонфигурации = "Обновить";
	мОбработкаЗагрузкиРегистрации.ИмяФайлаПравил            = РаботаСФайлами.ПолучитьИмяФайла(Регистрация, глТекущийПользователь);
	
	ФормаОбработки = мОбработкаЗагрузкиРегистрации.ПолучитьФорму();
	
	Если ФормаОбработки.Открыта() Тогда
		ФормаОбработки.Активизировать();
	Иначе
		ФормаОбработки.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПРОВключитьПравилоРекурсивно(Кнопка)
	
	// включить правило рекурсивно
	Если ЭлементыФормы.ПравилаРегистрацииОбъектов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРекурсивноеОтключениеВключениеДляПравила(ЭлементыФормы.ПравилаРегистрацииОбъектов.ТекущиеДанные.Ссылка, "ПравилаРегистрацииОбъектов", Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельПРООтключитьПравилоРекурсивно(Кнопка)
	
	// отключить правило рекурсивно
	Если ЭлементыФормы.ПравилаРегистрацииОбъектов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРекурсивноеОтключениеВключениеДляПравила(ЭлементыФормы.ПравилаРегистрацииОбъектов.ТекущиеДанные.Ссылка, "ПравилаРегистрацииОбъектов", Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельПРОПомощь(Кнопка)
	
	ПоказатьИнформациюОБыстромОсвоении("СозданиеПравилРегистрацииОбъектов");
	
КонецПроцедуры

Процедура КоманднаяПанельПРООтчет(Кнопка)
	
	Форма = Отчеты["ОтчетПоПравиламРегистрацииОбъектов"].ПолучитьФорму(, ЭтаФорма, Регистрация);
	Форма.Регистрация = Регистрация;
	Форма.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьРегистрациюПриВходе()
	
	Если НЕ Регистрация.Пустая() Тогда
		Возврат;
	КонецЕсли;
		
	Если КлючУникальности = Неопределено
		ИЛИ КлючУникальности = 2 Тогда
			
		СохраненноеЗначениеРегистрации = ВосстановитьЗначение("ПравилаРегистрации.ПоследняяРегистрация");
			
		Если ЗначениеЗаполнено(СохраненноеЗначениеРегистрации) Тогда
			
			Попытка
				ОбъектСохраненнойРегистрации = СохраненноеЗначениеРегистрации.ПолучитьОбъект();
			Исключение
				ОбъектСохраненнойРегистрации = Неопределено;
				СохраненноеЗначениеРегистрации = Неопределено;
			КонецПопытки;
			
		Иначе
			ОбъектСохраненнойРегистрации = Неопределено;			
			СохраненноеЗначениеРегистрации = Неопределено;
		КонецЕсли;
			
		Если ОбъектСохраненнойРегистрации = Неопределено Тогда
			
			ЗапросДляВыбораРегистрации = Новый Запрос();
			ЗапросДляВыбораРегистрации.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			                                   |	Регистрации.Ссылка КАК Ссылка
			                                   |ИЗ
			                                   |	Справочник.Регистрации КАК Регистрации
			                                   |ГДЕ
			                                   |	НЕ Регистрации.ЭтоГруппа";
									
			ВыборкаРегистраций = ЗапросДляВыбораРегистрации.Выполнить().Выбрать();
				
			Если ВыборкаРегистраций.Следующий() Тогда
					
				СохраненноеЗначениеРегистрации = ВыборкаРегистраций.Ссылка;
					
			КонецЕсли;
				
		КонецЕсли;
		
		Регистрация = СохраненноеЗначениеРегистрации;
				
		Если КлючУникальности <> 2 Тогда
			КлючУникальности = Регистрация;
		КонецЕсли;
			
	Иначе
			
		Если ТипЗнч(КлючУникальности) = Тип("СправочникСсылка.Регистрации") Тогда
			Регистрация = КлючУникальности;
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ Регистрация.Пустая() Тогда
		
		Попытка
			ЭлементыФормы.ПравилаРегистрацииОбъектов.ТекущаяСтрока = ВосстановитьЗначение("ПравилаРегистрации.ПРО.ТекущаяСтрока");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет отключение или включение правил в иерархии заданной группы
//
// Параметры:
//  Нет.
// 
Процедура ВыполнитьРекурсивноеОтключениеВключениеДляПравила(СсылкаНаПравило, ИмяТаблицыДляОбработки, ФлагУстановки)
	
	Если Не ЗначениеЗаполнено(СсылкаНаПравило) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНаПравило.ЭтоГруппа Тогда
	
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Различные
		               |	Правила.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник." + ИмяТаблицыДляОбработки + " КАК Правила
					   |ГДЕ
					   |	Правила.Ссылка В Иерархии (&СсылкаНаПравило)
					   |	И Правила.Отключить <> &ФлагУстановки";
					   
		Запрос.УстановитьПараметр("СсылкаНаПравило", СсылкаНаПравило);
		Запрос.УстановитьПараметр("ФлагУстановки", ФлагУстановки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Отключить = ФлагУстановки;
			Объект.Записать();
			
		КонецЦикла;
		
	Иначе
		
		Объект = СсылкаНаПравило.ПолучитьОбъект();
		Объект.Отключить = ФлагУстановки;
		Объект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОбработкаСохраненияРегистрации = Неопределено;
мОбработкаЗагрузкиРегистрации   = Неопределено;
