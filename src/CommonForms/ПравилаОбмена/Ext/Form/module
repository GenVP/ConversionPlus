
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ (АБРЕВИАТУРЫ)

//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств
//  ПКЗ  - правило конвертации значений
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//Вспомогательные переменные (таблицы значений),
//используемые для хранения истории переходов
Перем мТабИсторияПереходовПКС;
Перем мТабИсторияПереходовПВД;

Перем мТекстАлгоритма;

Перем мТекущийСпособРедактированияСписка;

Перем мЖирныйШрифт;

Перем мЗапросВыбораПКС;
Перем мЗапросВыбораПКЗ;

Перем мФормаПравила;

Перем мЗапросПоискаПКСПоВладельцуИРодителю;

Перем мТаблицаТекущегоПоиска;

Перем мОбработкаСохраненияПравил;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура УстановитьКонвертациюПриВходе()
	
	Если НЕ Конвертация.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если КлючУникальности = Неопределено
		ИЛИ КлючУникальности = 1 Тогда
		
		СохраненноеЗначениеКонвертации = ВосстановитьЗначение("ПравилаОбмена.ПоследняяКонвертация");
		
		Если ЗначениеЗаполнено(СохраненноеЗначениеКонвертации) Тогда
			
			Попытка
				ОбъектСохраненнойКонвертации = СохраненноеЗначениеКонвертации.ПолучитьОбъект();
			Исключение
				ОбъектСохраненнойКонвертации = Неопределено;
				СохраненноеЗначениеКонвертации = Неопределено;
			КонецПопытки;
			
		Иначе
			ОбъектСохраненнойКонвертации = Неопределено;			
			СохраненноеЗначениеКонвертации = Неопределено;
		КонецЕсли;
		
		Если ОбъектСохраненнойКонвертации = Неопределено Тогда
			
			ЗапросДляВыбораКонвертации = Новый Запрос();
			ЗапросДляВыбораКонвертации.Текст = "ВЫБРАТЬ Первые 1
			|	Конвертации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Конвертации КАК Конвертации
			|ГДЕ
			|	Конвертации.ЭтоГруппа = Ложь";
			
			ВыборкаКонвертаций = ЗапросДляВыбораКонвертации.Выполнить().Выбрать();	
			
			Если ВыборкаКонвертаций.Следующий() Тогда
				
				СохраненноеЗначениеКонвертации = ВыборкаКонвертаций.Ссылка;
				
			КонецЕсли;				
			
		КонецЕсли;
		
		Конвертация = СохраненноеЗначениеКонвертации;
		
		Если КлючУникальности <> 1 Тогда
			КлючУникальности = Конвертация;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(КлючУникальности) = Тип("СправочникСсылка.Конвертации") Тогда
			Конвертация = КлючУникальности;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Конвертация.Пустая() Тогда
		
		Попытка
			ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = ВосстановитьЗначение("ПравилаОбмена.ПКО.ТекущаяСтрока");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОткрыватьПриВходе = УправлениеПользователями.ПолучитьБулевоЗначениеПоУмолчанию(глТекущийПользователь, "ОткрыватьПравилаОбмена", Ложь);
	
	УстановитьКонвертациюПриВходе();
	
	Заголовок = Конвертация.Наименование;
	
	КонфигурацияИсточник = Конвертация.Источник;
	КонфигурацияПриемник = Конвертация.Приемник;
	
	ПравилаВыгрузкиДанных.Порядок.Установить("Порядок");
	ПравилаОчисткиДанных.Порядок.Установить("Порядок");
	
	ПравилаКонвертацииОбъектов.Порядок.Установить("Порядок");
	ПравилаКонвертацииСвойств.Порядок.Установить("Порядок");
	ПравилаКонвертацииЗначений.Порядок.Установить("Порядок");
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ВосстановленноеЗначениеИсторияПереходовПКС = ВосстановитьЗначение("ИсторияПереходовПКС" + СокрЛП(Конвертация.Код));
	Если ВосстановленноеЗначениеИсторияПереходовПКС = Неопределено Тогда
		//Инициализация таблицы значений истории переходов ПКС
		мТабИсторияПереходовПКС = Новый ТаблицаЗначений;
		мТабИсторияПереходовПКС.Колонки.Добавить("ПравилоКО", ОписаниеТипа("СправочникСсылка.ПравилаКонвертацииОбъектов"));
		мТабИсторияПереходовПКС.Колонки.Добавить("ПравилоКС", ОписаниеТипа("СправочникСсылка.ПравилаКонвертацииСвойств"));
	Иначе
		мТабИсторияПереходовПКС = ВосстановленноеЗначениеИсторияПереходовПКС;
	КонецЕсли;
	
	ВосстановленноеЗначениеИсторияПереходовПВД = ВосстановитьЗначение("ИсторияПереходовПВД" + СокрЛП(Конвертация.Код));
	Если ВосстановленноеЗначениеИсторияПереходовПВД = Неопределено Тогда
		//Инициализация таблицы значений истории переходов ПВД
		мТабИсторияПереходовПВД = Новый ТаблицаЗначений;
		мТабИсторияПереходовПВД.Колонки.Добавить("ПравилоКО", ОписаниеТипа("СправочникСсылка.ПравилаКонвертацииОбъектов"));
		мТабИсторияПереходовПВД.Колонки.Добавить("ПравилоВД", ОписаниеТипа("СправочникСсылка.ПравилаВыгрузкиДанных"));
	Иначе
		мТабИсторияПереходовПВД = ВосстановленноеЗначениеИсторияПереходовПВД;
	КонецЕсли;
	
	НастройкаМенюЗапуститьПриложение();
	
	ЭлементыФормы.ПанельНижняя.Страницы.СсылкиНаПКО.Видимость = ЭлементыФормы.КоманднаяПанельПКО.Кнопки.Подменю.Кнопки.ПоказатьСсылкаНаПКО.Пометка;
	
	Если НЕ ЭтоПриложение8(Конвертация.Источник.Приложение) Или НЕ ЭтоПриложение8(Конвертация.Приемник.Приложение) Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтладкаОбработчиков);
	КонецЕсли;
	bnГитфлоу.ОбщаяФормаПравилаОбменаПриОткрытии(ЭтаФорма); //benony
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОтключитьНижнююПанель(Ложь);
	
	СохранитьЗначение("ИсторияПереходовПКС" + СокрЛП(Конвертация.Код), мТабИсторияПереходовПКС);
	СохранитьЗначение("ИсторияПереходовПВД" + СокрЛП(Конвертация.Код), мТабИсторияПереходовПВД);
	
	СохранитьЗначение("ПравилаОбмена.ПоследняяКонвертация", Конвертация);
	СохранитьЗначение("ПравилаОбмена.ПКО.ТекущаяСтрока", ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока);
	
	УправлениеПользователями.УстановитьБулевоЗначениеПоУмолчанию(глТекущийПользователь, "ОткрыватьПравилаОбмена", ОткрыватьПриВходе);
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

Процедура ПредложитьСоздатьПравилаВыгрузкиДанных()
	
	ОтветПользователя = Вопрос("Нет ни одного правила выгрузки данных. Создать правила выгрузки?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СозданиеПравилВыгрузкиДанных(Ложь, Истина);
	
КонецПроцедуры

Процедура ПредложитьУстановитьПоискДанныхПоПолям(МассивПравилБезПоиска)
	
	СтрокаИменПравил = "";
	Для Каждого Элемент Из МассивПравилБезПоиска Цикл
		
		СтрокаИменПравил = СтрокаИменПравил + Символы.ПС + Строка(Элемент); 	
		
	КонецЦикла;
	
	ОтветПользователя = Вопрос("Имеются правила конвертации для ссылочных объектов, по которым не указаны поля поиска.
	|Список найденных правил:" + СтрокаИменПравил + "
	|
	|Указать автоматически поля поиска для таких правил?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// указываем поля поиска автоматически
	СписокПКО = Новый СписокЗначений;
	СписокПКО.ЗагрузитьЗначения(МассивПравилБезПоиска);
	УстановитьПризнакСинхронизацииИУспискаПравил(СписокПКО);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СохранитьКонвертацию" командной панели формы.
// Открывает обработку "ВыгрузкаКонвертации".
//
Процедура КоманднаяПанельФормыСохранитьКонвертацию(Кнопка)
	
	Если НЕ глТекущийПользователь.НеПроверятьНаличиеПолейПоискаВПравилахОбменаПриСохранении Тогда
		
		// если есть ссылочные типы для которых вообще не заданы поля поиска, то предупредим об этом пользователя
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ПравилаКонвертацииОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
		|	Левое соединение Справочник.ПравилаКонвертацииСвойств КАК  ПравилаКонвертацииСвойств
		|		По ПравилаКонвертацииСвойств.Владелец = ПравилаКонвертацииОбъектов.Ссылка
		|			И ПравилаКонвертацииСвойств.Поиск = Истина
		|ГДЕ
		|	ПравилаКонвертацииОбъектов.Владелец = &Владелец
		|		И ПравилаКонвертацииОбъектов.Приемник.Тип В (&МассивТиповПоКоторымНуженПоиск)
		|		И ПравилаКонвертацииСвойств.Ссылка Есть NULL";
		
		Запрос.УстановитьПараметр("Владелец", Конвертация);
		Запрос.УстановитьПараметр("МассивТиповПоКоторымНуженПоиск", ПолучитьМассивТиповПоКоторыНуженПоискПоПолям());
		МассивПравилБезПоиска = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если МассивПравилБезПоиска.Количество() > 0 Тогда
			
			ПредложитьУстановитьПоискДанныхПоПолям(МассивПравилБезПоиска);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	
	// проверим, возможно нет ни одного правила выгрузки данных - предложим его создать.
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КОЛИЧЕСТВО
	|ИЗ
	|	Справочник.ПравилаВыгрузкиДанных КАК ПравилаВыгрузкиДанных
	|ГДЕ
	|	ПравилаВыгрузкиДанных.Владелец = &Владелец
	|	И ПравилаВыгрузкиДанных.ЭтоГруппа = Ложь";
	
	Запрос.УстановитьПараметр("Владелец", Конвертация);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	НетПравилВыгрузки = Ложь;
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
		
		НетПравилВыгрузки = Истина;
		
	Иначе
		
		КоличествоПравил = ТаблицаРезультата[0].КОЛИЧЕСТВО;
		Если КоличествоПравил = NULL
			ИЛИ КоличествоПравил = 0 Тогда
			
			НетПравилВыгрузки = Истина;
			
		КонецЕсли;			
		
	КонецЕсли;
	
	Если НетПравилВыгрузки Тогда
		
		ПредложитьСоздатьПравилаВыгрузкиДанных();	
		
	КонецЕсли;
	
	Если мОбработкаСохраненияПравил = Неопределено Тогда
		мОбработкаСохраненияПравил = Обработки.ВыгрузкаКонвертации.Создать();
	КонецЕсли;
	
	мОбработкаСохраненияПравил.КонвертацияДляВыгрузки = Конвертация;
	ФормаОбработки = мОбработкаСохраненияПравил.ПолучитьФорму();
	
	ФормаОбработки.ЭлементыФормы.НеЗакрыватьФормуПослеСохраненияПравил.Видимость = Истина;
	
	Если ФормаОбработки.Открыта() Тогда
		ФормаОбработки.Активизировать();
	Иначе
		ФормаОбработки.Открыть();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельФормыСохранитьКонвертацию()

// Процедура вызывается при нажатии кнопки "ЗагрузитьКонвертацию" командной панели формы.
// Открывает обработку "ЗагрузкаКонвертации".
//
Процедура КоманднаяПанельФормыЗагрузитьКонвертацию(Кнопка)
	
	Обработка = Обработки.ЗагрузкаКонвертации.Создать();
	Обработка.ИмяФайлаПравилОбмена   = РаботаСФайлами.ПолучитьИмяФайла(Конвертация, глТекущийПользователь);
	Обработка.ИмяФайлаОбработчиковВыгрузки   = РаботаСФайлами.ПолучитьИмяФайла(Конвертация, глТекущийПользователь, "ФайлОбработчиковВыгрузки");
	Обработка.ИмяФайлаОбработчиковЗагрузки   = РаботаСФайлами.ПолучитьИмяФайла(Конвертация, глТекущийПользователь, "ФайлОбработчиковЗагрузки");
	//Обработка.ЗагружаемаяКонвертация = Конвертация;
	//Обработка.Источник               = Конвертация.Источник;
	//Обработка.Приемник               = Конвертация.Приемник;
	ФормаОбработки = Обработка.ПолучитьФорму();
	ФормаОбработки.Открыть();
	
КонецПроцедуры // КоманднаяПанельФормыЗагрузитьКонвертацию()

// Процедура вызывается при нажатии кнопки "ЗапуститьПриложение" командной панели формы.
//
Процедура КоманднаяПанельФормыЗапуститьПриложение(Кнопка)
	
	НедостаточныйСоставПараметров = Ложь;
	
	Если      Найти(Кнопка.Имя, "Источник") Тогда
		Конфигурация = Конвертация.Источник;
	ИначеЕсли Найти(Кнопка.Имя, "Приемник") Тогда
		Конфигурация = Конвертация.Приемник;
	КонецЕсли;
	
	Если      Найти(Кнопка.Имя, "ПредприятиеМонопольно") Тогда
		РежимЗапуска = "ПредприятиеМонопольно";
	ИначеЕсли Найти(Кнопка.Имя, "Предприятие") Тогда
		РежимЗапуска = "Предприятие";
	ИначеЕсли Найти(Кнопка.Имя, "Конфигуратор") Тогда
		РежимЗапуска = "Конфигуратор";
	ИначеЕсли Найти(Кнопка.Имя, "Отладчик") Тогда
		РежимЗапуска = "Отладчик";
	КонецЕсли;
	
	Если ЭтоПриложение8(Конфигурация.Приложение) Тогда
		
		ВерсияПриложения = РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "ВерсияПлатформы8");
		
		Если ПустаяСтрока(ВерсияПриложения) Тогда
			
			ВерсияПриложения = "8.0";
			
		КонецЕсли;
		
		Если ВерсияПриложения = "8.0" Тогда
			ИсполняемыйФайл77 = РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "ИсполняемыйФайл80");
		КонецЕсли;
		
		Если РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "ТипРасположенияИБ") = "1" Тогда
			ТипРасположенияИБ = "Серверная";
			ИмяСервера = РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "ИмяСервера");
			ИмяИБ      = РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "ИмяИБ");
			Если ПустаяСтрока(ИмяСервера) ИЛИ ПустаяСтрока(ИмяИБ) Тогда
				НедостаточныйСоставПараметров = Истина;
			КонецЕсли;
		Иначе
			ТипРасположенияИБ = "Локальная";
			КаталогИБ  = РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "КаталогИБ");
			Если ПустаяСтрока(КаталогИБ) Тогда
				НедостаточныйСоставПараметров = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "Аутентификация") = "1" Тогда
			СпособАвторизации = "Windows";
		Иначе
			СпособАвторизации = "Предприятие";
		КонецЕсли;
		
	Иначе
		
		ВерсияПриложения = "7.7";
		ТипРасположенияИБ = "Локальная";
		ИмяСервера = "";
		ИмяИБ      = "";
		КаталогИБ  = РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "КаталогИБ");
		СпособАвторизации = "Предприятие";
		ИсполняемыйФайл77 = РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "ИсполняемыйФайл77");
		
		Если ПустаяСтрока(КаталогИБ) ИЛИ ПустаяСтрока(ИсполняемыйФайл77) Тогда
			НедостаточныйСоставПараметров = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Пользователь      = РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "Пользователь");
	Пароль            = РаботаСФайлами.ПолучитьИмяФайла(Конфигурация, глТекущийПользователь, "Пароль");
	
	Если НедостаточныйСоставПараметров Тогда
		ФормаКонфигурации = Конфигурация.ПолучитьФорму(, ЭтаФорма);
		ФормаКонфигурации.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ФормаКонфигурации.ЭлементыФормы.ОсновнаяПанель.Страницы["ПараметрыЗапуска"];
		ФормаКонфигурации.Открыть();
	Иначе
		глЗапуститьПриложение(ВерсияПриложения, РежимЗапуска, СпособАвторизации, ТипРасположенияИБ, КаталогИБ, ИмяСервера, ИмяИБ, Пользователь, Пароль, ИсполняемыйФайл77);
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельФормыЗапуститьПриложение()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

Процедура ПроверитьНеобходимостьСозданияНовыхПКО()
	
	Если Конвертация.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Количество(ПравилаКонвертацииОбъектов.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	|ГДЕ
	|	ПравилаКонвертацииОбъектов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Конвертация);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() = 0
		ИЛИ Таблица[0].Количество = 0 Тогда
		
		ФормаВопроса = ПолучитьОбщуюФорму("ФормаИнформацииПриВыбореПустойКонвертации");
		Ответ = ФормаВопроса.ОткрытьМодально();
		
		Если Ответ = 2 Тогда
			
			НовоеПКО = Справочники.ПравилаКонвертацииОбъектов.СоздатьЭлемент();
			НовоеПКО.Владелец = Конвертация;
			
			мФормаПравила = НовоеПКО.ПолучитьФорму(, ЭлементыФормы.ПравилаКонвертацииОбъектов);
			мФормаПравила.Открыть();
			мФормаПравила.Активизировать();
			
		ИначеЕсли Ответ = 1 Тогда
			
			// создание всех возможных правил
			АвтоСозданиеВсехПравилОбмена(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУстановкуНовойКонвертации() Экспорт
	
	Если Не Конвертация.Пустая() Тогда
		
		КлючУникальности = Конвертация;
		КонфигурацияИсточник = Конвертация.Источник;
		КонфигурацияПриемник = Конвертация.Приемник;
		ВосстановленноеЗначениеИсторияПереходовПКС = ВосстановитьЗначение("ИсторияПереходовПКС" + СокрЛП(Конвертация.Код));
		Если ВосстановленноеЗначениеИсторияПереходовПКС <> Неопределено Тогда
			мТабИсторияПереходовПКС = ВосстановленноеЗначениеИсторияПереходовПКС;
		КонецЕсли;
		ВосстановленноеЗначениеИсторияПереходовПВД = ВосстановитьЗначение("ИсторияПереходовПВД" + СокрЛП(Конвертация.Код));
		Если ВосстановленноеЗначениеИсторияПереходовПВД <> Неопределено Тогда
			мТабИсторияПереходовПВД = ВосстановленноеЗначениеИсторияПереходовПВД;
		КонецЕсли;
		
		Заголовок = Конвертация.Наименование;
		
	КонецЕсли;
	
	ЭлементыФормы.ПравилаКонвертацииОбъектовСинхронизация.Колонки.Очистить();
	ПравилаКонвертацииОбъектовСинхронизация.Колонки.Очистить();
	
	ДействияИсточник = ЭлементыФормы.КоманднаяПанельФормы.Кнопки["ЗапуститьПриложение"].Кнопки["Источник"];
	ДействияПриемник = ЭлементыФормы.КоманднаяПанельФормы.Кнопки["ЗапуститьПриложение"].Кнопки["Приемник"];
	
	НастройкаМенюЗапуститьПриложение();
	
	// если нет ни одного правила конвертации объектов - предложим их создать
	ПроверитьНеобходимостьСозданияНовыхПКО();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Конвертация.
//
Процедура КонвертацияПриИзменении(Элемент)
	
	ОбработатьУстановкуНовойКонвертации();
	
КонецПроцедуры // КонвертацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Конвертация.
//
Процедура КонвертацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СохранитьЗначение("ИсторияПереходовПКС" + СокрЛП(Конвертация.Код), мТабИсторияПереходовПКС);
	СохранитьЗначение("ИсторияПереходовПВД" + СокрЛП(Конвертация.Код), мТабИсторияПереходовПВД);
	
КонецПроцедуры // КонвертацияНачалоВыбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "ПриСменеСтраницы" панели формы ПанельВерхняя.
//
Процедура ПанельВерхняяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	НужноОтображатьНижнююПанель = Ложь;
	Если Элемент.ТекущаяСтраница.Имя = "ПКО" Тогда
		
		ПравилаКонвертацииСвойств.Отбор.Владелец.Значение = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока;
		НужноОтображатьНижнююПанель = Истина;
		
	ИначеЕсли Элемент.ТекущаяСтраница.Имя = "Синхронизация" Тогда
		
		Если ЭлементыФормы.ПравилаКонвертацииОбъектовСинхронизация.ТекущиеДанные = Неопределено Тогда
			ПравилаКонвертацииСвойств.Отбор.Владелец.Значение = Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка();
		Иначе
			ПравилаКонвертацииСвойств.Отбор.Владелец.Значение = ЭлементыФормы.ПравилаКонвертацииОбъектовСинхронизация.ТекущиеДанные.ПКО;
		КонецЕсли;
		
		Если ПравилаКонвертацииОбъектовСинхронизация.Колонки.Количество() = 0 
			И НЕ Конвертация.Пустая() Тогда
			
			ОтветПользователя = Вопрос("Предложить вариант поиска данных?", 
			РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);			
			
			ОбновитьИнформациюОПоискеОбъектов(, ОтветПользователя <> КодВозвратаДиалога.Да);				
			
		КонецЕсли;
		
		НужноОтображатьНижнююПанель = Истина;
		
	КонецЕсли;
	
	ОтключитьНижнююПанель(НЕ НужноОтображатьНижнююПанель);
	
КонецПроцедуры // ПанельВерхняяПриСменеСтраницы()

Процедура ОтключитьНижнююПанель(Отключить)
	
	Если Отключить Тогда
		ЭлементыФормы.ПанельНижняя.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.РазделительПанелей.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
		ЭлементыФормы.ПанельНижняя,
		ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.ПанельНижняя.Свертка       = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительПанелей.Свертка = РежимСверткиЭлементаУправления.Низ;
	Иначе
		ЭлементыФормы.РазделительПанелей.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельНижняя.Свертка       = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительПанелей.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
		ЭтаФорма.Панель,
		ГраницаЭлементаУправления.Низ,
		ЭтаФорма.Панель,
		ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.ПанельНижняя.УстановитьПривязку(ГраницаЭлементаУправления.Верх,
		ЭлементыФормы.РазделительПанелей,
		ГраницаЭлементаУправления.Низ);
	КонецЕсли;
	
КонецПроцедуры // ОтключитьНижнююПанель()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ВЕРХНЕЙ ПАНЕЛИ (ПанельВерхняя, страница ПКО) 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельПКО

// Процедура вызывается при нажатии кнопки "Вверх" командной панели КоманднаяПанельПКО.
// Осуществляет перемещение строки табличного поля на одну позицию вверх.
//
Процедура КоманднаяПанельПКОВверх(Кнопка)
	
	Элемент = ЭлементыФормы.ПравилаКонвертацииОбъектов;
	РасстановкаЭлементов(Элемент.ТекущиеДанные.Родитель, Элемент.ТекущиеДанные.Владелец, Элемент.ТекущаяСтрока, -1);
	
КонецПроцедуры // КоманднаяПанельПКОВверх()

// Процедура вызывается при нажатии кнопки "Вниз" командной панели КоманднаяПанельПКО.
// Осуществляет перемещение строки табличного поля на одну позицию вниз.
//
Процедура КоманднаяПанельПКОВниз(Кнопка)
	
	Элемент = ЭлементыФормы.ПравилаКонвертацииОбъектов;
	РасстановкаЭлементов(Элемент.ТекущиеДанные.Родитель, Элемент.ТекущиеДанные.Владелец, Элемент.ТекущаяСтрока, 1);
	
КонецПроцедуры // КоманднаяПанельПКОВниз()

Процедура ПроизвестиСинхронизациюОбъектов() Экспорт
	
	Обработка = Обработки.АвтонастройкаПравилКонвертацииОбъектов.Создать();
	Обработка.Конвертация = Конвертация;
	ФормаОбработки = Обработка.ПолучитьФорму(, ЭтаФорма);
	ФормаОбработки.Открыть();	
	
КонецПроцедуры

// Процедура вызывается при выборе действия "СинхронизацияОбъектов" командной панели КоманднаяПанельПКО.
// Открывает обработку "АвтонастройкаПравилКонвертацииОбъектов".
//
Процедура КоманднаяПанельПКОСинхронизацияОбъектов(Кнопка)
	
	ПроизвестиСинхронизациюОбъектов();
	
КонецПроцедуры // КоманднаяПанельПКОСинхронизацияОбъектов()

Процедура ВыполнитьСинхронизациюСвойствОбъекта()
	
	Если ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработка = Обработки.АвтонастройкаПравилКонвертацииСвойств.Создать();
	Обработка.СоздаватьПравилаКО = Истина;
	Обработка.ПравилоКО = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока;
	ФормаОбработки = Обработка.ПолучитьФорму(,, Обработка.ПравилоКО);
	ФормаОбработки.Открыть();
	
КонецПроцедуры

Процедура ВыполнитьСинхронизациюЗначенийОбъекта()
	
	Если ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработка = Обработки.АвтонастройкаПравилКонвертацииЗначений.Создать();
	Обработка.ПравилоКО = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока;
	ФормаОбработки = Обработка.ПолучитьФорму(,, Обработка.ПравилоКО);
	ФормаОбработки.Открыть();
	
КонецПроцедуры

// Процедура вызывается при выборе действия "ГрупповоеСозданиеПКС" командной панели КоманднаяПанельПКО.
// Выполняет групповую автоматическую синхронизацию ПКО и ПКЗ.
//
Процедура КоманднаяПанельПКОГрупповоеСозданиеПКСиПКЗ(Кнопка)
	
	Обработка = Обработки.ГрупповоеСозданиеПравилКонвертацииСвойствЗначений.Создать();
	Обработка.Конвертация = Конвертация;
	ФормаОбработки = Обработка.ПолучитьФорму();
	ФормаОбработки.Открыть();
	
КонецПроцедуры // КоманднаяПанельПКОГрупповоеСозданиеПКС()

// Процедура вызывается при выборе действия "СозданиеПравилВыгрузкиДанных" командной панели КоманднаяПанельПКО.
// Открывает обработку "СозданиеПравилВыгрузкиДанных".
//
Процедура КоманднаяПанельПКОСозданиеПравилВыгрузкиДанных(Кнопка)
	
	СозданиеПравилВыгрузкиДанных(Ложь);
	
КонецПроцедуры // КоманднаяПанельПКОСозданиеПравилВыгрузкиДанных()

// Процедура вызывается при выборе действия "СкопироватьПКОСПодчиненными" командной панели КоманднаяПанельПКО.
// Осуществляет копирование ПКО с подчиненными ПКС и ПКЗ.
//
Процедура КоманднаяПанельПКОСкопироватьПКОСПодчиненными(Кнопка)
	
	ТекущееПКО = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока;
	Если ТекущееПКО.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НовоеПКО = СкопироватьСПодчиненными(ТекущееПКО, ТекущееПКО.Родитель, ТекущееПКО.Владелец);
	ОткрытьЗначение(НовоеПКО);
	
КонецПроцедуры // КоманднаяПанельПКОСкопироватьПКОСПодчиненными()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПравилаКонвертацииОбъектов

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля ПравилаКонвертацииОбъектов.
//
Процедура ПравилаКонвертацииОбъектовПередНачаломИзменения(Элемент, Отказ)
	
	УстановитьСпособРедактирования(Элемент);
	
	ОткрытьФормуЭлементаВСписке(Элемент, Отказ);
	
КонецПроцедуры // ПравилаКонвертацииОбъектовПередНачаломИзменения()

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля ПравилаКонвертацииОбъектов.
//
Процедура ПравилаКонвертацииОбъектовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ВосстановитьСпособРедактирования(Элемент);
	
КонецПроцедуры // ПравилаКонвертацииОбъектовПередОкончаниемРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля ПравилаКонвертацииОбъектов.
//
Процедура ПравилаКонвертацииОбъектовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено
		ИЛИ ДанныеСтроки.ЭтоГруппа Тогда
		
		Если мФормаПравила <> Неопределено
			и мФормаПравила.Открыта() ТОгда
			
			мФормаПравила.Активизировать();
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли; 
	
	Ячейки = ОформлениеСтроки.Ячейки;
	
	Ячейки.ИмяИсточника.УстановитьТекст(ДанныеСтроки.Источник.Имя);
	Ячейки.ИмяПриемника.УстановитьТекст(ДанныеСтроки.Приемник.Имя);
	
	Если ДанныеСтроки.ПометкаУдаления Тогда
		
		// правило помечено на удаление
		
	ИначеЕсли ДанныеСтроки.СинхронизироватьПоИдентификатору Тогда
		
		Если ДанныеСтроки.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли Тогда
			
			ОформлениеСтроки.Ячейки.Картинка.Картинка = БиблиотекаКартинок.ПродолжитьПоиск;
			
		Иначе
			
			ОформлениеСтроки.Ячейки.Картинка.Картинка = БиблиотекаКартинок.Поиск;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Не ПустаяСтрока(ДанныеСтроки.АлгоритмПередВыгрузкойОбъекта)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПриВыгрузкеОбъекта)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПослеВыгрузкиОбъекта)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПослеВыгрузкиОбъектаВФайлОбмена))  Тогда
		
		ОформлениеСтроки.Ячейки.Источник.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;	
		ОформлениеСтроки.Ячейки.Источник.ОтображатьКартинку = Истина;
		
	КонецЕсли;
	
	
	Если (Не ПустаяСтрока(ДанныеСтроки.АлгоритмПередЗагрузкойОбъекта)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПриЗагрузкеОбъекта)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПослеЗагрузкиОбъекта)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПоследовательностьПолейПоиска)) Тогда
		
		ОформлениеСтроки.Ячейки.Приемник.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;	
		ОформлениеСтроки.Ячейки.Приемник.ОтображатьКартинку = Истина;
		
	КонецЕсли;
	
	Если НЕ ДанныеСтроки.ПометкаУдаления Тогда
		
		Если (ЗначениеЗаполнено(ДанныеСтроки.Источник) И ДанныеСтроки.Источник.ПометкаУдаления)
			ИЛИ (ЗначениеЗаполнено(ДанныеСтроки.Приемник) И ДанныеСтроки.Приемник.ПометкаУдаления) Тогда
			
			ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДанныеСтроки.ПометкаУдаления Тогда
		
		ПроверитьСтрокуНаВалидность(ДанныеСтроки, ОформлениеСтроки);
		
	КонецЕсли;
	
	Если мФормаПравила <> Неопределено
		и мФормаПравила.Открыта() ТОгда
		
		мФормаПравила.Активизировать();
		
	КонецЕсли;
	
	//{benony
	мПВД = ОбщегоНазначенияКлиентСервер.ПолучитьПВДдляПКО(ДанныеСтроки.Ссылка, ДанныеСтроки.Владелец);
	Если мПВД = Неопределено Тогда
		ОформлениеСтроки.Ячейки.ПВД.ОтображатьКартинку = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.ПВД.ИндексКартинки = ?(мПВД.Отключить, 0, 1);
		ОформлениеСтроки.Ячейки.ПВД.ОтображатьКартинку = Истина;
	КонецЕсли;
	//}benony
	
КонецПроцедуры // ПравилаКонвертацииОбъектовПриВыводеСтроки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ВЕРХНЕЙ ПАНЕЛИ (ПанельВерхняя, страница ПВД) 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельПВД

// Процедура вызывается при нажатии кнопки "Вверх" командной панели КоманднаяПанельПВД.
// Осуществляет перемещение строки табличного поля на одну позицию вверх.
//
Процедура КоманднаяПанельПВДВверх(Кнопка)
	
	Элемент = ЭлементыФормы.ПравилаВыгрузкиДанных;
	РасстановкаЭлементов(Элемент.ТекущиеДанные.Родитель, Элемент.ТекущиеДанные.Владелец, Элемент.ТекущаяСтрока, -1);
	
КонецПроцедуры // КоманднаяПанельПВДВверх()

// Процедура вызывается при нажатии кнопки "Вниз" командной панели КоманднаяПанельПВД.
// Осуществляет перемещение строки табличного поля на одну позицию вниз.
//
Процедура КоманднаяПанельПВДВниз(Кнопка)
	
	Элемент = ЭлементыФормы.ПравилаВыгрузкиДанных;
	РасстановкаЭлементов(Элемент.ТекущиеДанные.Родитель, Элемент.ТекущиеДанные.Владелец, Элемент.ТекущаяСтрока, 1);
	
КонецПроцедуры // КоманднаяПанельПВДВниз()

// Процедура вызывается при нажатии кнопки "ПерейтиКПравилуКО" командной панели КоманднаяПанельПВД.
// Осуществляет переход к ПКО, соответствующему текущему ПВД.
//
Процедура КоманднаяПанельПВДПерейтиКПравилуКО(Кнопка)
	
	ПравилоВД = ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущаяСтрока;
	
	Если ПравилоВД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравилоВД.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравилоВД.ПравилоКонвертации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
	ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = ПравилоВД.ПравилоКонвертации;
	
	ДобавитьВИсториюПереходовПВД(ПравилоВД.ПравилоКонвертации, ПравилоВД);
	
КонецПроцедуры // КоманднаяПанельПВДПерейтиКПравилуКО()

// Процедура вызывается при нажатии кнопки "ПерейтиНазад" командной панели КоманднаяПанельПВД.
// Осуществляет переход к ПКО, соответствующему предыдущему ПВД из истории переходов.
//
Процедура КоманднаяПанельПВДПерейтиНазад(Кнопка)
	
	Если мТабИсторияПереходовПВД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоВД = ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущаяСтрока;
	
	Если ПравилоВД <> Неопределено Тогда
		НайденнаяСтрока = мТабИсторияПереходовПВД.Найти(ПравилоВД, "ПравилоВД");
		Если НайденнаяСтрока <> Неопределено Тогда
			Индекс = мТабИсторияПереходовПВД.Индекс(НайденнаяСтрока);
			Если Индекс Тогда
				ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
				ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПКС[Индекс - 1].ПравилоКО;
				ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущаяСтрока      = мТабИсторияПереходовПВД[Индекс - 1].ПравилоВД;
			КонецЕсли;
		Иначе
			ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
			ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПВД[мТабИсторияПереходовПВД.Количество() - 1].ПравилоКО;
			ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущаяСтрока      = мТабИсторияПереходовПВД[мТабИсторияПереходовПВД.Количество() - 1].ПравилоВД;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
		ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПВД[мТабИсторияПереходовПВД.Количество() - 1].ПравилоКО;
		ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущаяСтрока      = мТабИсторияПереходовПВД[мТабИсторияПереходовПВД.Количество() - 1].ПравилоВД;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПВДПерейтиНазад()

// Процедура вызывается при нажатии кнопки "ПерейтиВперед" командной панели КоманднаяПанельПВД.
// Осуществляет переход к ПКО, соответствующему следующему ПВД из истории переходов.
//
Процедура КоманднаяПанельПВДПерейтиВперед(Кнопка)
	
	Если мТабИсторияПереходовПВД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоВД = ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущаяСтрока;
	
	Если ПравилоВД <> Неопределено Тогда
		НайденнаяСтрока = мТабИсторияПереходовПВД.Найти(ПравилоВД, "ПравилоВД");
		Если НайденнаяСтрока <> Неопределено Тогда
			Индекс = мТабИсторияПереходовПВД.Индекс(НайденнаяСтрока);
			Если Индекс < мТабИсторияПереходовПВД.Количество() - 1 Тогда
				ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
				ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПВД[Индекс + 1].ПравилоКО;
				ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущаяСтрока      = мТабИсторияПереходовПВД[Индекс + 1].ПравилоВД;
			КонецЕсли;
		Иначе
			ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
			ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПВД[0].ПравилоКО;
			ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущаяСтрока      = мТабИсторияПереходовПВД[0].ПравилоВД;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
		ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПВД[0].ПравилоКО;
		ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущаяСтрока      = мТабИсторияПереходовПВД[0].ПравилоВД;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПВДПерейтиВперед()

// Процедура вызывается при нажатии кнопки "ИсторияПВД" командной панели КоманднаяПанельПВД.
// Открывает форму списка в виде меню для выбора и дальнейшего перехода
// к соответствующему ПКО из истории переходов.
//
Процедура КоманднаяПанельПВДИсторияПереходов(Кнопка)
	
	СписокИстории = Новый СписокЗначений;
	СписокИстории.Добавить("Очистить", "<Очистить историю>");
	
	Для каждого Строка из мТабИсторияПереходовПВД Цикл
		СписокИстории.Добавить(Строка.ПравилоКО, Строка.ПравилоКО.Наименование);
	КонецЦикла;
	
	ВыбранныйЭлемент = СписокИстории.ВыбратьЭлемент();
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "Очистить" Тогда
			мТабИсторияПереходовПВД.Очистить();
		Иначе
			ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
			ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = ВыбранныйЭлемент.Значение;
			ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущаяСтрока      = мТабИсторияПереходовПВД.Найти(ВыбранныйЭлемент.Значение, "ПравилоКО").ПравилоВД;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПВДИсторияПереходов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПравилаВыгрузкиДанных

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля ПравилаВыгрузкиДанных.
//
Процедура ПравилаВыгрузкиДанныхПередНачаломИзменения(Элемент, Отказ)
	
	УстановитьСпособРедактирования(Элемент);
	
	ОткрытьФормуЭлементаВСписке(Элемент, Отказ);
	
КонецПроцедуры // ПравилаВыгрузкиДанныхПередНачаломИзменения()

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля ПравилаВыгрузкиДанных.
//
Процедура ПравилаВыгрузкиДанныхПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ВосстановитьСпособРедактирования(Элемент);
	
КонецПроцедуры // ПравилаВыгрузкиДанныхПередОкончаниемРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ВЕРХНЕЙ ПАНЕЛИ (ПанельВерхняя, страница ПОД)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельПОД

// Процедура вызывается при нажатии кнопки "Вверх" командной панели КоманднаяПанельПОД.
// Осуществляет перемещение строки табличного поля на одну позицию вверх.
//
Процедура КоманднаяПанельПОДВверх(Кнопка)
	
	Элемент = ЭлементыФормы.ПравилаОчисткиДанных;
	РасстановкаЭлементов(Элемент.ТекущиеДанные.Родитель, Элемент.ТекущиеДанные.Владелец, Элемент.ТекущаяСтрока, -1);
	
КонецПроцедуры // КоманднаяПанельПОДВверх()

// Процедура вызывается при нажатии кнопки "Вниз" командной панели КоманднаяПанельПОД.
// Осуществляет перемещение строки табличного поля на одну позицию вниз.
//
Процедура КоманднаяПанельПОДВниз(Кнопка)
	
	Элемент = ЭлементыФормы.ПравилаОчисткиДанных;
	РасстановкаЭлементов(Элемент.ТекущиеДанные.Родитель, Элемент.ТекущиеДанные.Владелец, Элемент.ТекущаяСтрока, 1);
	
КонецПроцедуры // КоманднаяПанельПОДВниз()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПравилаОчисткиДанных

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля ПравилаОчисткиДанных.
//
Процедура ПравилаОчисткиДанныхПередНачаломИзменения(Элемент, Отказ)
	
	УстановитьСпособРедактирования(Элемент);
	
	ОткрытьФормуЭлементаВСписке(Элемент, Отказ);
	
КонецПроцедуры // ПравилаОчисткиДанныхПередНачаломИзменения()

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля ПравилаОчисткиДанных.
//
Процедура ПравилаОчисткиДанныхПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ВосстановитьСпособРедактирования(Элемент);
	
КонецПроцедуры // ПравилаОчисткиДанныхПередОкончаниемРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ВЕРХНЕЙ ПАНЕЛИ (ПанельВерхняя, страница Синхронизация)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельПКОСинхронизация

Процедура ОбновитьИнформациюОПоискеОбъектов(СписокПКО = Неопределено, ТолькоСоздатьКолонки = Ложь) Экспорт
	
	ПравилаКонвертацииОбъектовСинхронизация.Строки.Очистить();
	
	Если ПравилаКонвертацииОбъектовСинхронизация.Колонки.Количество() = 0 Тогда
		
		ТабКолонки = ПравилаКонвертацииОбъектовСинхронизация.Колонки;
		
		ТабКолонки.Добавить("Код",                ОписаниеТипа("Строка"), "Имя");
		ТабКолонки.Добавить("Источник",           ОписаниеТипа("СправочникСсылка.Объекты"), "Объект источник");
		ТабКолонки.Добавить("Приемник",           ОписаниеТипа("СправочникСсылка.Объекты"), "Объект приемник");
		ТабКолонки.Добавить("ЭтоГруппа",          ОписаниеТипа("Булево"), "ЭтоГруппа");
		ТабКолонки.Добавить("ПКО",                ОписаниеТипа("СправочникСсылка.ПравилаКонвертацииОбъектов"));
		ТабКолонки.Добавить("ТекущийСпособ",      ОписаниеТипа("Строка"), "Текущий способ");
		ТабКолонки.Добавить("ПредлагаемыйСпособ", ОписаниеТипа("Строка"), "Предлагаемый способ");
		ТабКолонки.Добавить("РазличияВкл",        ОписаниеТипа("Строка"), "Включить поиск по");
		ТабКолонки.Добавить("РазличияВыкл",       ОписаниеТипа("Строка"), "Выключить поиск по");
		
		ЭлементыФормы.ПравилаКонвертацииОбъектовСинхронизация.СоздатьКолонки();
		
		ТабКолонки.Добавить("ПКСТекущие",      ОписаниеТипа("Соответствие"));
		ТабКолонки.Добавить("ПКСПредлагаемые", ОписаниеТипа("Соответствие"));
		ТабКолонки.Добавить("ПКСРазличияВкл",  ОписаниеТипа("Соответствие"));
		ТабКолонки.Добавить("ПКСРазличияВыкл", ОписаниеТипа("Соответствие"));
		
		ТабКолонки.Добавить("Пометка", ОписаниеТипа("Число"));
		
		ТабКолонки = ЭлементыФормы.ПравилаКонвертацииОбъектовСинхронизация.Колонки;
		
		ТабКолонки["ПКО"].Видимость = Ложь;
		
		ТабКолонки["Код"].ДанныеФлажка = "Пометка";
		ТабКолонки["Код"].РежимРедактирования  = РежимРедактированияКолонки.Непосредственно;
		ТабКолонки["Код"].ИзменятьВидимость                = Ложь;
		ТабКолонки["Код"].Ширина = 50;
		
		ТабКолонки["ЭтоГруппа"].ИзменятьВидимость          = Ложь;
		ТабКолонки["ЭтоГруппа"].Видимость           	   = Ложь;
		
		ТабКолонки["Источник"].ИзменятьВидимость           = Ложь;
		ТабКолонки["Приемник"].ИзменятьВидимость           = Ложь;
		ТабКолонки["Источник"].Видимость           		   = Ложь;
		ТабКолонки["Приемник"].Видимость		           = Ложь;
		
		ТабКолонки["ПКО"].ИзменятьВидимость                = Ложь;
		ТабКолонки["ТекущийСпособ"].ИзменятьВидимость      = Ложь;
		ТабКолонки["ПредлагаемыйСпособ"].ИзменятьВидимость = Ложь;
		ТабКолонки["РазличияВкл"].ИзменятьВидимость        = Ложь;
		ТабКолонки["РазличияВыкл"].ИзменятьВидимость       = Ложь;
		
		ТабКолонки["ПредлагаемыйСпособ"].ЦветТекстаПоля = WebЦвета.Красный;
		ТабКолонки["РазличияВкл"].ЦветТекстаПоля        = WebЦвета.Зеленый;
		ТабКолонки["РазличияВыкл"].ЦветТекстаПоля       = WebЦвета.Синий;
		
		ТабКолонки["Код"].КартинкиСтрок = БиблиотекаКартинок.ГруппаИЭлемент;
		
	КонецЕсли;
	
	Если ТолькоСоздатьКолонки Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокПКО = Неопределено Тогда
		
		ПКОВыборка = Справочники.ПравилаКонвертацииОбъектов.ВыбратьИерархически( , Конвертация, , "Порядок");
		
	Иначе
		
		МассивСсылокПКО = СписокПКО.ВыгрузитьЗначения();
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
		|ГДЕ
		|	ПравилаКонвертацииОбъектов.Владелец = &Конвертация
		|	И ПравилаКонвертацииОбъектов.Ссылка В  (&МассивСсылок)
		|	И ПравилаКонвертацииОбъектов.ЭтоГруппа = Ложь";
		
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокПКО);
		
		ПКОВыборка = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	ИерархияСтрок = Новый Соответствие;
	ИерархияСтрок.Вставить(Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка(), ПравилаКонвертацииОбъектовСинхронизация);
	
	МассивТиповДляПоискаПоПолям = ПолучитьМассивТиповПоКоторыНуженПоискПоПолям();
	
	Пока ПКОВыборка.Следующий() Цикл
		
		ПКОГруппа = ПКОВыборка.ЭтоГруппа;
		Если НЕ ПКОГруппа Тогда
			
			ТекущийТип = ПКОВыборка.Приемник.Тип;
			ИндексВМассиве = МассивТиповДляПоискаПоПолям.Найти(ТекущийТип);
			
			Если ИндексВМассиве = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИерархияСтрок[ПКОВыборка.Родитель] = Неопределено Тогда
			НоваяСтрока = ИерархияСтрок[Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка()].Строки.Добавить();
		Иначе
			НоваяСтрока = ИерархияСтрок[ПКОВыборка.Родитель].Строки.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Код      = ПКОВыборка.Код;
		НоваяСтрока.Источник = ПКОВыборка.Источник;
		НоваяСтрока.Приемник = ПКОВыборка.Приемник;
		НоваяСтрока.ПКО      = ПКОВыборка.Ссылка;
		НоваяСтрока.ЭтоГруппа = ПКОВыборка.ЭтоГруппа;
		
		Если ПКОГруппа Тогда
			ИерархияСтрок.Вставить(ПКОВыборка.Ссылка, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьТаблицуТекущейСинхронизацииОбъектов();
	ЗаполнитьПКССинхронизацииСтрок(ПравилаКонвертацииОбъектовСинхронизация.Строки);
	
	Для Каждого СтрокаСпискаНайденных Из ПравилаКонвертацииОбъектовСинхронизация.Строки Цикл
		ЭлементыФормы.ПравилаКонвертацииОбъектовСинхронизация.Развернуть(СтрокаСпискаНайденных, Истина);
	КонецЦикла;	
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Обновить" командной панели КоманднаяПанельПКОСинхронизация.
// Осуществляет инициализацию таблицы с заполнением правилами конвертации объектов
// и заполнение синхронизирующих свойств.
//
Процедура КоманднаяПанельПКОСинхронизацияОбновить(Кнопка)
	
	ОбновитьИнформациюОПоискеОбъектов();	
	
КонецПроцедуры // КоманднаяПанельПКОСинхронизацияОбновить()

Процедура УстановитьПравилаСинхронизацииУВыбранныхОбъектов()
	
	Для каждого ПКО из ПравилаКонвертацииОбъектовСинхронизация.Строки Цикл
		ПКО.Пометка = УстановитьФлагПоиска(ПКО);		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Записать" командной панели КоманднаяПанельПКОСинхронизация.
//
Процедура КоманднаяПанельПКОСинхронизацияЗаписать(Кнопка)
	
	Если ПравилаКонвертацииОбъектовСинхронизация.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Установить предлагаемые условия поиска для выбранных правил?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена) = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПравилаСинхронизацииУВыбранныхОбъектов();
	
КонецПроцедуры // КоманднаяПанельПКОСинхронизацияЗаписать()

// Процедура вызывается при нажатии кнопки "УстановитьПометки" командной панели КоманднаяПанельПКОСинхронизация.
//
Процедура КоманднаяПанельПКОСинхронизацияУстановитьПометки(Кнопка)
	
	Для каждого Строка из ПравилаКонвертацииОбъектовСинхронизация.Строки Цикл
		Строка.Пометка = 1;
		глУстановитьПометки(Строка, мТекстАлгоритма, Истина);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельПКОСинхронизацияУстановитьПометки()

// Процедура вызывается при нажатии кнопки "СнятьПометки" командной панели КоманднаяПанельПКОСинхронизация.
//
Процедура КоманднаяПанельПКОСинхронизацияСнятьПометки(Кнопка)
	
	Для каждого Строка из ПравилаКонвертацииОбъектовСинхронизация.Строки Цикл
		Строка.Пометка = 0;
		глУстановитьПометки(Строка, мТекстАлгоритма, Истина);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельПКОСинхронизацияСнятьПометки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПравилаКонвертацииОбъектовСинхронизация

// Процедура - обработчик события "Выбор" табличного поля ПравилаКонвертацииОбъектовСинхронизация.
//
Процедура ПравилаКонвертацииОбъектовСинхронизацияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ИмяКолонки = Колонка.Имя;
	
	Если ИмяКолонки = "Код" Тогда
		ОткрытьЗначение(ВыбраннаяСтрока.ПКО);
	ИначеЕсли ИмяКолонки = "Источник" Тогда
		ОткрытьЗначение(ВыбраннаяСтрока.Источник);
	ИначеЕсли ИмяКолонки = "Приемник" Тогда
		ОткрытьЗначение(ВыбраннаяСтрока.Приемник);
	ИначеЕсли ИмяКолонки = "ТекущийСпособ" Тогда
		
		СписокПравил = Новый СписокЗначений;
		
		Для каждого ПКС из ВыбраннаяСтрока.ПКСТекущие Цикл
			СписокПравил.Добавить(ПКС.Значение);
		КонецЦикла;
		
		ВыбранноеПравило = ВыбратьИзМеню(СписокПравил);
		Если ВыбранноеПравило <> Неопределено Тогда
			ОткрытьЗначение(ВыбранноеПравило.Значение);
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПредлагаемыйСпособ" Тогда
		
	ИначеЕсли ИмяКолонки = "РазличияВкл" Тогда
		
		СписокСвойств = Новый СписокЗначений;
		Для каждого ПКС из ВыбраннаяСтрока.ПКСРазличияВкл Цикл
			СписокСвойств.Добавить(ПКС.Значение);
		КонецЦикла;
		ВыбранноеСвойство = ВыбратьИзМеню(СписокСвойств);
		Если ВыбранноеСвойство <> Неопределено Тогда
			
			ПКС = Справочники.ПравилаКонвертацииСвойств.НайтиПоРеквизиту("Приемник", ВыбранноеСвойство.Значение,, ВыбраннаяСтрока.ПКО);
			Если НЕ ПКС.Пустая() Тогда
				ОткрытьЗначение(ПКС);
			Иначе
				НовоеПравило = Справочники.ПравилаКонвертацииСвойств.ПолучитьФормуНовогоЭлемента();
				НовоеПравило.Владелец       = ВыбраннаяСтрока.ПКО;
				Если ВыбраннаяСтрока.Источник <> Неопределено Тогда
					СвойствоИсточника = Справочники.Свойства.НайтиПоНаименованию(СокрЛП(ВыбранноеСвойство.Значение.Наименование), Истина, , ВыбраннаяСтрока.Источник);
					Если НЕ СвойствоИсточника.Пустая() Тогда
						НовоеПравило.Источник = СвойствоИсточника;
					КонецЕсли;
				КонецЕсли;
				НовоеПравило.Приемник       = ВыбранноеСвойство.Значение;
				НовоеПравило.Наименование   = глНаименованиеПКС(НовоеПравило);
				НовоеПравило.Поиск          = Истина;
				НовоеПравило.ОткрытьМодально();
			КонецЕсли;
			
			ЗаполнитьТаблицуТекущейСинхронизацииОбъектов();			
			ВыбраннаяСтрока.Пометка = ЗаполнитьПКССинхронизации(ВыбраннаяСтрока.ПКО, ВыбраннаяСтрока.Приемник, ВыбраннаяСтрока.ПКСТекущие, ВыбраннаяСтрока.ТекущийСпособ, ВыбраннаяСтрока.ПКСПредлагаемые, ВыбраннаяСтрока.ПредлагаемыйСпособ, ВыбраннаяСтрока.ПКСРазличияВкл, ВыбраннаяСтрока.РазличияВкл, ВыбраннаяСтрока.ПКСРазличияВыкл, ВыбраннаяСтрока.РазличияВыкл);
			
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "РазличияВыкл" Тогда
		
		СписокПравил = Новый СписокЗначений;
		Для каждого ПКС из ВыбраннаяСтрока.ПКСРазличияВыкл Цикл
			СписокПравил.Добавить(ПКС.Значение);
		КонецЦикла;
		ВыбранноеПравило = ВыбратьИзМеню(СписокПравил);
		Если ВыбранноеПравило <> Неопределено Тогда
			ОткрытьЗначение(ВыбранноеПравило.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПравилаКонвертацииОбъектовСинхронизацияВыбор()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля ПравилаКонвертацииОбъектовСинхронизация.
//
Процедура ПравилаКонвертацииОбъектовСинхронизацияПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		ПравилаКонвертацииСвойств.Отбор.Владелец.Значение = Элемент.ТекущаяСтрока.ПКО;
	КонецЕсли;
	
КонецПроцедуры // ПравилаКонвертацииОбъектовСинхронизацияПриАктивизацииСтроки()

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля ПравилаКонвертацииОбъектовСинхронизация.
//
Процедура ПравилаКонвертацииОбъектовСинхронизацияПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя <> "Код" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПравилаКонвертацииОбъектовСинхронизацияПередНачаломИзменения()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля ПравилаКонвертацииОбъектовСинхронизация.
//
Процедура ПравилаКонвертацииОбъектовСинхронизацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Элемент.Колонки["Источник"].ЭлементУправления.Доступность           = Ложь;
	Элемент.Колонки["Приемник"].ЭлементУправления.Доступность           = Ложь;
	Элемент.Колонки["ПКО"].ЭлементУправления.Доступность                = Ложь;
	Элемент.Колонки["ТекущийСпособ"].ЭлементУправления.Доступность      = Ложь;
	Элемент.Колонки["ПредлагаемыйСпособ"].ЭлементУправления.Доступность = Ложь;
	Элемент.Колонки["РазличияВкл"].ЭлементУправления.Доступность        = Ложь;
	Элемент.Колонки["РазличияВыкл"].ЭлементУправления.Доступность       = Ложь;
	
КонецПроцедуры // ПравилаКонвертацииОбъектовСинхронизацияПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля ПравилаКонвертацииОбъектовСинхронизация.
//
Процедура ПравилаКонвертацииОбъектовСинхронизацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ОформлениеСтроки.Ячейки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки["Код"].ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.ПКО.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки["Код"].ИндексКартинки     = 0;
	Иначе
		ОформлениеСтроки.Ячейки["Код"].ИндексКартинки     = 1;
	КонецЕсли;
	
КонецПроцедуры // ПравилаКонвертацииОбъектовСинхронизацияПриВыводеСтроки()

// Процедура - обработчик события "ПриИзмененииФлажка" табличного поля ПравилаКонвертацииОбъектовСинхронизация.
//
Процедура ПравилаКонвертацииОбъектовСинхронизацияПриИзмененииФлажка(Элемент, Колонка)
	
	глУстановитьПометки(Элемент.ТекущаяСтрока, мТекстАлгоритма, Истина);
	
КонецПроцедуры // ПравилаКонвертацииОбъектовСинхронизацияПриИзмененииФлажка()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ НИЖНЕЙ ПАНЕЛИ (ПанельНижняя, страница ПКС)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельПКС

// Процедура вызывается при нажатии кнопки "Вверх" командной панели КоманднаяПанельПКС.
// Осуществляет перемещение строки табличного поля на одну позицию вверх.
//
Процедура КоманднаяПанельПКСВверх(Кнопка)
	
	Элемент = ЭлементыФормы.ПравилаКонвертацииСвойств;
	РасстановкаЭлементов(Элемент.ТекущиеДанные.Родитель, Элемент.ТекущиеДанные.Владелец, Элемент.ТекущаяСтрока, -1);
	
КонецПроцедуры // КоманднаяПанельПКСВверх()

// Процедура вызывается при нажатии кнопки "Вниз" командной панели КоманднаяПанельПКС.
// Осуществляет перемещение строки табличного поля на одну позицию вниз.
//
Процедура КоманднаяПанельПКСВниз(Кнопка)
	
	Элемент = ЭлементыФормы.ПравилаКонвертацииСвойств;
	РасстановкаЭлементов(Элемент.ТекущиеДанные.Родитель, Элемент.ТекущиеДанные.Владелец, Элемент.ТекущаяСтрока, 1);
	
КонецПроцедуры // КоманднаяПанельПКСВниз()

// Процедура вызывается при выборе действия "ПерейтиКПравилуКО" командной панели КоманднаяПанельПКС.
// Осуществляет переход к ПКО, соответствующему текущему ПКС.
//
Процедура КоманднаяПанельПКСПерейтиКПравилуКО(Кнопка)
	
	ПравилоКО = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока;
	ПравилоКС = ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяСтрока;
	
	Если ПравилоКС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравилоКС.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравилоКС.ПравилоКонвертации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВИсториюПереходовПКС(ПравилоКО, ПравилоКС);
	
	ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
	ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = ПравилоКС.ПравилоКонвертации;
	
	ПравилоКО = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока;
	ПравилоКС = Справочники.ПравилаКонвертацииСвойств.ПустаяСсылка();
	
	ДобавитьВИсториюПереходовПКС(ПравилоКО, ПравилоКС);
	
КонецПроцедуры // КоманднаяПанельПКСПерейтиКПравилуКО()

// Процедура вызывается при выборе действия "ПерейтиНазад" командной панели КоманднаяПанельПКС.
// Осуществляет переход к ПКО, соответствующему предыдущему ПКС из истории переходов.
//
Процедура КоманднаяПанельПКСПерейтиНазад(Кнопка)
	
	Если мТабИсторияПереходовПКС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоКО = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока;
	
	Если ПравилоКО <> Неопределено Тогда
		НайденнаяСтрока = мТабИсторияПереходовПКС.Найти(ПравилоКО, "ПравилоКО");
		Если НайденнаяСтрока <> Неопределено Тогда
			Индекс = мТабИсторияПереходовПКС.Индекс(НайденнаяСтрока);
			Если Индекс Тогда
				ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
				ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПКС[Индекс - 1].ПравилоКО;
				ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяСтрока  = мТабИсторияПереходовПКС[Индекс - 1].ПравилоКС;
			КонецЕсли;
		Иначе
			ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
			ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПКС[мТабИсторияПереходовПКС.Количество() - 1].ПравилоКО;
			ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяСтрока  = мТабИсторияПереходовПКС[мТабИсторияПереходовПКС.Количество() - 1].ПравилоКС;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
		ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПКС[мТабИсторияПереходовПКС.Количество() - 1].ПравилоКО;
		ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяСтрока  = мТабИсторияПереходовПКС[мТабИсторияПереходовПКС.Количество() - 1].ПравилоКС;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПКСПерейтиНазад()

// Процедура вызывается при выборе действия "ПерейтиВперед" командной панели КоманднаяПанельПКС.
// Осуществляет переход к ПКО, соответствующему следующему ПКС из истории переходов.
//
Процедура КоманднаяПанельПКСПерейтиВперед(Кнопка)
	
	Если мТабИсторияПереходовПКС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоКО = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока;
	
	Если ПравилоКО <> Неопределено Тогда
		НайденнаяСтрока = мТабИсторияПереходовПКС.Найти(ПравилоКО, "ПравилоКО");
		Если НайденнаяСтрока <> Неопределено Тогда
			Индекс = мТабИсторияПереходовПКС.Индекс(НайденнаяСтрока);
			Если Индекс < мТабИсторияПереходовПКС.Количество() - 1 Тогда
				ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
				ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПКС[Индекс + 1].ПравилоКО;
				ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяСтрока  = мТабИсторияПереходовПКС[Индекс + 1].ПравилоКС;
			КонецЕсли;
		Иначе
			ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
			ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПКС[0].ПравилоКО;
			ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяСтрока  = мТабИсторияПереходовПКС[0].ПравилоКС;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
		ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = мТабИсторияПереходовПКС[0].ПравилоКО;
		ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяСтрока  = мТабИсторияПереходовПКС[0].ПравилоКС;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПКСПерейтиВперед()

// Процедура вызывается при выборе действия "ИсторияПКС" командной панели КоманднаяПанельПКС.
// Открывает форму списка в виде меню для выбора и дальнейшего перехода
// к соответствующему ПКО из истории переходов.
//
Процедура КоманднаяПанельПКСИсторияПКС(Кнопка)
	
	СписокИстории = Новый СписокЗначений;
	СписокИстории.Добавить("Очистить", "<Очистить историю>");
	
	Для каждого Строка из мТабИсторияПереходовПКС Цикл
		СписокИстории.Добавить(Строка.ПравилоКО, Строка.ПравилоКО.Наименование);
	КонецЦикла;
	
	ВыбранныйЭлемент = СписокИстории.ВыбратьЭлемент();
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "Очистить" Тогда
			мТабИсторияПереходовПКС.Очистить();
		Иначе
			ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница = ЭлементыФормы.ПанельВерхняя.Страницы["ПКО"];
			ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = ВыбранныйЭлемент.Значение;
			ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяСтрока  = мТабИсторияПереходовПКС.Найти(ВыбранныйЭлемент.Значение, "ПравилоКО").ПравилоКС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПКСИсторияПКС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПравилаКонвертацииСвойств

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля ПравилаКонвертацииСвойств.
//
Процедура ПравилаКонвертацииСвойствПередНачаломИзменения(Элемент, Отказ)
	
	УстановитьСпособРедактирования(Элемент);
	
	ОткрытьФормуЭлементаВСписке(Элемент, Отказ);
	
КонецПроцедуры // ПравилаКонвертацииСвойствПередНачаломИзменения()

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля ПравилаКонвертацииСвойств.
//
Процедура ПравилаКонвертацииСвойствПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ВосстановитьСпособРедактирования(Элемент);
	
	Если ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущаяКолонка.Имя = "ПолучитьИзВходящихДанных" Тогда
		
		Если Элемент.ТекущиеДанные.ПолучитьИзВходящихДанных Тогда
			
			Элемент.ТекущиеДанные.Источник = Справочники.Свойства.ПустаяСсылка();
			
		КонецЕсли;
		
	ИначеЕсли Не Элемент.ТекущиеДанные.Источник.Пустая() Тогда
		
		Элемент.ТекущиеДанные.ПолучитьИзВходящихДанных = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры // ПравилаКонвертацииСвойствПередОкончаниемРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля ПравилаКонвертацииСвойств.
//
Процедура ПравилаКонвертацииСвойствПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаТипаИсточника = "";
	СтрокаТипаПриемника = "";
	
	Если ДанныеСтроки.Источник.ЭтоГруппа Тогда
		СтрокаТипаИсточника = ДанныеСтроки.Источник.Вид;
	Иначе
		СтрокаТипаИсточника = ДанныеСтроки.Источник.ТипыСтрокой;
	КонецЕсли;
	
	Если ДанныеСтроки.Приемник.ЭтоГруппа Тогда
		СтрокаТипаПриемника = ДанныеСтроки.Приемник.Вид;
	Иначе
		СтрокаТипаПриемника = ДанныеСтроки.Приемник.ТипыСтрокой;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.ТипИсточника.УстановитьТекст(СтрокаТипаИсточника);
	ОформлениеСтроки.Ячейки.ТипПриемника.УстановитьТекст(СтрокаТипаПриемника);
	
	Если ДанныеСтроки.Отключить Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;	
		
	Иначе
		
		Если Не ПустаяСтрока(ДанныеСтроки.ИмяПараметраДляПередачи) Тогда
			
			ОформлениеСтроки.ЦветФона = WebЦвета.АкварельноСиний; 
			
		ИначеЕсли СтрокаТипаИсточника <> СтрокаТипаПриемника Тогда
			
			// цветом выделяем ПКС разных типов
			ОформлениеСтроки.ЦветФона = WebЦвета.ШелковыйОттенок; 
			
		КонецЕсли;
		
		Если ДанныеСтроки.Поиск = Истина Тогда
			ОформлениеСтроки.Шрифт = мЖирныйШрифт;			
		Иначе		
			ОформлениеСтроки.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеСтроки.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ДанныеСтроки.Источник) И ДанныеСтроки.Источник.ПометкаУдаления)
		ИЛИ (ЗначениеЗаполнено(ДанныеСтроки.Приемник) И ДанныеСтроки.Приемник.ПометкаУдаления) Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		
	КонецЕсли;
	
	ПроверитьСтрокуНаВалидность(ДанныеСтроки, ОформлениеСтроки);
	
	Если (Не ПустаяСтрока(ДанныеСтроки.АлгоритмПередВыгрузкойСвойства)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПриВыгрузкеСвойства)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПослеВыгрузкиСвойства)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПередОбработкойВыгрузки)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПослеОбработкиВыгрузки)) Тогда
		
		ОформлениеСтроки.Ячейки.Источник.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;	
		ОформлениеСтроки.Ячейки.Источник.ОтображатьКартинку = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ПравилаКонвертацииСвойствПриВыводеСтроки()

Процедура ОбработкаНачалаВыбораСвойств(Элемент, СтандартнаяОбработка, СтрокаДанныхДляОграничений)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущиеДанные.ЭтоГруппа Тогда
		Форма = Справочники.Свойства.ПолучитьФормуВыбора("ФормаВыбораГруппы", Элемент);
	Иначе
		Форма = Справочники.Свойства.ПолучитьФормуВыбора("ФормаВыбора", Элемент);
	КонецЕсли; 
	Форма.НеИзменятьРодителя        = Истина;
	
	ИмяТекущейСтраницы = ЭлементыФормы.ПанельВерхняя.ТекущаяСтраница.Имя;
	Если  ИмяТекущейСтраницы = "ПКО" Тогда
		Форма.РодительОтбор             = ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущийРодитель[СтрокаДанныхДляОграничений];
		Форма.ПараметрОтборПоВладельцу  = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущиеДанные[СтрокаДанныхДляОграничений];
		Форма.ПараметрВыборПоВладельцу  = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущиеДанные[СтрокаДанныхДляОграничений];
	ИначеЕсли ИмяТекущейСтраницы = "Синхронизация" Тогда
		Форма.РодительОтбор             = ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущийРодитель[СтрокаДанныхДляОграничений];
		Форма.ПараметрОтборПоВладельцу  = ЭлементыФормы.ПравилаКонвертацииОбъектовСинхронизация.ТекущиеДанные[СтрокаДанныхДляОграничений];
		Форма.ПараметрВыборПоВладельцу  = ЭлементыФормы.ПравилаКонвертацииОбъектовСинхронизация.ТекущиеДанные[СтрокаДанныхДляОграничений];
	КонецЕсли;
	
	Форма.НачальноеЗначениеВыбора   = Элемент.Значение;
	
	Форма.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" в поле "Источник" табличного поля ПравилаКонвертацииСвойств.
//
Процедура ПравилаКонвертацииСвойствИсточникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработкаНачалаВыбораСвойств(Элемент, СтандартнаяОбработка, "Источник");	
	
КонецПроцедуры // ПравилаКонвертацииСвойствИсточникНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" в поле "Приемник" табличного поля ПравилаКонвертацииСвойств.
//
Процедура ПравилаКонвертацииСвойствПриемникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработкаНачалаВыбораСвойств(Элемент, СтандартнаяОбработка, "Приемник");
	
КонецПроцедуры // ПравилаКонвертацииСвойствПриемникНачалоВыбора()

// Процедура - обработчик события "НачалоВыбораИзСписка" в поле "ПравилоКонвертации" табличного поля ПравилаКонвертацииСвойств.
//
Процедура ПравилаКонвертацииСвойствПравилоКонвертацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	ТекущиеДанные = ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущиеДанные;
	Элемент.СписокВыбора = ЭлементыФормы.ПравилаКонвертацииСвойств.ТекущиеДанные.ЭтотОбъект.НайтиПравилаКО(ТекущиеДанные.Владелец.Владелец, ТекущиеДанные.Источник, ТекущиеДанные.Приемник);
	
КонецПроцедуры // ПравилаКонвертацииСвойствПравилоКонвертацииНачалоВыбораИзСписка()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ НИЖНЕЙ ПАНЕЛИ (ПанельНижняя, страница ПКЗ)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельПКЗ

// Процедура вызывается при нажатии кнопки "Вверх" командной панели КоманднаяПанельПКЗ.
// Осуществляет перемещение строки табличного поля на одну позицию вверх.
//
Процедура КоманднаяПанельПКЗВверх(Кнопка)
	
	Элемент = ЭлементыФормы.ПравилаКонвертацииЗначений;
	РасстановкаЭлементов(Элемент.ТекущиеДанные.Родитель, Элемент.ТекущиеДанные.Владелец, Элемент.ТекущаяСтрока, -1);
	
КонецПроцедуры // КоманднаяПанельПКЗВверх()

// Процедура вызывается при нажатии кнопки "Вниз" командной панели КоманднаяПанельПКЗ.
// Осуществляет перемещение строки табличного поля на одну позицию вниз.
//
Процедура КоманднаяПанельПКЗВниз(Кнопка)
	
	Элемент = ЭлементыФормы.ПравилаКонвертацииЗначений;
	РасстановкаЭлементов(Элемент.ТекущиеДанные.Родитель, Элемент.ТекущиеДанные.Владелец, Элемент.ТекущаяСтрока, 1);
	
КонецПроцедуры // КоманднаяПанельПКЗВниз()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ НИЖНЕЙ ПАНЕЛИ (ПанельНижняя, страница СсылкиНаПКО)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СсылкиНаПКО

// Процедура - обработчик события "Выбор" табличного поля СсылкиНаПКО.
//
Процедура СсылкиНаПКОВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Владелец" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(ВыбраннаяСтрока.Владелец);
	КонецЕсли; 
	
КонецПроцедуры // СсылкиНаПКОВыбор()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля СсылкиНаПКО.
//
Процедура СсылкиНаПКОПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Владелец.УстановитьТекст(ДанныеСтроки.Владелец);
	
КонецПроцедуры // СсылкиНаПКОПриВыводеСтроки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ХРАНЕНИЯ ИСТОРИИ ПЕРЕХОДОВ

Процедура ДобавитьВИсториюПереходовПКС(ПравилоКО, ПравилоКС)
	
	НайденнаяСтрока = мТабИсторияПереходовПКС.Найти(ПравилоКО, "ПравилоКО");
	
	Если НайденнаяСтрока <> Неопределено Тогда
		мТабИсторияПереходовПКС.Удалить(НайденнаяСтрока);
	КонецЕсли;
	
	НоваяСтрока = мТабИсторияПереходовПКС.Добавить();
	НоваяСтрока.ПравилоКО = ПравилоКО;
	НоваяСтрока.ПравилоКС = ПравилоКС;
	
КонецПроцедуры // ДобавитьВИсториюПереходовПКС()

Процедура ДобавитьВИсториюПереходовПВД(ПравилоКО, ПравилоВД)
	
	НайденнаяСтрока = мТабИсторияПереходовПВД.Найти(ПравилоКО, "ПравилоКО");
	
	Если НайденнаяСтрока <> Неопределено Тогда
		мТабИсторияПереходовПВД.Удалить(НайденнаяСтрока);
	КонецЕсли;
	
	НоваяСтрока = мТабИсторияПереходовПВД.Добавить();
	НоваяСтрока.ПравилоКО = ПравилоКО;
	НоваяСтрока.ПравилоВД = ПравилоВД;
	
КонецПроцедуры // ДобавитьВИсториюПереходовПВД()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СИНХРОНИЗАЦИИ ПКО

Процедура ЗаполнитьТаблицуТекущейСинхронизацииОбъектов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПравилаКонвертацииСвойств.Владелец КАК ПКО,
	|	ПравилаКонвертацииСвойств.Ссылка
	|ИЗ
	|	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
	|ГДЕ
	|	ПравилаКонвертацииСвойств.Владелец.Владелец = &Владелец
	|	И ПравилаКонвертацииСвойств.ЭтоГруппа = Ложь
	|	И ПравилаКонвертацииСвойств.Поиск = Истина
	|	И ПравилаКонвертацииСвойств.ПометкаУдаления = Ложь
	|	И (ПравилаКонвертацииСвойств.Родитель = &ПустоеПКС
	|	ИЛИ  ПравилаКонвертацииСвойств.Родитель.Приемник = &ПустоеСвойство)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаКонвертацииСвойств.Владелец,
	|	ПравилаКонвертацииСвойств.Код";
	
	Запрос.УстановитьПараметр("Владелец", Конвертация);
	Запрос.УстановитьПараметр("ПустоеПКС", Справочники.ПравилаКонвертацииСвойств.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеСвойство", Справочники.Свойства.ПустаяСсылка());
	
	мТаблицаТекущегоПоиска = Запрос.Выполнить().Выгрузить();
	мТаблицаТекущегоПоиска.Индексы.Добавить("ПКО");
	
КонецПроцедуры

// Процедура выполняет заполнение текущего и предлагаемого способов
// синхронизации объектов для переданной коллекции строк дерева значений.
//
// Параметры:
//  Строки         - коллекция строк дерева значений.
//
Процедура ЗаполнитьПКССинхронизацииСтрок(Строки)
	
	СтрокиДляУдаления = Новый Соответствие;
	
	Для каждого ПКО из Строки Цикл
		
		Если ПКО.ЭтоГруппа Тогда
			
			ЗаполнитьПКССинхронизацииСтрок(ПКО.Строки);
			Если ПКО.Строки.Количество() = 0 Тогда
				СтрокиДляУдаления.Вставить(ПКО, ПКО);
			КонецЕсли;
			
		Иначе
			
			ПКО.Пометка = ЗаполнитьПКССинхронизации(ПКО.ПКО, ПКО.Приемник, ПКО.ПКСТекущие, ПКО.ТекущийСпособ, ПКО.ПКСПредлагаемые, ПКО.ПредлагаемыйСпособ, ПКО.ПКСРазличияВкл, ПКО.РазличияВкл, ПКО.ПКСРазличияВыкл, ПКО.РазличияВыкл);
			Если (ПКО.ПКСРазличияВкл.Количество() = 0) И (ПКО.ПКСРазличияВыкл.Количество() = 0) Тогда
				СтрокиДляУдаления.Вставить(ПКО, ПКО);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаДляУдаления из СтрокиДляУдаления Цикл
		Строки.Удалить(СтрокаДляУдаления.Значение);
	КонецЦикла;
	
	Для каждого ПКО из Строки Цикл
		глУстановитьПометкиРодителей(ПКО);
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет выбор текущих и предлагаемых способов синхронизации для переданного ПКО.
//
// Параметры: 
//  ПравилоКО                       - ПКО для которого необходима синхронизация.
//  ПКСТекущие                      - соответствие, которое будет заполнено текущими способами синхронизации.
//  ТекущийСпособПредставление      - строковое представление текущих способов синхронизации.
//  ПКСПредлагаемые                 - соответствие, которое будет заполнено предлагаемыми способами синхронизации.
//  ПредлагаемыйСпособПредставление - строковое представление предлагаемых способов синхронизации.
//  ПКСРазличияВкл                  - соответствие, которое будет заполнено различиями в способах синхронизации.
//  ПКСРазличияВыкл                 - соответствие, которое будет заполнено различиями в способах синхронизации.
//  РазличияПредставлениеВкл        - строковое представление различий в способах синхронизации.
//  РазличияПредставлениеВыкл       - строковое представление различий в способах синхронизации.
//
// Возвращаемое значение:
//  Истина, если между текущим и предлагаемым способом синхронизации есть различия,
//  иначе Ложь.
//
Функция ЗаполнитьПКССинхронизации(ПравилоКО, ОбъектПриемник, ПКСТекущие, ТекущийСпособПредставление, ПКСПредлагаемые, ПредлагаемыйСпособПредставление, 
	ПКСРазличияВкл, РазличияПредставлениеВкл, ПКСРазличияВыкл, РазличияПредставлениеВыкл)
	
	ПКСТекущие.Очистить();
	ПКСПредлагаемые.Очистить();
	ПКСРазличияВкл.Очистить();
	ПКСРазличияВыкл.Очистить();
	
	Результат = Ложь;
	
	//Для документов
	ДобавлятьДату  = Ложь;
	ДобавлятьНомер = Ложь;
	
	//Для справочников и плановвидовхарактеристик
	ДобавлятьКод          = Ложь;
	ДобавлятьНаименование = Ложь;
	ДобавлятьВладелец     = Ложь;
	ДобавлятьРодитель     = Ложь;
	ДобавлятьЭтоГруппа    = Ложь;
	
	Если ОбъектПриемник.Тип = Перечисления.ТипыОбъектов.Документ Тогда
		
		ДобавлятьНомер = Истина;
		Если (ОбъектПриемник.Периодичность <> "Непериодический") ИЛИ (НЕ ОбъектПриемник.КонтрольУникальности) Тогда
			ДобавлятьДату  = Истина;
		КонецЕсли;
		
	ИначеЕсли ОбъектПриемник.Тип = Перечисления.ТипыОбъектов.Справочник 
		ИЛИ ОбъектПриемник.Тип = Перечисления.ТипыОбъектов.ПланВидовХарактеристик 
		ИЛИ ОбъектПриемник.Тип = Перечисления.ТипыОбъектов.ПланВидовРасчета Тогда
		
		//Наименование
		СвойствоНаименование = Справочники.Свойства.НайтиПоНаименованию("Наименование", Истина,, ОбъектПриемник);
		Если СвойствоНаименование.Пустая() Тогда
			ДобавлятьКод          = Истина;
		Иначе
			ПравилоКС = Справочники.ПравилаКонвертацииСвойств.НайтиПоРеквизиту("Приемник", СвойствоНаименование,, ПравилоКО);
			Если ПравилоКС.Пустая() Тогда
				ДобавлятьКод      = Истина;
			ИначеЕсли НЕ ПравилоКС.Поиск Тогда
				ДобавлятьКод      = Истина;
			Иначе
				ДобавлятьНаименование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СвойствоКод = Справочники.Свойства.НайтиПоНаименованию("Код", Истина,, ОбъектПриемник);
		ЕстьКодВСправочнике = НЕ СвойствоКод.Пустая(); 
		
		Если НЕ ЕстьКодВСправочнике Тогда
			ДобавлятьНаименование = Истина;
		КонецЕсли;
		
		//КонтрольУникальности
		Если ОбъектПриемник.КонтрольУникальности
			ИЛИ ЕстьКодВСправочнике = Истина Тогда
			
			ДобавлятьКод = Истина;
			
		КонецЕсли;
		
		//Подчиненный
		Если ОбъектПриемник.Подчиненный Тогда
			
			ДобавлятьВладелец = Истина;
			
		Иначе
			
			ВладелецВПриемнике = Справочники.Свойства.НайтиПоНаименованию("Владелец", Истина,, ОбъектПриемник);
			Если Не ВладелецВПриемнике.Пустая() Тогда 
				ДобавлятьВладелец = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		//Иерархический
		Если ОбъектПриемник.Иерархический Тогда
			
			Если ОбъектПриемник.ВидИерархии <> "ИерархияГруппИЭлементов" 
				И ОбъектПриемник.Тип = Перечисления.ТипыОбъектов.ПланВидовХарактеристик Тогда
				ДобавлятьЭтоГруппа = Истина;
			Иначе
				ДобавлятьЭтоГруппа = Истина;
			КонецЕсли;
			Если ОбъектПриемник.СерииКодов = "ВПределахПодчинения" Тогда
				ДобавлятьРодитель  = Истина;
				ДобавлятьЭтоГруппа = Истина;
			КонецЕсли;
			
		Иначе
			
			ГруппаВПриемнике = Справочники.Свойства.НайтиПоНаименованию("ЭтоГруппа", Истина,, ОбъектПриемник);
			Если Не ГруппаВПриемнике.Пустая() Тогда 
				ДобавлятьЭтоГруппа = Истина;
			КонецЕсли;			
			
		КонецЕсли;
		
	ИначеЕсли ОбъектПриемник.Тип = Перечисления.ТипыОбъектов.ПланОбмена Тогда
		
		ДобавлятьКод = Истина;
		ДобавлятьНаименование = Истина;
		
		СвойствоНаименование = Справочники.Свойства.НайтиПоНаименованию("Наименование", Истина,, ОбъектПриемник);
		Если СвойствоНаименование.Пустая() Тогда
			ДобавлятьНаименование          = Ложь;
		КонецЕсли;
		
		СвойствоКод = Справочники.Свойства.НайтиПоНаименованию("Код", Истина,, ОбъектПриемник);
		Если СвойствоКод.Пустая() Тогда
			ДобавлятьКод          = Ложь;
		КонецЕсли;
		
	ИначеЕсли ОбъектПриемник.Тип = Перечисления.ТипыОбъектов.Задача Тогда
		
		ДобавлятьНомер = Истина;
		ДобавлятьДату  = Истина;
		ДобавлятьНаименование = Истина;
		
	ИначеЕсли ОбъектПриемник.Тип = Перечисления.ТипыОбъектов.БизнесПроцесс Тогда
		
		ДобавлятьНомер = Истина;
		
	КонецЕсли;
	
	ТекСпособПредставление   = "";
	ПредлСпособПредставление = "";
	РазлПредставлениеВкл     = "";
	РазлПредставлениеВыкл    = "";
	
	СтрокиТекущегоПоиска = мТаблицаТекущегоПоиска.НайтиСтроки(Новый Структура("ПКО", ПравилоКО));
	
	Для Каждого ВыборкаПКС Из СтрокиТекущегоПоиска Цикл
		ПКСТекущие.Вставить(ВыборкаПКС.Ссылка, ВыборкаПКС.Ссылка);
		ПКСРазличияВыкл.Вставить(ВыборкаПКС.Ссылка, ВыборкаПКС.Ссылка);
	КонецЦикла;
	
	//Предлагаемые
	мЗапросПоискаПКСПоВладельцуИРодителю.УстановитьПараметр("Родитель", Справочники.Свойства.ПустаяСсылка());
	мЗапросПоискаПКСПоВладельцуИРодителю.УстановитьПараметр("Владелец", ОбъектПриемник);
	
	ВыборкаСвойства = мЗапросПоискаПКСПоВладельцуИРодителю.Выполнить().Выбрать();
	
	Пока ВыборкаСвойства.Следующий() Цикл
		
		ИмяСвойства = СокрЛП(ВыборкаСвойства.Наименование);
		Если
			//ДобавлятьДату
			(ДобавлятьДату И (ИмяСвойства = "Дата" ИЛИ ИмяСвойства = "ДатаДок"))
			//ДобавлятьНомер
			ИЛИ (ДобавлятьНомер И (ИмяСвойства = "Номер" ИЛИ ИмяСвойства = "НомерДок"))
			//ДобавлятьКод
			ИЛИ (ДобавлятьКод И ИмяСвойства = "Код")
			//ДобавлятьНаименование
			ИЛИ (ДобавлятьНаименование И ИмяСвойства = "Наименование")
			//ДобавлятьВладелец
			ИЛИ (ДобавлятьВладелец И ИмяСвойства = "Владелец")
			//ДобавлятьРодитель
			ИЛИ (ДобавлятьРодитель И ИмяСвойства = "Родитель")
			//ДобавлятьЭтоГруппа
			ИЛИ (ДобавлятьЭтоГруппа И ИмяСвойства = "ЭтоГруппа") Тогда
			
			ПКСПредлагаемые.Вставить(ВыборкаСвойства.Ссылка, ВыборкаСвойства.Ссылка);
			ПредлСпособПредставление = ПредлСпособПредставление + ", " + СокрЛП(ВыборкаСвойства.Наименование);
			
			ДобавлятьВРазличияВкл = Истина;
			
			Для каждого ПКС из ПКСТекущие Цикл
				Если ПКС.Значение.Приемник = ВыборкаСвойства.Ссылка Тогда
					ДобавлятьВРазличияВкл = Ложь;
					ПКСРазличияВыкл.Удалить(ПКС.Значение);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ДобавлятьВРазличияВкл Тогда
				ПКСРазличияВкл.Вставить(ВыборкаСвойства.Ссылка, ВыборкаСвойства.Ссылка);
				Результат = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ПКС из ПКСТекущие Цикл
		ТекСпособПредставление = ТекСпособПредставление + ", " + СокрЛП(ПКС.Значение.Приемник.Наименование);
	КонецЦикла;
	Для каждого Свойство из ПКСРазличияВкл Цикл
		РазлПредставлениеВкл = РазлПредставлениеВкл + ", " + СокрЛП(Свойство.Значение.Наименование);
	КонецЦикла;
	Для каждого ПКС из ПКСРазличияВыкл Цикл
		РазлПредставлениеВыкл = РазлПредставлениеВыкл + ", " + СокрЛП(ПКС.Значение.Приемник.Наименование);
	КонецЦикла;
	
	ТекущийСпособПредставление      = Прав(ТекСпособПредставление,   СтрДлина(ТекСпособПредставление) - 2);
	ПредлагаемыйСпособПредставление = Прав(ПредлСпособПредставление, СтрДлина(ПредлСпособПредставление) - 2);
	РазличияПредставлениеВкл        = Прав(РазлПредставлениеВкл,     СтрДлина(РазлПредставлениеВкл) - 2);
	РазличияПредставлениеВыкл       = Прав(РазлПредставлениеВыкл,    СтрДлина(РазлПредставлениеВыкл) - 2);
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьПКССинхронизации()

// Функция выполняет установку флага поиска для предлагаемых способов синхронизации.
//
// Параметры: 
//  Строка         - строка дерева значений, содержащая ПКО для которого необходимо
//                   синхронизировать способы поиска.
//
// Возвращаемое значение:
//  Истина, если между текущим и предлагаемым способом синхронизации есть различия,
//  иначе Ложь.
//
Функция УстановитьФлагПоиска(Строка)
	
	Если НЕ Строка.Пометка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Строка.ЭтоГруппа Тогда
		
		Для каждого Стр из Строка.Строки Цикл
			УстановитьФлагПоиска(Стр);
		КонецЦикла;
		Возврат Ложь;
		
	КонецЕсли;
	
	Для каждого Свойство из Строка.ПКСРазличияВкл Цикл
		
		ПКС = Справочники.ПравилаКонвертацииСвойств.НайтиПоРеквизиту("Приемник", Свойство.Значение,, Строка.ПКО);
		Если НЕ ПКС.Пустая() Тогда
			ПКСОбъект = ПКС.ПолучитьОбъект();
			ПКСОбъект.Поиск = Истина;
			ПКСОбъект.Записать();
		Иначе
			НовоеПравило = Справочники.ПравилаКонвертацииСвойств.СоздатьЭлемент();
			НовоеПравило.Владелец = Строка.ПКО;
			Если Строка.Источник <> Неопределено Тогда
				СвойствоИсточника = Справочники.Свойства.НайтиПоНаименованию(СокрЛП(Свойство.Значение.Наименование), Истина, , Строка.Источник);
				Если НЕ СвойствоИсточника.Пустая() Тогда
					НовоеПравило.Источник = СвойствоИсточника;
				КонецЕсли;
			КонецЕсли;
			НовоеПравило.Приемник       = Свойство.Значение;
			НовоеПравило.Наименование   = глНаименованиеПКС(НовоеПравило);
			НовоеПравило.Поиск          = Истина;
			НовоеПравило.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ПКС из Строка.ПКСРазличияВыкл Цикл
		
		ПКСОбъект = ПКС.Значение.ПолучитьОбъект();
		ПКСОбъект.Поиск = Ложь;
		ПКСОбъект.Записать();
		
	КонецЦикла;
	
	Строка.Пометка = 0;
	глУстановитьПометки(Строка, мТекстАлгоритма, Ложь);
	
КонецФункции // УстановитьФлагПоиска()

Процедура НастройкаМенюЗапуститьПриложение()
	
	ДействияИсточник = ЭлементыФормы.КоманднаяПанельФормы.Кнопки["ЗапуститьПриложение"].Кнопки["Источник"].Кнопки;
	ДействияПриемник = ЭлементыФормы.КоманднаяПанельФормы.Кнопки["ЗапуститьПриложение"].Кнопки["Приемник"].Кнопки;
	
	Если Конвертация.Пустая() 
		ИЛИ Конвертация.ЭтоГруппа Тогда
		
		ДействияИсточник["ПредприятиеИсточник"].Доступность           = Ложь;
		ДействияИсточник["ПредприятиеМонопольноИсточник"].Доступность = Ложь;
		ДействияИсточник["КонфигураторИсточник"].Доступность          = Ложь;
		ДействияИсточник["ОтладчикИсточник"].Доступность              = Ложь;
		ДействияПриемник["ПредприятиеПриемник"].Доступность           = Ложь;
		ДействияПриемник["ПредприятиеМонопольноПриемник"].Доступность = Ложь;
		ДействияПриемник["КонфигураторПриемник"].Доступность          = Ложь;
		ДействияПриемник["ОтладчикПриемник"].Доступность              = Ложь;
		
		ДействияИсточник["ПредприятиеИсточник"].Картинка            = Новый Картинка();
		ДействияИсточник["ПредприятиеМонопольноИсточник"].Картинка  = Новый Картинка();
		ДействияИсточник["КонфигураторИсточник"].Картинка           = Новый Картинка();
		ДействияИсточник["ОтладчикИсточник"].Картинка               = Новый Картинка();
		
		ДействияПриемник["ПредприятиеПриемник"].Картинка            = Новый Картинка();
		ДействияПриемник["ПредприятиеМонопольноПриемник"].Картинка  = Новый Картинка();
		ДействияПриемник["КонфигураторПриемник"].Картинка           = Новый Картинка();
		ДействияПриемник["ОтладчикПриемник"].Картинка               = Новый Картинка();
		
	Иначе
		
		ДействияИсточник["ПредприятиеИсточник"].Доступность  = Истина;
		ДействияИсточник["КонфигураторИсточник"].Доступность = Истина;
		ДействияПриемник["ПредприятиеПриемник"].Доступность  = Истина;
		ДействияПриемник["КонфигураторПриемник"].Доступность = Истина;
		
		Если Конвертация.Источник.Приложение = Перечисления.Приложения.Предприятие80 Тогда // 8.0
			
			ДействияИсточник["ПредприятиеИсточник"].Картинка              = БиблиотекаКартинок.Предприятие80;
			ДействияИсточник["ПредприятиеМонопольноИсточник"].Картинка    = Новый Картинка();
			ДействияИсточник["ПредприятиеМонопольноИсточник"].Доступность = Ложь;
			ДействияИсточник["КонфигураторИсточник"].Картинка             = БиблиотекаКартинок.Конфигуратор80;
			ДействияИсточник["ОтладчикИсточник"].Картинка                 = Новый Картинка();
			ДействияИсточник["ОтладчикИсточник"].Доступность              = Ложь;
			
		ИначеЕсли Конвертация.Источник.Приложение = Перечисления.Приложения.УправляемоеПриложение Тогда // УП
			
			ДействияИсточник["ПредприятиеИсточник"].Картинка              = БиблиотекаКартинок.УправляемоеПриложение;
			ДействияИсточник["ПредприятиеМонопольноИсточник"].Картинка    = Новый Картинка();
			ДействияИсточник["ПредприятиеМонопольноИсточник"].Доступность = Ложь;
			ДействияИсточник["КонфигураторИсточник"].Картинка             = БиблиотекаКартинок.КонфигураторУправляемоеПриложение;
			ДействияИсточник["ОтладчикИсточник"].Картинка                 = Новый Картинка();
			ДействияИсточник["ОтладчикИсточник"].Доступность              = Ложь;
			
		Иначе // 7.7
			
			ДействияИсточник["ПредприятиеИсточник"].Картинка              = БиблиотекаКартинок.Предприятие77;
			ДействияИсточник["ПредприятиеМонопольноИсточник"].Картинка    = БиблиотекаКартинок.Предприятие77;
			ДействияИсточник["ПредприятиеМонопольноИсточник"].Доступность = Истина;
			ДействияИсточник["КонфигураторИсточник"].Картинка             = БиблиотекаКартинок.Конфигуратор77;
			ДействияИсточник["ОтладчикИсточник"].Картинка                 = БиблиотекаКартинок.Отладчик77;
			ДействияИсточник["ОтладчикИсточник"].Доступность              = Истина;
			
		КонецЕсли;
		
		Если Конвертация.Приемник.Приложение = Перечисления.Приложения.Предприятие80 Тогда //8.0
			
			ДействияПриемник["ПредприятиеПриемник"].Картинка              = БиблиотекаКартинок.Предприятие80;
			ДействияПриемник["ПредприятиеМонопольноПриемник"].Картинка    = Новый Картинка();
			ДействияПриемник["ПредприятиеМонопольноПриемник"].Доступность = Ложь;
			ДействияПриемник["КонфигураторПриемник"].Картинка             = БиблиотекаКартинок.Конфигуратор80;
			ДействияПриемник["ОтладчикПриемник"].Картинка                 = Новый Картинка();
			ДействияПриемник["ОтладчикПриемник"].Доступность              = Ложь;
			
		ИначеЕсли Конвертация.Приемник.Приложение = Перечисления.Приложения.УправляемоеПриложение Тогда // УП
			
			ДействияПриемник["ПредприятиеПриемник"].Картинка              = БиблиотекаКартинок.УправляемоеПриложение;
			ДействияПриемник["ПредприятиеМонопольноПриемник"].Картинка    = Новый Картинка();
			ДействияПриемник["ПредприятиеМонопольноПриемник"].Доступность = Ложь;
			ДействияПриемник["КонфигураторПриемник"].Картинка             = БиблиотекаКартинок.КонфигураторУправляемоеПриложение;
			ДействияПриемник["ОтладчикПриемник"].Картинка                 = Новый Картинка();
			ДействияПриемник["ОтладчикПриемник"].Доступность              = Ложь;
			
		Иначе // 7.7
			
			ДействияПриемник["ПредприятиеПриемник"].Картинка              = БиблиотекаКартинок.Предприятие77;
			ДействияПриемник["ПредприятиеМонопольноПриемник"].Картинка    = БиблиотекаКартинок.Предприятие77;
			ДействияПриемник["ПредприятиеМонопольноПриемник"].Доступность = Истина;
			ДействияПриемник["КонфигураторПриемник"].Картинка             = БиблиотекаКартинок.Конфигуратор77;
			ДействияПриемник["ОтладчикПриемник"].Картинка                 = БиблиотекаКартинок.Отладчик77;
			ДействияПриемник["ОтладчикПриемник"].Доступность              = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // НастройкаМенюЗапуститьПриложение()

Процедура УстановитьСпособРедактирования(Элемент)
	
	мТекущийСпособРедактированияСписка = Элемент.СпособРедактирования;
	
	Если Элемент.ТекущаяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно Тогда
		
		Если мТекущийСпособРедактированияСписка = СпособРедактированияСписка.ВДиалоге Тогда
			
			Элемент.СпособРедактирования = СпособРедактированияСписка.ВСписке;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСпособРедактирования()

Процедура ВосстановитьСпособРедактирования(Элемент)
	
	Если мТекущийСпособРедактированияСписка <> Неопределено И мТекущийСпособРедактированияСписка <> Элемент.СпособРедактирования Тогда
		
		Элемент.СпособРедактирования = мТекущийСпособРедактированияСписка;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьСпособРедактирования()

Функция ОпределитьНаличиеПКСПоПКО(СсылкаПКО)
	
	мЗапросВыбораПКС.УстановитьПараметр("СсылкаНаВладельца", СсылкаПКО);
	
	РезультатЗапроса = мЗапросВыбораПКС.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция ОпределитьНаличиеПКЗПоПКО(СсылкаПКО)
	
	мЗапросВыбораПКЗ.УстановитьПараметр("СсылкаНаВладельца", СсылкаПКО);
	
	РезультатЗапроса = мЗапросВыбораПКЗ.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ПравилаКонвертацииОбъектовПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаличиеПКЗ = ОпределитьНаличиеПКЗПоПКО(Элемент.ТекущиеДанные.Ссылка);
	НаличиеПКС = ОпределитьНаличиеПКСПоПКО(Элемент.ТекущиеДанные.Ссылка);
	
	Если НаличиеПКЗ Тогда
		ЭлементыФормы.ПанельНижняя.Страницы.ПКЗ.Заголовок = "Конвертация значений (*) ";
	Иначе
		ЭлементыФормы.ПанельНижняя.Страницы.ПКЗ.Заголовок = "Конвертация значений";
	КонецЕсли;
	
	Если НаличиеПКС Тогда
		ЭлементыФормы.ПанельНижняя.Страницы.ПКС.Заголовок = "Конвертация свойств (*) ";
	Иначе
		ЭлементыФормы.ПанельНижняя.Страницы.ПКС.Заголовок = "Конвертация свойств";
	КонецЕсли;
	
	Если НаличиеПКЗ И НаличиеПКС
		ИЛИ (НЕ НаличиеПКЗ И НЕ НаличиеПКС) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НаличиеПКЗ Тогда
		ЭлементыФормы.ПанельНижняя.ТекущаяСтраница =  ЭлементыФормы.ПанельНижняя.Страницы.ПКЗ;
	КонецЕсли;
	
	Если НаличиеПКС Тогда
		ЭлементыФормы.ПанельНижняя.ТекущаяСтраница =  ЭлементыФормы.ПанельНижняя.Страницы.ПКС;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПравилаВыгрузкиДанныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Отключить Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;	
		Возврат;
		
	КонецЕсли;
	
	ОформлениеСтроки.ЦветТекста = WebЦвета.Черный;
	
	Если (Не ПустаяСтрока(ДанныеСтроки.АлгоритмПередОбработкойПравила)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПослеОбработкиПравила)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПередВыгрузкойОбъекта)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПослеВыгрузкиОбъекта)) Тогда
		
		ОформлениеСтроки.Ячейки.Код.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;	
		ОформлениеСтроки.Ячейки.Код.ОтображатьКартинку = Истина;
		
	КонецЕсли;	
	
	Если НЕ ДанныеСтроки.ЭтоГруппа 
		И ДанныеСтроки.СпособОтбораДанных <> Перечисления.СпособыОтбораДанных.СтандартнаяВыборка Тогда
		
		// цветом выделяем ПКС разных типов
		ОформлениеСтроки.ЦветФона = WebЦвета.ШелковыйОттенок; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПравилаОчисткиДанныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Отключить Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;	
		Возврат;
		
	КонецЕсли;
	
	ОформлениеСтроки.ЦветТекста = WebЦвета.Черный;
	
	Если (Не ПустаяСтрока(ДанныеСтроки.АлгоритмПередОбработкойПравила)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПослеОбработкиПравила)
		ИЛИ Не ПустаяСтрока(ДанныеСтроки.АлгоритмПередУдалениемОбъекта)) Тогда
		
		ОформлениеСтроки.Ячейки.Код.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;	
		ОформлениеСтроки.Ячейки.Код.ОтображатьКартинку = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРекурсивноФлагиВыбораДляСинхронизации(ТекущиеСтроки, СписокСозданныхПКО)
	
	Для каждого ПКО из ТекущиеСтроки Цикл
		
		Если ПКО.ПКО.ЭтоГруппа ТОгда
			ПКО.Пометка = Истина;
		Иначе
			СтрокаВСписке = СписокСозданныхПКО.НайтиПоЗначению(ПКО.ПКО);
			ПКО.Пометка = СтрокаВСписке <> Неопределено;
		КонецЕсли;
		
		УстановитьРекурсивноФлагиВыбораДляСинхронизации(ПКО.Строки, СписокСозданныхПКО);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакСинхронизацииИУспискаПравил(СписокПКО) Экспорт
	
	Если СписокПКО = Неопределено 
		ИЛИ СписокПКО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// установим правила синхронизации только для объектов из списка
	ОбновитьИнформациюОПоискеОбъектов(СписокПКО);
	
	УстановитьРекурсивноФлагиВыбораДляСинхронизации(ПравилаКонвертацииОбъектовСинхронизация.Строки, СписокПКО);
	
	// установим флажки только у созданных объектов
	УстановитьПравилаСинхронизацииУВыбранныхОбъектов();
	
КонецПроцедуры

Процедура СозданиеПравилВыгрузкиДанных(ЗадаватьВопросПользователю, ОткрыватьОбработкуМодально = Ложь) Экспорт
	
	Если ЗадаватьВопросПользователю Тогда
		
		// пользователю нужно задать вопрос о рекурсивном автоматическом создании ПКС, ПКЗ
		ОтветПользователя = Вопрос("Создать правила выгрузки данных?", 
		РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
		
		Если ОтветПользователя <> КодВозвратаДиалога.Да
			ИЛИ ОтветПользователя <> КодВозвратаДиалога.Таймаут Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Обработка = Обработки.СозданиеПравилВыгрузкиДанных.Создать();
	Обработка.Конвертация = Конвертация;
	ФормаОбработки = Обработка.ПолучитьФорму(, ЭтаФорма);
	
	Если ОткрыватьОбработкуМодально Тогда
		ФормаОбработки.ОткрытьМодально();
	Иначе
		ФормаОбработки.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПравилаКонвертацииОбъектовОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	
	ТипЗначенияОбъекта = ТипЗнч(Объект);
	
	Если ТипЗначенияОбъекта = Тип("СправочникОбъект.ПравилаКонвертацииОбъектов") Тогда
		
		СписокСозданныхПКО = Новый СписокЗначений;
		РекурсивноеСозданиеНеобходимыхОбъектовДляПКО(Объект, , СписокСозданныхПКО);
		УстановитьПризнакСинхронизацииИУспискаПравил(СписокСозданныхПКО);
		
		Если НЕ ЗначениеЗаполнено(Объект.Источник) Тогда
			Возврат;
		КонецЕсли;
		
		СозданиеПравилВыгрузкиДанных(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПКОПоказатьСсылкаНаПКО(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	
	ЭлементыФормы.ПанельНижняя.Страницы.СсылкиНаПКО.Видимость = Кнопка.Пометка;
	
КонецПроцедуры

Процедура КоманднаяПанельПКОАвтоматическоеСозданиеПКСиПКЗ(Кнопка)
	
	Если (ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущиеДанные = Неопределено) 
		ИЛИ НЕ ЗначениеЗаполнено(ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущиеДанные.Ссылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектНовогоПравила = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущиеДанные.Ссылка.ПолучитьОбъект();
	СписокСозданныхПКО = Новый СписокЗначений;
	РекурсивноеСозданиеНеобходимыхОбъектовДляПКО(ОбъектНовогоПравила, , СписокСозданныхПКО);
	УстановитьПризнакСинхронизацииИУспискаПравил(СписокСозданныхПКО);	
	
КонецПроцедуры

Процедура ПравилаКонвертацииЗначенийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено
		ИЛИ ДанныеСтроки.ЭтоГруппа
		ИЛИ ДанныеСтроки.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ДанныеСтроки.Источник) И ДанныеСтроки.Источник.ПометкаУдаления)
		ИЛИ (ЗначениеЗаполнено(ДанныеСтроки.Приемник) И ДанныеСтроки.Приемник.ПометкаУдаления) Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеСтроки.Источник.Наименование <> ДанныеСтроки.Приемник.Наименование Тогда
		
		// цветом выделяем ПКС разных типов
		ОформлениеСтроки.ЦветФона = WebЦвета.ШелковыйОттенок; 
		
	КонецЕсли;
	
	ПроверитьСтрокуНаВалидность(ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры

Процедура СоздатьНовуюКонвертацию()
	
	НовыйЭлементКонвертации = Справочники.Конвертации.СоздатьЭлемент();
	ФормаКонвертации = НовыйЭлементКонвертации.ПолучитьФорму();
	
	ФормаКонвертации.Открыть();	
	
КонецПроцедуры

Процедура НоваяКонвертацияНажатие(Элемент)
	
	СоздатьНовуюКонвертацию();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборСозданияОбъекта" Тогда
		
		Если Параметр = 1 Тогда
			
			// загрузка из файла
			Обработка = Обработки.ЗагрузкаКонвертации.Создать();
			ФормаОбработки = Обработка.ПолучитьФорму();
			ФормаОбработки.Открыть();
			
		ИначеЕсли Параметр = 2 Тогда
			
			//создание новой конвертации
			СоздатьНовуюКонвертацию();
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура АвтоСозданиеВсехПравилОбмена(ЗадаватьВопросПользователю)
	
	СписокСозданныхПравил = Новый СписокЗначений;
	РезультатСоздания = АвтоСозданиеВсехВозможныхПравилОбмена(Конвертация, ЗадаватьВопросПользователю, СписокСозданныхПравил);
	
	Если НЕ РезультатСоздания Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействияПослеУспешногоСозданияВсехВозможныйПравилОбмена(СписокСозданныхПравил);
	
КонецПроцедуры

Процедура ВыполнитьДействияПослеУспешногоСозданияВсехВозможныйПравилОбмена(СписокСозданныхПравил) Экспорт
	
	// правила синхронизации устанавливаем
	УстановитьПризнакСинхронизацииИУспискаПравил(СписокСозданныхПравил);
	
	СозданиеПравилВыгрузкиДанных(Истина);	
	
КонецПроцедуры

Процедура КоманднаяПанельПКОСоздатьПрототипКонвертации(Кнопка)
	
	АвтоСозданиеВсехПравилОбмена(Истина);	
	
КонецПроцедуры

Процедура СкопироватьКонвертациюНажатие(Элемент)
	
	Если Конвертация.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОтветПользователя = Вопрос("Выполнить копирование правил обмена данными?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НоваяКонвертация = СкопироватьСПодчиненными(Конвертация, Конвертация.Родитель);
	
	Если НоваяКонвертация <> Неопределено Тогда
		
		Конвертация = НоваяКонвертация.Ссылка;
		ОбработатьУстановкуНовойКонвертации();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПКССинхронизацияСвойствОбъектов(Кнопка)
	
	ВыполнитьСинхронизациюСвойствОбъекта();	
	
КонецПроцедуры

Процедура КоманднаяПанельПКЗСинхронизацияЗначений(Кнопка)
	
	ВыполнитьСинхронизациюЗначенийОбъекта();	
	
КонецПроцедуры

Процедура КоманднаяПанельПКОСкопироватьСЗаменойКонвертации(Кнопка)
	
	// копирование правила конвертации с заменой владельца
	ТекущееПКО = ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока;
	Если ТекущееПКО.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// диалог для выбора новой конвертации
	ФормаВыбораКонвертации = Справочники.Конвертации.ПолучитьФормуВыбора(, ЭтаФорма);
	РезультатОткрытияФормы = ФормаВыбораКонвертации.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовоеПКО = СкопироватьСПодчиненными(ТекущееПКО, Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка(), РезультатОткрытияФормы);
	ОткрытьЗначение(НовоеПКО);
	
КонецПроцедуры

Процедура ПроверкаКонвертацииНажатие(Элемент)
	
	ОткрытьФормуПроверкиКонвертации(Конвертация, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельПКОПомощь(Кнопка)
	
	ПоказатьИнформациюОБыстромОсвоении("СозданиеПравилОбменаДанными");
	
КонецПроцедуры

Процедура КоманднаяПанельПВДПомощь(Кнопка)
	
	ПоказатьИнформациюОБыстромОсвоении("ПравилаВыгрузкиДанных");	
	
КонецПроцедуры

Процедура КоманднаяПанельПКСПомощь(Кнопка)
	
	ПоказатьИнформациюОБыстромОсвоении("ПодробноеЗнакомствоСПравиламиКонвертацииСвойств");
	
КонецПроцедуры

Процедура КоманднаяПанельПОДПомощь(Кнопка)
	
	ПоказатьИнформациюОБыстромОсвоении("ПравилаОчисткиДанных");
	
КонецПроцедуры

Процедура КоманднаяПанельАлгоритмыПомощь(Кнопка)
	
	ПоказатьИнформациюОБыстромОсвоении("ЧтоТакоеАлгоритмыИЗапросы");
	
КонецПроцедуры

Процедура КоманднаяПанельЗапросыПомощь(Кнопка)
	
	ПоказатьИнформациюОБыстромОсвоении("ЧтоТакоеАлгоритмыИЗапросы");
	
КонецПроцедуры

Процедура КоманднаяПанельПКОСинхронизацияПомощь(Кнопка)
	
	ПоказатьИнформациюОБыстромОсвоении("ПравилаПоискаОбъектов");
	
КонецПроцедуры

// Процедура вызывается при выборе действия "СинхронизацияСвойствОбъектов" командной панели КоманднаяПанельПКО.
// Открывает обработку "АвтонастройкаПравилКонвертацииСвойств".
//
Процедура КоманднаяПанельПКОСинхронизацияСвойствОбъектов(Кнопка)
	
	ВыполнитьСинхронизациюСвойствОбъекта();	
	
КонецПроцедуры // КоманднаяПанельПКОСинхронизацияСвойствОбъектов()

// Процедура вызывается при выборе действия "СинхронизацияЗначенийОбъектов" командной панели КоманднаяПанельПКО.
// Открывает обработку "АвтонастройкаПравилКонвертацииЗначений".
//
Процедура КоманднаяПанельПКОСинхронизацияЗначенийОбъектов(Кнопка)
	
	ВыполнитьСинхронизациюЗначенийОбъекта();
	
КонецПроцедуры // КоманднаяПанельПКОСинхронизацияЗначенийОбъектов()

Процедура КоманднаяПанельФормыИзменениеПравил(Кнопка)
	
	ОткрытьФормуИзмененийКонвертации(Конвертация, ЭтаФорма);	
	
КонецПроцедуры

Процедура КоманднаяПанельФормыСравнениеИОбъединениеПравилОбмена(Кнопка)
	
	ОткрытьФормуСравненияИОбъединенияКонвертации(Конвертация, ЭтаФорма);
	
КонецПроцедуры

Процедура ВыполнитьРекурсивноеОтключениеВключениеДляПравила(СсылкаНаПравило, ИмяТаблицыДляОбработки, ФлагУстановки)
	
	Если Не ЗначениеЗаполнено(СсылкаНаПравило) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНаПравило.ЭтоГруппа Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Различные
		|	Правила.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + ИмяТаблицыДляОбработки + " КАК Правила
		|ГДЕ
		|	Правила.Ссылка В Иерархии (&СсылкаНаПравило)
		|	И Правила.Отключить <> &ФлагУстановки";
		
		Запрос.УстановитьПараметр("СсылкаНаПравило", СсылкаНаПравило);
		Запрос.УстановитьПараметр("ФлагУстановки", ФлагУстановки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Отключить = ФлагУстановки;
			Объект.Записать();
			
		КонецЦикла;
		
	Иначе
		
		Объект = СсылкаНаПравило.ПолучитьОбъект();
		Объект.Отключить = ФлагУстановки;
		Объект.Записать();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПВДОтключитьПравилаРекурсивно(Кнопка)
	
	// отключить правило рекурсивно
	Если ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРекурсивноеОтключениеВключениеДляПравила(ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущиеДанные.ссылка, "ПравилаВыгрузкиДанных", Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельПВДПодключитьПравилоРекурсивно(Кнопка)
	
	//включить правило рекурсивно
	Если ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРекурсивноеОтключениеВключениеДляПравила(ЭлементыФормы.ПравилаВыгрузкиДанных.ТекущиеДанные.ссылка, "ПравилаВыгрузкиДанных", Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельПОДОтключитьПравилаРекурсивно(Кнопка)
	
	// отключить правило рекурсивно
	Если ЭлементыФормы.ПравилаОчисткиДанных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРекурсивноеОтключениеВключениеДляПравила(ЭлементыФормы.ПравилаОчисткиДанных.ТекущиеДанные.ссылка, "ПравилаОчисткиДанных", Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельПОДПодключитьПравилоРекурсивно(Кнопка)
	
	// включить правило рекурсивно
	Если ЭлементыФормы.ПравилаОчисткиДанных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРекурсивноеОтключениеВключениеДляПравила(ЭлементыФормы.ПравилаОчисткиДанных.ТекущиеДанные.ссылка, "ПравилаОчисткиДанных", Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельПКСОтключитьПравилаРекурсивно(Кнопка)
	
	Для Каждого ВыделеннаяСтрокаТабличногоПоля ИЗ ЭлементыФормы.ПравилаКонвертацииСвойств.ВыделенныеСтроки Цикл
		
		ВыполнитьРекурсивноеОтключениеВключениеДляПравила(ВыделеннаяСтрокаТабличногоПоля.Ссылка, "ПравилаКонвертацииСвойств", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельПКСПодключитьПравилоРекурсивно(Кнопка)
	
	Для Каждого ВыделеннаяСтрокаТабличногоПоля ИЗ ЭлементыФормы.ПравилаКонвертацииСвойств.ВыделенныеСтроки Цикл
		
		ВыполнитьРекурсивноеОтключениеВключениеДляПравила(ВыделеннаяСтрокаТабличногоПоля.Ссылка, "ПравилаКонвертацииСвойств", Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСтрокуНаВалидность(ДанныеСтроки, ОформлениеСтроки)
	
	Если (ЗначениеЗаполнено(ДанныеСтроки.Источник) И (ДанныеСтроки.Источник.Владелец <> ДанныеСтроки.Владелец.Источник)) 
		ИЛИ (ЗначениеЗаполнено(ДанныеСтроки.Приемник) И (ДанныеСтроки.Приемник.Владелец <> ДанныеСтроки.Владелец.Приемник)) Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		
	КонецЕсли;
	
КонецПроцедуры

//Интерфейс отладки обработчиков

Процедура КоманднаяПанельФормыСкопироватьОбработчикиВыгрузки(Кнопка)
	
	ТолькоИспользуемые = глТекущийПользователь.ВыгружатьТолькоИспользуемыеОбработчики;
	ВыгрузитьКодОбработчиков(Конвертация, Истина, ТолькоИспользуемые, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыСкопироватьОбработчикиЗагрузки(Кнопка)
	
	ТолькоИспользуемые = глТекущийПользователь.ВыгружатьТолькоИспользуемыеОбработчики;
	ВыгрузитьКодОбработчиков(Конвертация, Ложь, ТолькоИспользуемые, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВставитьОбработчики(Кнопка)
	
	ЗагрузитьКодОбработчиков(Конвертация, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПолнаяВыгрузка(Кнопка)
	
	ОткрытьЗначение(глТекущийПользователь);
	
КонецПроцедуры

//
//benony
Процедура bnНастройкиГитфлоуНажатие(Кнопка)
	bnГитфлоу.НастройкиГитфлоуНажатие(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мТекстАлгоритма = "
|Если      ТекСтрока.Строки.Количество() Тогда
|	Отказ = Ложь;
|ИначеЕсли (ТекСтрока.ПКСРазличияВкл.Количество()) ИЛИ (ТекСтрока.ПКСРазличияВыкл.Количество() И Параметры) Тогда
|	Отказ = Ложь;
|Иначе
|	Отказ = Истина;
|КонецЕсли;";

мЗапросВыбораПКС = Новый Запрос;	
мЗапросВыбораПКС.Текст = "ВЫБРАТЬ Первые 1
|	ПравилаКонвертацииСвойств.Ссылка
|ИЗ
|	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
|ГДЕ
|	ПравилаКонвертацииСвойств.Владелец = &СсылкаНаВладельца";

мЗапросВыбораПКЗ = Новый Запрос;	
мЗапросВыбораПКЗ.Текст = "ВЫБРАТЬ Первые 1
|	ПравилаКонвертацииЗначений.Ссылка
|ИЗ
|	Справочник.ПравилаКонвертацииЗначений КАК ПравилаКонвертацииЗначений
|ГДЕ
|	ПравилаКонвертацииЗначений.Владелец = &СсылкаНаВладельца";


ПравилаКонвертацииСвойств.Колонки.Добавить("ПометкаУдаления");	
ПравилаКонвертацииСвойств.Колонки.Добавить("Отключить");
ПравилаКонвертацииСвойств.Колонки.Добавить("Поиск");
ПравилаКонвертацииСвойств.Колонки.Добавить("Источник");
ПравилаКонвертацииСвойств.Колонки.Добавить("Приемник");
ПравилаКонвертацииСвойств.Колонки.Добавить("ИмяПараметраДляПередачи");

Для Каждого ИмяОбработчика Из ПолучитьМассивИменОбработчиков("ГруппаСвойств") Цикл
	ПравилаКонвертацииСвойств.Колонки.Добавить(ИмяОбработчика);
КонецЦикла;

ПравилаКонвертацииОбъектов.Колонки.Добавить("СинхронизироватьПоИдентификатору");
ПравилаКонвертацииОбъектов.Колонки.Добавить("ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли");
ПравилаКонвертацииОбъектов.Колонки.Добавить("Источник");
ПравилаКонвертацииОбъектов.Колонки.Добавить("Приемник");
Для Каждого ИмяОбработчика Из ПолучитьМассивИменОбработчиков("ПравилаКонвертацииОбъектов") Цикл
	ПравилаКонвертацииОбъектов.Колонки.Добавить(ИмяОбработчика);
КонецЦикла;


ПравилаВыгрузкиДанных.Колонки.Добавить("Код");
ПравилаВыгрузкиДанных.Колонки.Добавить("Отключить");
ПравилаВыгрузкиДанных.Колонки.Добавить("СпособОтбораДанных");
Для Каждого ИмяОбработчика Из ПолучитьМассивИменОбработчиков("ПравилаВыгрузкиДанных") Цикл
	ПравилаВыгрузкиДанных.Колонки.Добавить(ИмяОбработчика);
КонецЦикла;

ПравилаОчисткиДанных.Колонки.Добавить("Код");
ПравилаОчисткиДанных.Колонки.Добавить("Отключить");
Для Каждого ИмяОбработчика Из ПолучитьМассивИменОбработчиков("ПравилаОчисткиОбъектов") Цикл
	ПравилаОчисткиДанных.Колонки.Добавить(ИмяОбработчика);
КонецЦикла;

ПравилаКонвертацииЗначений.Колонки.Добавить("Источник");
ПравилаКонвертацииЗначений.Колонки.Добавить("Приемник");

ПравилаОчисткиДанных.Колонки.Добавить("Отключить");

мЖирныйШрифт = Новый Шрифт(,, Истина);	

мФормаПравила = Неопределено;

мОбработкаСохраненияПравил = Неопределено;

мЗапросПоискаПКСПоВладельцуИРодителю = Новый Запрос();
мЗапросПоискаПКСПоВладельцуИРодителю.Текст = "ВЫБРАТЬ 
|	Спр.Ссылка,
|	Спр.Наименование
|ИЗ
|	Справочник.Свойства КАК Спр
|ГДЕ
|	Спр.Родитель = &Родитель
|	И Спр.Владелец = &Владелец
|	И Спр.ЭтоГруппа = Ложь
|	И Спр.ПометкаУдаления = Ложь
|";							 

