
Функция ПолучитьОграниченияЗапросаДляВыбораОбъектовУдаления(ИмяТаблицыЗапроса)
	
	Если ПКСПКЗИсточникПриемникПомеченыНаУдаление
		И ПКСПКЗИсточникПриемникСПрефиксомУдалить Тогда
		
		Возврат    " (" + ИмяТаблицыЗапроса + ".Источник.ПометкаУдаления = ИСТИНА
	                |			ИЛИ " + ИмяТаблицыЗапроса + ".Приемник.ПометкаУдаления = ИСТИНА
				    |			ИЛИ " + ИмяТаблицыЗапроса + ".Источник.Наименование Подобно ""Удалить%""
				    |			ИЛИ " + ИмяТаблицыЗапроса + ".Приемник.Наименование Подобно ""Удалить%""  )";
		
	ИначеЕсли ПКСПКЗИсточникПриемникПомеченыНаУдаление Тогда
		
		Возврат    " (" + ИмяТаблицыЗапроса + ".Источник.ПометкаУдаления = ИСТИНА
	                |			ИЛИ " + ИмяТаблицыЗапроса + ".Приемник.ПометкаУдаления = ИСТИНА )";
		
	Иначе
				   
		Возврат    " (" + ИмяТаблицыЗапроса + ".Источник.Наименование Подобно ""Удалить%""
				    |			ИЛИ " + ИмяТаблицыЗапроса + ".Приемник.Наименование Подобно ""Удалить%"" )";		   
		
	КонецЕсли;
	
КонецФункции

Процедура ПоискПКОИсточникИПриемникПомеченыНаУдаление()
	
	Состояние("Поиск ПКО у которых источник или приемник помечены на удаление");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаКонвертацииОбъектов.Ссылка КАК ссылка,
				   |    ПравилаКонвертацииОбъектов.Источник.ПометкаУдаления КАК ПометкаИсточник,
				   |    ПравилаКонвертацииОбъектов.Приемник.ПометкаУдаления КАК ПометкаПриемник
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	               |ГДЕ
	               |	ПравилаКонвертацииОбъектов.Владелец = &Владелец
	               |	И ПравилаКонвертацииОбъектов.ПометкаУдаления = ЛОЖЬ
	               |	И " + ПолучитьОграниченияЗапросаДляВыбораОбъектовУдаления("ПравилаКонвертацииОбъектов") + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
				   
	Запрос.УстановитьПараметр("Владелец", Конвертация);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ЭтоПравилоСУдалением = СтрокаТаблицы.ПометкаИсточник = Истина
			ИЛИ СтрокаТаблицы.ПометкаПриемник = Истина;
		
		Если АвтоматическиПомечатьНаУдалениеНеКорректныеПравила Тогда
			
			ОбъектПравила = СтрокаТаблицы.Ссылка.ПолучитьОбъект(); 
			ОбъектПравила.ПометкаУдаления = Истина;
			ОбъектПравила.Записать();
			
		КонецЕсли;
		
		Если ЭтоПравилоСУдалением Тогда
			
			ДобавитьСтрокуВдеревоРезультатовПКС(СтрокаТаблицы.Ссылка, Неопределено, "Источник или приемник помечен на удаление");
						
		Иначе
			
			ДобавитьСтрокуВдеревоРезультатовПКС(СтрокаТаблицы.Ссылка, Неопределено, "Префикс УДАЛИТЬ в источнике или приемнике");
			
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ПоискПКСИсточникИПриемникПомеченыНаУдаление()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаКонвертацииСвойств.Ссылка,
	               |	ПравилаКонвертацииСвойств.Владелец,
				   |	ПравилаКонвертацииСвойств.Источник.ПометкаУдаления КАК ПометкаИсточник,
				   |    ПравилаКонвертацииСвойств.Приемник.ПометкаУдаления КАК ПометкаПриемник
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
	               |ГДЕ
	               |	ПравилаКонвертацииСвойств.Владелец.Владелец = &Владелец
	               |	И ПравилаКонвертацииСвойств.ПометкаУдаления = ЛОЖЬ
	               |	И " + ПолучитьОграниченияЗапросаДляВыбораОбъектовУдаления("ПравилаКонвертацииСвойств") + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПравилаКонвертацииСвойств.Владелец,
	               |	ПравилаКонвертацииСвойств.Наименование";
				   
	Запрос.УстановитьПараметр("Владелец", Конвертация);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ЭтоПравилоСУдалением = СтрокаТаблицы.ПометкаИсточник = Истина
			ИЛИ СтрокаТаблицы.ПометкаПриемник = Истина;
		
		Если АвтоматическиПомечатьНаУдалениеНеКорректныеПравила Тогда
			
			ОбъектПравила = СтрокаТаблицы.Ссылка.ПолучитьОбъект(); 
			ОбъектПравила.ПометкаУдаления = Истина;
			ОбъектПравила.Отключить = Истина;
			ОбъектПравила.Записать();
			
		КонецЕсли;
		
		Если ЭтоПравилоСУдалением Тогда
			ДобавитьСтрокуВдеревоРезультатовПКС(СтрокаТаблицы.Владелец, СтрокаТаблицы.Ссылка, "Источник или приемник помечен на удаление");
		Иначе
			ДобавитьСтрокуВдеревоРезультатовПКС(СтрокаТаблицы.Владелец, СтрокаТаблицы.Ссылка, "Префикс УДАЛИТЬ в источнике или приемнике");
		КонецЕсли;
		
	КонецЦикла;	
			
КонецПроцедуры

Процедура ПоискПКЗИсточникИПриемникПомеченыНаУдаление()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаКонвертацииЗначений.Ссылка,
	               |	ПравилаКонвертацииЗначений.Владелец,
				   |	ПравилаКонвертацииЗначений.Источник.ПометкаУдаления КАК ПометкаИсточник,
				   |    ПравилаКонвертацииЗначений.Приемник.ПометкаУдаления КАК ПометкаПриемник
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииЗначений КАК ПравилаКонвертацииЗначений
	               |ГДЕ
	               |	ПравилаКонвертацииЗначений.Владелец.Владелец = &Владелец
	               |	И ПравилаКонвертацииЗначений.ПометкаУдаления = ЛОЖЬ
	               |	И " + ПолучитьОграниченияЗапросаДляВыбораОбъектовУдаления("ПравилаКонвертацииЗначений") + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПравилаКонвертацииЗначений.Владелец,
	               |	ПравилаКонвертацииЗначений.Наименование";
				   
	Запрос.УстановитьПараметр("Владелец", Конвертация);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ЭтоПравилоСУдалением = СтрокаТаблицы.ПометкаИсточник = Истина
			ИЛИ СтрокаТаблицы.ПометкаПриемник = Истина;
		
		Если АвтоматическиПомечатьНаУдалениеНеКорректныеПравила Тогда
			
			ОбъектПравила = СтрокаТаблицы.Ссылка.ПолучитьОбъект(); 
			ОбъектПравила.ПометкаУдаления = Истина;
			ОбъектПравила.Записать();
			
		КонецЕсли;
		
		Если ЭтоПравилоСУдалением Тогда
			ДобавитьСтрокуВдеревоРезультатовПКС(СтрокаТаблицы.Владелец, СтрокаТаблицы.Ссылка, "Источник или приемник помечен на удаление");
		Иначе
			ДобавитьСтрокуВдеревоРезультатовПКС(СтрокаТаблицы.Владелец, СтрокаТаблицы.Ссылка, "Префикс УДАЛИТЬ в источнике или приемнике");
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ОтобразитьПравилаДляАвтоматическогоСозданияПКСПКЗ()
	
	Состояние("Поиск ПКС, ПКЗ для автоматического создания, несопоставленных свойств и значений");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаКонвертацииОбъектов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	               |ГДЕ
	               |	ПравилаКонвертацииОбъектов.Владелец = &Владелец
				   |	И ПравилаКонвертацииОбъектов.ЭтоГруппа = Ложь
				   |	И ПравилаКонвертацииОбъектов.Источник <> &ПустойОбъект
				   |	И ПравилаКонвертацииОбъектов.Приемник <> &ПустойОбъект";
				   
	Запрос.УстановитьПараметр("Владелец", Конвертация);
	Запрос.УстановитьПараметр("ПустойОбъект", Справочники.Объекты.ПустаяСсылка());
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ОбработкаПрерыванияПользователя();
		
		ТаблицаСвойств = Новый ТаблицаЗначений;
		ТаблицаСвойств.Колонки.Добавить("ВидСвойстваДляПоиска");
		
		Для Каждого СтрокаОсновнойТаблицы Из ТаблицаВидыСвойствДляСравнения Цикл
			
			Если Не СтрокаОсновнойТаблицы.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанных = ТаблицаСвойств.Добавить();
			СтрокаДанных.ВидСвойстваДляПоиска = СтрокаОсновнойТаблицы.ВидСвойстваДляПоиска;
			
		КонецЦикла;
		
		ПоказатьИнформациюПКСПКЗПоПравилу(ДанныеРезультатовПоиска, СтрокаТаблицы.Ссылка, ТаблицаСвойств, 
			ОтобразитьСписокПравилПКСПКЗКоторыеМогутБытьСозданыАвтоматически, ОтобразитьНеСопоставленныеИсточники, ОтобразитьНеСопоставленныеПриемники);	
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если Конвертация.Пустая() Тогда
		Предупреждение("Не выбрана конвертация для тестирования.");
		Возврат;
	КонецЕсли;
	
	// выполнение проверок
	Если ПКСПКЗИсточникПриемникПомеченыНаУдаление
		ИЛИ ПКСПКЗИсточникПриемникСПрефиксомУдалить
		ИЛИ ОтобразитьПКССМножественнымТипомИсточника
		ИЛИ ОтобразитьПКССМножественнымТипомПриемника
		ИЛИ ОтобразитьПКССИПКОНеСовместимыеПоТипам Тогда
				
		Если ДанныеПоискаПКС.Колонки.Количество() = 0 Тогда
		
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ПравилаКонвертацииЗначений"));
			Массив.Добавить(Тип("СправочникСсылка.ПравилаКонвертацииСвойств"));
			Массив.Добавить(Тип("СправочникСсылка.ПравилаКонвертацииОбъектов"));
	        ОписаниеТиповС = Новый ОписаниеТипов(Массив);

			ДанныеПоискаПКС.Колонки.Добавить("Объект", ОписаниеТиповС,  "Объект",    25);
			ДанныеПоискаПКС.Колонки.Добавить("Комментарий");
			
		КонецЕсли;
		
		ДанныеПоискаПКС.Строки.Очистить();
		
		Если ПКСПКЗИсточникПриемникПомеченыНаУдаление
			ИЛИ ПКСПКЗИсточникПриемникСПрефиксомУдалить Тогда
			
			// поиск помеченных на удаление реквизитов
			ПоискПКОИсточникИПриемникПомеченыНаУдаление();
			ПоискПКСИсточникИПриемникПомеченыНаУдаление();	
			ПоискПКЗИсточникИПриемникПомеченыНаУдаление();
			
		КонецЕсли;
		
		Если ОтобразитьПКССМножественнымТипомИсточника
			ИЛИ ОтобразитьПКССМножественнымТипомПриемника
			ИЛИ ОтобразитьПКССИПКОНеСовместимыеПоТипам Тогда
			
			// проверка корректности указанных ПКО в ПКС
			ВыполнитьПоискНеКорректноУказанныхПКОВПКС();
			
		КонецЕсли;
		
		Если ДанныеПоискаПКС.Строки.Количество() > 0 Тогда
		
			ФормаРезультатов = ПолучитьФорму("ФормаПоискаПКС", ЭтаФорма);
			ФормаРезультатов.Открыть();
			
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЕсли;	
		
	Если ОтобразитьСписокПравилПКСПКЗКоторыеМогутБытьСозданыАвтоматически
		ИЛИ ОтобразитьНеСопоставленныеИсточники
		ИЛИ ОтобразитьНеСопоставленныеПриемники Тогда
		
		ИнициализироватьДанныеРезультатовПоиска();
		ОтобразитьПравилаДляАвтоматическогоСозданияПКСПКЗ();
		ОткрытьФормуСРезультатамиПоискаДанных();
		
		ОбработкаПрерыванияПользователя();
		
	КонецЕсли;
	
	Предупреждение("Тестирование завершено.", 10);
	
КонецПроцедуры

Функция НайтиПКОВДереве(ПКО)
	
	СтрокаДобавления = ДанныеПоискаПКС.Строки.Найти(ПКО, "Объект");
	Если СтрокаДобавления = Неопределено Тогда
	
		СтрокаДобавления = ДанныеПоискаПКС.Строки.Добавить();
		СтрокаДобавления.Объект = ПКО;
		
	КонецЕсли;
	
	Возврат СтрокаДобавления;
		
КонецФункции

Процедура ДобавитьСтрокуВдеревоРезультатовПКС(ПКО, ПКС, Комментарий)
	
	СтрокаВладелец = НайтиПКОВДереве(ПКО);
	
	Если ПКС = Неопределено Тогда
		
		СтрокаДобавления = СтрокаВладелец;
		
	Иначе
	
		СтрокаДобавления = СтрокаВладелец.Строки.Найти(ПКС, "Объект");
		
		Если СтрокаДобавления = Неопределено Тогда
		
			СтрокаДобавления = СтрокаВладелец.Строки.Добавить();
			СтрокаДобавления.Объект = ПКС;
			СтрокаДобавления.Комментарий = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДобавления.Комментарий) Тогда
		СтрокаДобавления.Комментарий = СтрокаДобавления.Комментарий + ", ";
	Иначе
		СтрокаДобавления.Комментарий = "";
	КонецЕсли;
	
	СтрокаДобавления.Комментарий = СтрокаДобавления.Комментарий + Комментарий;	
	
КонецПроцедуры

Процедура ВыполнитьПоискНеКорректноУказанныхПКОВПКС()
	
	Если ОтобразитьПКССМножественнымТипомИсточника Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Различные
		               |	ПравилаКонвертацииСвойств.Ссылка КАК ПКС,
					   |	ПравилаКонвертацииСвойств.Владелец КАК ПКО,
					   |	Количество(*) КАК КоличествоТиповИсточника
		               |ИЗ
		               |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
					   |		Левое соединение Справочник.Свойства.Типы КАК Типы
					   |			ПО Типы.Ссылка = ПравилаКонвертацииСвойств.Источник
		               |ГДЕ
		               |	ПравилаКонвертацииСвойств.Владелец.Владелец = &Конвертация
		               |	И ПравилаКонвертацииСвойств.ПравилоКонвертации <> &ПустоеПКО
					   |
					   |Сгруппировать ПО ПравилаКонвертацииСвойств.Ссылка, ПравилаКонвертацииСвойств.Владелец
					   |
					   |Имеющие Количество(*) > 1
					   |
					   |Упорядочить по ПравилаКонвертацииСвойств.Владелец";
					   
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		Запрос.УстановитьПараметр("ПустоеПКО", Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка());
		
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
			
			ДобавитьСтрокуВдеревоРезультатовПКС(СтрокаТаблицы.ПКО, СтрокаТаблицы.ПКС, "Несколько типов ИСТОЧНИКА: " + Строка(СтрокаТаблицы.КоличествоТиповИсточника));			
						
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОтобразитьПКССМножественнымТипомПриемника Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПравилаКонвертацииСвойств.Ссылка КАК ПКС,
		               |	ПравилаКонвертацииСвойств.Владелец КАК ПКО,
		               |	КОЛИЧЕСТВО(*) КАК КоличествоТиповПриемника
		               |ИЗ
		               |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Свойства.Типы КАК Типы
		               |		ПО (Типы.Ссылка = ПравилаКонвертацииСвойств.Приемник)
		               |ГДЕ
		               |	ПравилаКонвертацииСвойств.Владелец.Владелец = &Конвертация
		               |	И ПравилаКонвертацииСвойств.ПравилоКонвертации <> &ПустоеПКО
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПравилаКонвертацииСвойств.Ссылка,
		               |	ПравилаКонвертацииСвойств.Владелец
		               |
		               |ИМЕЮЩИЕ
		               |	КОЛИЧЕСТВО(*) > 1
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПКО";
					   
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		Запрос.УстановитьПараметр("ПустоеПКО", Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка());
		
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
			
			ДобавитьСтрокуВдеревоРезультатовПКС(СтрокаТаблицы.ПКО, СтрокаТаблицы.ПКС, "Несколько типов ПРИЕМНИКА: " + Строка(СтрокаТаблицы.КоличествоТиповПриемника));			
						
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОтобразитьПКССИПКОНеСовместимыеПоТипам Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПравилаКонвертацииСвойств.Ссылка КАК ПКС,
		               |	ПравилаКонвертацииСвойств.Владелец КАК ПКО
		               |ИЗ
		               |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
		               |ГДЕ
		               |	ПравилаКонвертацииСвойств.Владелец.Владелец = &Конвертация
		               |	И ПравилаКонвертацииСвойств.ПравилоКонвертации <> &ПустоеПКО
		               |	И ПравилаКонвертацииСвойств.Источник <> &ПустоеСвойство
		               |	И ПравилаКонвертацииСвойств.Приемник <> &ПустоеСвойство
		               |	И ((НЕ ПравилаКонвертацииСвойств.Источник.ТипыСтрокой ПОДОБНО ПравилаКонвертацииСвойств.ПравилоКонвертации.ТипИсточника)
		               |			ИЛИ (НЕ ПравилаКонвертацииСвойств.Приемник.ТипыСтрокой ПОДОБНО ПравилаКонвертацииСвойств.ПравилоКонвертации.ТипПриемника))
		               |	И ПравилаКонвертацииСвойств.ТипИсточника <> """"
		               |	И ПравилаКонвертацииСвойств.ТипПриемника <> """"
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПКО";
					   
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		Запрос.УстановитьПараметр("ПустоеПКО", Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустоеСвойство", Справочники.Свойства.ПустаяСсылка());
		
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
			
			ДобавитьСтрокуВдеревоРезультатовПКС(СтрокаТаблицы.ПКО, СтрокаТаблицы.ПКС, "Несовпадение типов источника или приемника в ПКС и правиле конвертации объектов.");
						
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьДанныеРезультатоВПоиска() Экспорт
	
	ИнициализироватьДанныеРезультатовПоиска();
	ОтобразитьПравилаДляАвтоматическогоСозданияПКСПКЗ();	
	
КонецПроцедуры

Процедура ИнициализироватьДанныеРезультатовПоиска()
	
	Если ДанныеРезультатовПоиска.Колонки.Количество() = 0 Тогда
		ДанныеРезультатовПоиска.Колонки.Добавить("ПКО", ОписаниеТипа("СправочникСсылка.ПравилаКонвертацииОбъектов"),  "ПКО",    25);
        ДанныеРезультатовПоиска.Колонки.Добавить("Информация");
		ДанныеРезультатовПоиска.Колонки.Добавить("ПодлежитУдалению", ОписаниеТипа("Булево"));
	КонецЕсли;
	
	ДанныеРезультатовПоиска.Строки.Очистить();
	
КонецПроцедуры

Процедура ОткрытьФормуСРезультатамиПоискаДанных()
	
	ФормаРезультатовПоиска = ПолучитьФорму("ФормаПредставленияРезультатов", ЭтаФорма);
	ФормаРезультатовПоиска.Открыть();
	
КонецПроцедуры

Процедура ПроизвестиПервоначальнуюИнициализациюДляПроверок()
	
	ПКСПКЗИсточникПриемникПомеченыНаУдаление = Истина;
	АвтоматическиПомечатьНаУдалениеНеКорректныеПравила = Истина;
	
	Если ТаблицаВидыСвойствДляСравнения.Количество() = 0 Тогда
		
		МетаданныеПеречисления = Метаданные.перечисления.ВидыСвойств;
		
		Для Каждого СтрокаЗнач Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
			
			ЗначениеПеречисления = Перечисления.ВидыСвойств[СтрокаЗнач.Имя];
			
			СтрокаТаблицы = ТаблицаВидысвойствДляСравнения.Добавить();
			СтрокаТаблицы.ВидСвойстваДляПоиска = ЗначениеПеречисления;
			
			СтрокаТаблицы.Пометка = 
				(СтрокаТаблицы.ВидСвойстваДляПоиска = Перечисления.ВидыСвойств.Свойство)
				ИЛИ (СтрокаТаблицы.ВидСвойстваДляПоиска = Перечисления.ВидыСвойств.Реквизит)
				ИЛИ (СтрокаТаблицы.ВидСвойстваДляПоиска = Перечисления.ВидыСвойств.Измерение)
				ИЛИ (СтрокаТаблицы.ВидСвойстваДляПоиска = Перечисления.ВидыСвойств.Ресурс)
				ИЛИ (СтрокаТаблицы.ВидСвойстваДляПоиска = Перечисления.ВидыСвойств.ТабличнаяЧасть);
			
		КонецЦикла;			
		
	Конецесли;
		
КонецПроцедуры

Процедура ДоступностьТаблицыСвойствДляСравнения()
	
	ЭлементыФормы.ТаблицаВидысвойствДляСравнения.Доступность = ОтобразитьСписокПравилПКСПКЗКоторыеМогутБытьСозданыАвтоматически
		ИЛИ ОтобразитьНеСопоставленныеИсточники
		ИЛИ ОтобразитьНеСопоставленныеПриемники;
		
	ЭлементыФормы.КоманднаяПанельТаблицаВидыСвойствДляСравнения.Доступность = ЭлементыФормы.ТаблицаВидысвойствДляСравнения.Доступность;	
	
КонецПроцедуры

Процедура ОтобразитьСписокПравилПКСПКЗКоторыеМогутБытьСозданыАвтоматическиПриИзменении(Элемент)
	
	ДоступностьТаблицыСвойствДляСравнения();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ДоступностьТаблицыСвойствДляСравнения();
	
КонецПроцедуры

Процедура ОтобразитьНеСопоставленныеИсточникиПриИзменении(Элемент)
	
	ДоступностьТаблицыСвойствДляСравнения();
	
КонецПроцедуры

Процедура ОтобразитьНеСопоставленныеПриемникиПриИзменении(Элемент)
	
	ДоступностьТаблицыСвойствДляСравнения();	
	
КонецПроцедуры

Процедура КоманднаяПанель1ПометитьВсе(Кнопка)
	
	ТаблицаВидыСвойствДляСравнения.ЗаполнитьЗначения(Истина, "Пометка");
	
КонецПроцедуры

Процедура КоманднаяПанель1ОтменитьПометкуВсего(Кнопка)
	
	ТаблицаВидыСвойствДляСравнения.ЗаполнитьЗначения(Ложь, "Пометка");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////

ПроизвестиПервоначальнуюИнициализациюДляПроверок();
