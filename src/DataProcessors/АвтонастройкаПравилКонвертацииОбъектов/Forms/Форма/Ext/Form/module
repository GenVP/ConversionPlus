////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ОтображатьТолькоДанныеБезПравил = Истина;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Статусы.Пометка = Ложь;
	ЭлементыФормы.ПанельСтатусы.Свертка = РежимСверткиЭлементаУправления.Низ;
	
	РезультатСинхронизации = ПолучитьДеревоДляСинхронизации();
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельФормы"

Процедура КоманднаяПанельФормыУстановитьПометки(Кнопка)
	
	УстановитьАвтоматическиВсеФлажкиДляСозданияПравил(РезультатСинхронизации);
		
КонецПроцедуры // КоманднаяПанельФормыУстановитьПометки()

Процедура КоманднаяПанельФормыСнятьПометки(Кнопка)
	
	Для каждого Строка из РезультатСинхронизации.Строки Цикл
		
		Строка.Пометка = 0;
		глУстановитьПометки(Строка, мТекстАлгоритма, Истина);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельФормыСнятьПометки()

Процедура КоманднаяПанельФормыСтатусы(Кнопка)
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Статусы.Пометка = НЕ ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Статусы.Пометка;
	
	Если ЭлементыФормы.ПанельСтатусы.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
		
		ЭлементыФормы.ПанельСтатусы.Свертка = РежимСверткиЭлементаУправления.Нет;
		
	Иначе
		
		ЭлементыФормы.ПанельСтатусы.Свертка = РежимСверткиЭлементаУправления.Низ;
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельФормыСтатусы()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "РезультатСинхронизации"

Процедура РезультатСинхронизацииПриАктивизацииСтроки(Элемент)
	
	КнопкаУстановитьСоответствиеОбъектов = ЭлементыФормы.КонтекстноеМеню.Кнопки.МенюРезультатаСинхронизации.Кнопки.УстановитьСоответствиеОбъектов;
	КнопкаОтменитьСоответствиеОбъектов = ЭлементыФормы.КонтекстноеМеню.Кнопки.МенюРезультатаСинхронизации.Кнопки.ОтменитьСоответствиеОбъектов;
	
	Если Элемент.ТекущиеДанные.Источник = NULL И Элемент.ТекущиеДанные.Приемник = NULL Тогда
		
		КнопкаУстановитьСоответствиеОбъектов.Доступность = Ложь;
		КнопкаОтменитьСоответствиеОбъектов.Доступность = Ложь;
		
	ИначеЕсли Элемент.ТекущиеДанные.Источник <> NULL И Элемент.ТекущиеДанные.Приемник <> NULL Тогда
		
		КнопкаУстановитьСоответствиеОбъектов.Доступность = Ложь;
		
		Если Элемент.ТекущиеДанные.СинхронизированИсточник ИЛИ Элемент.ТекущиеДанные.СинхронизированПриемник Тогда
			
			КнопкаОтменитьСоответствиеОбъектов.Доступность = Истина;
			
		Иначе
			
			КнопкаОтменитьСоответствиеОбъектов.Доступность = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		КнопкаУстановитьСоответствиеОбъектов.Доступность = Истина;
		КнопкаОтменитьСоответствиеОбъектов.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // РезультатСинхронизацииПриАктивизацииСтроки()

Процедура РезультатСинхронизацииПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяКолонкаИмя = Элемент.ТекущаяКолонка.Имя;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущаяКолонкаИмя = "Источник" Тогда
		
		Отказ = Истина;
		
		Если ТекущиеДанные.Источник <> NULL Тогда
			
			ОткрытьЗначение(ТекущиеДанные.Источник);
			
		Иначе
			
			ОткрытьВыборОбъекта(Конвертация.Источник, ТекущиеДанные.Тип, Элемент);
			
		КонецЕсли;		
		
	ИначеЕсли ТекущаяКолонкаИмя = "Приемник" Тогда
		
		Отказ = Истина;
		
		Если ТекущиеДанные.Приемник <> NULL Тогда
			
			ОткрытьЗначение(ТекущиеДанные.Приемник);
			
		Иначе
			
			ОткрытьВыборОбъекта(Конвертация.Приемник, ТекущиеДанные.Тип, Элемент);
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяКолонкаИмя = "Правило" Тогда
		
		Отказ = Истина;
		
		Если ТипЗнч(ТекущиеДанные.Правило) = Тип("СправочникСсылка.ПравилаКонвертацииОбъектов") Тогда
			
			ОткрытьЗначение(ТекущиеДанные.Правило);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РезультатСинхронизацииПередНачаломИзменения()

Процедура РезультатСинхронизацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеЦветовымОформлениемСтроки(ОформлениеСтроки, ДанныеСтроки);
	
	УправлениеКартинкамиСтроки(ОформлениеСтроки, ДанныеСтроки);
	
	Если ДанныеСтроки.Родитель <> Неопределено И ДанныеСтроки.Источник <> NULL Тогда
			
		ОформлениеСтроки.Ячейки["Источник"].УстановитьТекст(ДанныеСтроки.Источник.Имя);
		
	КонецЕсли;
	
	Если ДанныеСтроки.Родитель <> Неопределено И ДанныеСтроки.Приемник <> NULL Тогда
		
		ОформлениеСтроки.Ячейки["Приемник"].УстановитьТекст(ДанныеСтроки.Приемник.Имя);
		
	КонецЕсли;	
	
КонецПроцедуры // РезультатСинхронизацииПриВыводеСтроки()

Процедура РезультатСинхронизацииПриИзмененииФлажка(Элемент, Колонка)
	
	глУстановитьПометки(Элемент.ТекущаяСтрока, мТекстАлгоритма, Истина);
	
КонецПроцедуры // РезультатСинхронизацииПриИзмененииФлажка()

Процедура РезультатСинхронизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.Источник = NULL Тогда
		
		ТекущиеДанные.Источник = ВыбранноеЗначение;
		ТекущиеДанные.СинхронизированИсточник = Истина;
		
	ИначеЕсли ТекущиеДанные.Приемник = NULL Тогда
		
		ТекущиеДанные.Приемник = ВыбранноеЗначение;
		ТекущиеДанные.СинхронизированПриемник = Истина;
		
	КонецЕсли;
	
	ТекущиеДанные.Правило = ПолучитьИмяПравила(ТекущиеДанные);
	
	ТекущиеДанные.Пометка = Истина;
	глУстановитьПометки(ТекущиеДанные, мТекстАлгоритма, Истина);		
		
КонецПроцедуры // РезультатСинхронизацииОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "КонтекстноеМеню"

Процедура КонтекстноеМенюУстановитьСоответствиеОбъектов(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.РезультатСинхронизации.ТекущиеДанные;
	
	Если ТекущиеДанные.Источник = NULL Тогда
		
		ОткрытьВыборОбъекта(Конвертация.Источник, ТекущиеДанные.Тип, ЭлементыФормы.РезультатСинхронизации);
		
	ИначеЕсли ТекущиеДанные.Приемник = NULL Тогда
		
		ОткрытьВыборОбъекта(Конвертация.Приемник, ТекущиеДанные.Тип, ЭлементыФормы.РезультатСинхронизации);
		
	КонецЕсли;
	
	РезультатСинхронизацииПриАктивизацииСтроки(ЭлементыФормы.РезультатСинхронизации);
	
КонецПроцедуры // КонтекстноеМенюУстановитьСоответствие()

Процедура КонтекстноеМенюОтменитьСоответствиеОбъектов(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.РезультатСинхронизации.ТекущиеДанные;
	
	Если ТекущиеДанные.СинхронизированИсточник Тогда
		
		ТекущиеДанные.Источник = NULL;
		ТекущиеДанные.СинхронизированИсточник = Ложь;
		
	ИначеЕсли ТекущиеДанные.СинхронизированПриемник Тогда
		
		ТекущиеДанные.Приемник = NULL;
		ТекущиеДанные.СинхронизированПриемник = Ложь;
		
	КонецЕсли;
	
	ТекущиеДанные.Правило = ПолучитьИмяПравила(ТекущиеДанные);
	
	ТекущиеДанные.Пометка = Истина;
	глУстановитьПометки(ТекущиеДанные, мТекстАлгоритма, Истина);
	
	РезультатСинхронизацииПриАктивизацииСтроки(ЭлементыФормы.РезультатСинхронизации);
	
КонецПроцедуры // КонтекстноеМенюОтменитьСоответствиеОбъектов()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НижняяКоманднаяПанель"

Процедура ЗаписатьПравила()
	
	СписокПКО = Новый СписокЗначений;
	СохранитьПравила(РезультатСинхронизации.Строки, СписокПКО);
			
	// правила синхронизации создаем
	Если ВладелецФормы <> Неопределено 
		И СписокПКО <> Неопределено Тогда
		
		Попытка
			ВладелецФормы.УстановитьПризнакСинхронизацииИУСпискаПравил(СписокПКО);
			
			// предложим создать правила выгрузки данных
			ВладелецФормы.СозданиеПравилВыгрузкиДанных(Истина);
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
		
	
	
КонецПроцедуры

Процедура НижняяКоманднаяПанельЗаписать(Кнопка)
	
	ЗаписатьПравила();	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОткрытьВыборОбъекта(Владелец, Тип, Элемент)
	
	ФормаВыбора = Справочники.Объекты.ПолучитьФормуВыбора("ФормаВыбораДополнительная", Элемент);
	
	//Выбирать только элементы
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	//Отбор по владельцу
	ФормаВыбора.ПараметрОтборПоВладельцу = Владелец;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
	
	ФормаВыбора.Отбор.Тип.Значение = Тип;
	ФормаВыбора.Отбор.Тип.Использование = Истина;
		
	//Если отбор по типу, то дерево и иерархию надо отключить
	ФормаВыбора.ЭлементыФормы.СправочникСписок.Дерево = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
			
	ФормаВыбора.ОткрытьМодально();
	
КонецПроцедуры // ОткрытьВыборОбъекта()

Процедура УправлениеЦветовымОформлениемСтроки(ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Родитель = Неопределено Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноГрифельноСерый;
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,, Истина);
		
	ИначеЕсли ТипЗнч(ДанныеСтроки.Правило) = Тип("СправочникСсылка.ПравилаКонвертацииОбъектов") Тогда
		
		ОформлениеСтроки.ЦветФона = WebЦвета.Роса;
		ОформлениеСтроки.ЦветТекста = WebЦвета.СветлоГрифельноСерый;
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,, Истина);
		
	ИначеЕсли (ДанныеСтроки.Источник <> NULL) И (ДанныеСтроки.Приемник <> NULL) Тогда

		ОформлениеСтроки.ЦветФона = WebЦвета.ШелковыйОттенок;
		ОформлениеСтроки.ЦветТекста = WebЦвета.СветлоГрифельноСерый;
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,, Истина);

	ИначеЕсли (ДанныеСтроки.Приемник = NULL) И (ДанныеСтроки.Родитель <> Неопределено) Тогда

		ОформлениеСтроки.ЦветТекста = WebЦвета.СветлоГрифельноСерый;
		
	ИначеЕсли (ДанныеСтроки.Источник = NULL) И (ДанныеСтроки.Родитель <> Неопределено) Тогда

		ОформлениеСтроки.ЦветФона = WebЦвета.Перламутровый;
		ОформлениеСтроки.ЦветТекста = WebЦвета.СветлоГрифельноСерый;
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,, Истина);

	КонецЕсли;
	
	Если ДанныеСтроки.Родитель <> Неопределено 
		И ДанныеСтроки.НеуникальноеИмяПравила Тогда
		
		ОформлениеСтроки.Ячейки.Правило.ЦветТекста = WebЦвета.Красный;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеЦветовымОформлениемСтроки()

Процедура УправлениеКартинкамиСтроки(ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Родитель = Неопределено Тогда
		
		Если ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.ПланОбмена Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.ПланОбмена);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.Справочник Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.Справочник);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.Документ Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.Документ);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.Перечисление Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.Перечисление);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.ПланВидовХарактеристик Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.ПланВидовХарактеристик);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.ПланСчетов Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.ПланСчетов);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.ПланВидовРасчета Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.ПланВидовРасчета);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.РегистрСведений Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.РегистрНакопления Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.РегистрНакопления);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.РегистрБухгалтерии Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.РегистрБухгалтерии);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.РегистрРасчета Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.РегистрРасчета);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.БизнесПроцесс Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.БизнесПроцесс);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.СтартБизнесПроцесса);
			
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыОбъектов.Задача Тогда
			
			ОформлениеСтроки.Ячейки.Тип.УстановитьКартинку(БиблиотекаКартинок.Задача);
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.ПланОбмена Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.ПланОбменаОбъект);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.Справочник Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.СправочникОбъект);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.Документ Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.ДокументОбъект);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.Перечисление Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.Перечисление);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.ПланВидовХарактеристик Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.ПланВидовХарактеристикОбъект);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.ПланСчетов Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.ПланСчетовОбъект);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.ПланВидовРасчета Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.ПланВидовРасчетаОбъект);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.РегистрСведений Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.РегистрНакопления Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.РегистрНакопления);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.РегистрБухгалтерии Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.РегистрБухгалтерии);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.РегистрРасчета Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.РегистрРасчета);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.БизнесПроцесс Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.БизнесПроцессОбъект);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.СтартБизнесПроцесса);
			
		ИначеЕсли ДанныеСтроки.Источник <> NULL И ДанныеСтроки.Источник.Тип = Перечисления.ТипыОбъектов.Задача Тогда
			
			ОформлениеСтроки.Ячейки.Источник.УстановитьКартинку(БиблиотекаКартинок.ЗадачаОбъект);
			
		КонецЕсли;
		
		Если ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.ПланОбмена Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.ПланОбменаОбъект);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.Справочник Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.СправочникОбъект);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.Документ Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.ДокументОбъект);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.Перечисление Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.Перечисление);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.ПланВидовХарактеристик Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.ПланВидовХарактеристикОбъект);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.ПланСчетов Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.ПланСчетовОбъект);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.ПланВидовРасчета Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.ПланВидовРасчетаОбъект);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.РегистрСведений Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.РегистрНакопления Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.РегистрНакопления);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.РегистрБухгалтерии Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.РегистрБухгалтерии);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.РегистрРасчета Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.РегистрРасчета);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.БизнесПроцесс Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.БизнесПроцессОбъект);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.СтартБизнесПроцесса);
			
		ИначеЕсли ДанныеСтроки.Приемник <> NULL И ДанныеСтроки.Приемник.Тип = Перечисления.ТипыОбъектов.Задача Тогда
			
			ОформлениеСтроки.Ячейки.Приемник.УстановитьКартинку(БиблиотекаКартинок.ЗадачаОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеКартинкамиСтроки()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Конвертация.Пустая() Тогда
		
		СообщитьОбОшибке("Не выбрана конвертация.", Отказ);
				
	КонецЕсли;

КонецПроцедуры

Процедура НижняяКоманднаяПанельОК(Кнопка)
	
	ЗаписатьПравила();
	Закрыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОбновить(Кнопка)
	
	РезультатСинхронизации = ПолучитьДеревоДляСинхронизации();
	
КонецПроцедуры
