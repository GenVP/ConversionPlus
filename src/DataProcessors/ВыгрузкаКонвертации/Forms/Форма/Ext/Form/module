
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ

// Процедура - обработчик события "НачалоВыбора" поля ввода имени файла правил.
//
Процедура ИмяФайлаПравилНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если СжиматьФайлПравил Тогда
			
		Фильтр						=	"Архивный файл правил (*.zip)|*.zip";
		Расширение					=	"zip";
			
	Иначе
			
		Фильтр						=	"Файл правил (*.xml)|*.xml";
		Расширение					=	"xml";
			
	КонецЕсли;
	
	РаботаСФайлами.глВыборФайла(Элемент, Ложь, Фильтр, Расширение, "Выберите имя файла для сохранения правил", "ПравилаОбменаДанными");
	
КонецПроцедуры // ИмяФайлаВыгрузкиНачалоВыбора()

// Процедура - обработчик события "Открытие" поля ввода имени файла правил.
//
Процедура ИмяФайлаПравилОткрытие(Элемент, СтандартнаяОбработка)

	РаботаСФайлами.глОткрытьФайл(ИмяФайлаПравил, СтандартнаяОбработка);
		
КонецПроцедуры // ИмяФайлаВыгрузкиОткрытие()

// Процедура - обработчик события "НачалоВыбора" поля ввода имени файла модуля.
//
Процедура ИмяФайлаМодуляНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСФайлами.глВыборФайла(Элемент,, "Файл модуля (*.txt)|*.txt", "txt", "Выберите имя файла для сохранения обработки выгрузки", "МодульВыгрузки");
	
КонецПроцедуры // ИмяФайлаМодуляНачалоВыбора()

// Процедура - обработчик события "Открытие" поля ввода имени файла модуля.
//
Процедура ИмяФайлаМодуляОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСФайлами.глОткрытьФайл(Элемент.Значение, СтандартнаяОбработка);
		
КонецПроцедуры // ИмяФайлаМодуляОткрытие()

Процедура ИмяФайлаМодуляЗагрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСФайлами.глВыборФайла(Элемент,, "Файл модуля (*.txt)|*.txt", "txt", "Выберите имя файла для сохранения обработки загрузки", "МодульЗагрузки");

КонецПроцедуры

Процедура ИмяФайлаМодуляЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)

	РаботаСФайлами.глОткрытьФайл(Элемент.Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбновитьДанныеФлажковВыгрузкиЗагрузки()
	
	УменьшитьВысотуФормы = 0;
	Источник77 = КонвертацияДляВыгрузки.Источник.Приложение = Перечисления.Приложения.Предприятие77;
	Если Источник77 Тогда
		
		ЭлементыФормы.ПанельВыгрузки.Свертка = РежимСверткиЭлементаУправления.Нет;
		
	Иначе
		
		ЭлементыФормы.ПанельВыгрузки.Свертка = РежимСверткиЭлементаУправления.Верх;
		ВыгружатьМодульВыгрузки = Ложь;
		УменьшитьВысотуФормы = УменьшитьВысотуФормы + ЭлементыФормы.ПанельВыгрузки.Высота;
		
	КонецЕсли;
	
	Если КонвертацияДляВыгрузки.РежимСовместимости = Перечисления.РежимСовместимости.РежимСовместимостиСБСП21 И 
		 ЭтоПриложение8(КонвертацияДляВыгрузки.Источник.Приложение) Тогда
		
		ЭлементыФормы.ПанельВыгрузкиОбработчиков.Свертка = РежимСверткиЭлементаУправления.Нет;
		
	Иначе
		
		ЭлементыФормы.ПанельВыгрузкиОбработчиков.Свертка = РежимСверткиЭлементаУправления.Верх;
		ВыгружатьОбработчикиВыгрузки = Ложь;
		УменьшитьВысотуФормы = УменьшитьВысотуФормы + ЭлементыФормы.ПанельВыгрузкиОбработчиков.Высота;
		
	КонецЕсли;
	
	Приемник77 = КонвертацияДляВыгрузки.Приемник.Приложение = Перечисления.Приложения.Предприятие77;
	Если Приемник77 Тогда
		
		ЭлементыФормы.ПанельЗагрузки.Свертка = РежимСверткиЭлементаУправления.Нет;
		
	Иначе
		
		ЭлементыФормы.ПанельЗагрузки.Свертка = РежимСверткиЭлементаУправления.Верх;
		ВыгружатьМодульЗагрузки = Ложь;
		УменьшитьВысотуФормы = УменьшитьВысотуФормы + ЭлементыФормы.ПанельЗагрузки.Высота;
		
	КонецЕсли;
	
	Если КонвертацияДляВыгрузки.РежимСовместимости = Перечисления.РежимСовместимости.РежимСовместимостиСБСП21 И 
		 ЭтоПриложение8(КонвертацияДляВыгрузки.Приемник.Приложение) Тогда
		
		ЭлементыФормы.ПанельЗагрузкиОбработчиков.Свертка = РежимСверткиЭлементаУправления.Нет;
		
	Иначе
		
		ЭлементыФормы.ПанельЗагрузкиОбработчиков.Свертка = РежимСверткиЭлементаУправления.Верх;
		ВыгружатьОбработчикиЗагрузки = Ложь;
		УменьшитьВысотуФормы = УменьшитьВысотуФормы + ЭлементыФормы.ПанельЗагрузкиОбработчиков.Высота;
		
	КонецЕсли;
	
	ЭтаФорма.Высота = ЭтаФорма.Высота - УменьшитьВысотуФормы;
	
	Если (Не Источник77 И НЕ Приемник77)
		ИЛИ 
		 (НЕ ВыгружатьМодульВыгрузки И НЕ ВыгружатьМодульЗагрузки) Тогда
		
		СохранятьФайлОбменаДанными = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода конвертации.
//
Процедура КонвертацияДляВыгрузкиПриИзменении(Элемент)

	ВосстановитьИнформациюОНастройках();
	
	ОбработатьДоступностьСжатияПравилВыгрузки();
	
	ОбновитьДанныеФлажковВыгрузкиЗагрузки();
	
КонецПроцедуры // КонвертацияДляВыгрузкиПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Процедура вызывается при выборе действия "Выполнить" командной панели формы.
//
Процедура ОсновныеДействияФормыВыполнить(Кнопка) Экспорт

	Если Не ЗначениеЗаполнено(КонвертацияДляВыгрузки) Тогда
		
		Предупреждение("Не выбраны правила обмена для сохранения.");
		Возврат;
		
	КонецЕсли;
	
	Если СохранятьФайлОбменаДанными И ПустаяСтрока(ИмяФайлаПравил) Тогда
		
		Предупреждение("Не выбрано имя файла правил обмена для выгрузки.");
		Возврат;
		
	КонецЕсли;
	
	Если ВыгружатьМодульВыгрузки И ПустаяСтрока(ИмяФайлаМодуляВыгрузки) Тогда
		Предупреждение("Не выбрано имя файла модуля обработки выгрузки данных!");
		Возврат;
	КонецЕсли;

	Если ВыгружатьМодульЗагрузки И ПустаяСтрока(ИмяФайлаМодуляЗагрузки) Тогда
		Предупреждение("Не выбрано имя файла модуля обработки загрузки данных!");
		Возврат;
	КонецЕсли;
	
	Если ВыгружатьОбработчикиВыгрузки И ПустаяСтрока(ИмяФайлаОбработчиковВыгрузки) Тогда
		Предупреждение("Не выбрано имя файла модуля обработки выгрузки данных!");
		Возврат;
	КонецЕсли;

	Если ВыгружатьОбработчикиЗагрузки И ПустаяСтрока(ИмяФайлаОбработчиковЗагрузки) Тогда
		Предупреждение("Не выбрано имя файла модуля обработки загрузки данных!");
		Возврат;
	КонецЕсли;
	
	Если ОбработкаОбъект.ВыгружатьПравилаКорреспондента И 
		Не ЗначениеЗаполнено(КонвертацияКорреспондентДляВыгрузки) Тогда
		
		Предупреждение("Не выбраны правила обмена корреспондента для сохранения.");
		Возврат;
		
	КонецЕсли;
	
	//{benony
	Если bnГитфлоуПовтИсп.ПолучитьЗначениеНастройки("bnКонтролироватьПорядокОбъектовПередВыгрузкой", Ложь) Тогда
		
		Если bnГитфлоу.ТребуетсяКорректировкаПорядкаОбъектовКонвертации(КонвертацияДляВыгрузки) Тогда
			
			ТекстВопроса = НСтр("ru = 'Для правил конвертации необходимо провести 
								|корректировку порядка выгрузки элементов.
								|Выполнить корректировку сейчас?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru = 'Некорректные данные конвертации'"));
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			bnГитфлоу.ОбновитьПорядокОбъектовКонвертации(КонвертацияДляВыгрузки);
			
		КонецЕсли;
		
		Если ОбработкаОбъект.ВыгружатьПравилаКорреспондента
			И bnГитфлоу.ТребуетсяКорректировкаПорядкаОбъектовКонвертации(КонвертацияКорреспондентДляВыгрузки) Тогда
			
			ТекстВопроса = НСтр("ru = 'Для правил конвертации корреспондента необходимо провести 
								|корректировку порядка выгрузки элементов.
								|Выполнить корректировку сейчас?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru = 'Некорректные данные конвертации'"));
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			bnГитфлоу.ОбновитьПорядокОбъектовКонвертации(КонвертацияКорреспондентДляВыгрузки);
			
		КонецЕсли;
		
	КонецЕсли;
	//}benony

	Если ОбработкаОбъект.ВыгружатьПравилаРегистрации И 
		Не ЗначениеЗаполнено(РегистрацияДляВыгрузки) Тогда
		
		Предупреждение("Не выбраны правила регистрации для сохранения.");
		Возврат;
		
	КонецЕсли;

	Если СохранятьФайлОбменаДанными Тогда
		
		ИменаФайловПакета = ПолучитьИменаФайловПакетаВыгрузки();
		
		мФормаПрогрессора.Открыть();
		мФормаПрогрессора.Значение = 0;
		ВыполнитьВыгрузкуПравил(СохранятьИсходныеФайлыXML И ИменаФайловПакета <> Неопределено, ИменаФайловПакета);
		мФормаПрогрессора.Закрыть();
	
	КонецЕсли;
	
	Если ВыгружатьМодульВыгрузки Тогда
		ВыполнитьВыгрузкуМодуляОбработкиВыгрузки();
	КонецЕсли;

	Если ВыгружатьМодульЗагрузки Тогда
		ВыполнитьВыгрузкуМодуляОбработкиЗагрузки();
	КонецЕсли;
	
	Если ВыгружатьОбработчикиВыгрузки Тогда
		ВыгрузитьМодульОбработчиков(Истина, ИмяФайлаОбработчиковВыгрузки)
	КонецЕсли;

	Если ВыгружатьОбработчикиЗагрузки Тогда
		ВыгрузитьМодульОбработчиков(Ложь, ИмяФайлаОбработчиковЗагрузки);
	КонецЕсли;
	
	СохранитьИнформациюОНастройках();
	
	Предупреждение("Выгрузка правил завершена.");
	Если НеЗакрыватьФормуПослеСохраненияПравил = Ложь Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыВыполнить()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ОбработатьДоступностьСжатияПравилВыгрузки()
	
	Доступность = Ложь;
	
	Если ЗначениеЗаполнено(КонвертацияДляВыгрузки) Тогда
		
		Попытка
			Доступность = ЭтоПриложение8(КонвертацияДляВыгрузки.Источник.Приложение);
		Исключение
			Доступность = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	ЭлементыФормы.СжиматьФайлПравил.Доступность = Доступность;
	ЭлементыФормы.КонвертацияКорреспондентДляВыгрузки.Видимость = Доступность;
	ЭлементыФормы.ФлагВыгружатьПравилаКорреспондента.Видимость  = Доступность;
	СжиматьФайлПравил = СжиматьФайлПравил И ЭлементыФормы.СжиматьФайлПравил.Доступность;
	
КонецПроцедуры

Процедура ПриОткрытии()

	ОбработатьДоступностьСжатияПравилВыгрузки();
	
	ВосстановитьИнформациюОНастройках();
	
	ВыполнятьВыгрузкуАвтоматически = глТекущийПользователь.ВыгружатьПравилаОбменаПриОткрытииФормыНастройки;
	
	ОбновитьДанныеФлажковВыгрузкиЗагрузки();
	
	Если ПустаяСтрока(ИмяФайлаПравил) Тогда
		
		СтандартнаяОбработка = Истина;
		ИмяФайлаПравилНачалоВыбора(ЭлементыФормы.ИмяФайлаПравил, СтандартнаяОбработка);
		
	КонецЕсли;
	
	СжиматьФайлПравилПриИзменении(Неопределено);
	
	Если ВыполнятьВыгрузкуАвтоматически Тогда
		ОсновныеДействияФормыВыполнить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

Процедура ПриЗакрытии()

	Если глТекущийПользователь.ВыгружатьПравилаОбменаПриОткрытииФормыНастройки <> ВыполнятьВыгрузкуАвтоматически Тогда
		
		ТекущийПользователь = глТекущийПользователь.ПолучитьОбъект();
		ТекущийПользователь.ВыгружатьПравилаОбменаПриОткрытииФормыНастройки = ВыполнятьВыгрузкуАвтоматически;
		ТекущийПользователь.Записать();
		
	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()

Процедура СохранитьИнформациюОНастройках()
	
	Если НЕ ЗначениеЗаполнено(КонвертацияДляВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ПостфиксКонвертации = ПолучитьПостфиксНастроекСохранения();
	
	СохранитьЗначение("ВыгрузкаКонвертации.СохранятьФайлОбменаДанными" + ПостфиксКонвертации, СохранятьФайлОбменаДанными);
	СохранитьЗначение("ВыгрузкаКонвертации.ВыгружатьМодульВыгрузки" + ПостфиксКонвертации, ВыгружатьМодульВыгрузки);
	СохранитьЗначение("ВыгрузкаКонвертации.ВыгружатьМодульЗагрузки" + ПостфиксКонвертации, ВыгружатьМодульЗагрузки);
	СохранитьЗначение("ВыгрузкаКонвертации.ВыгружатьОбработчикиВыгрузки" + ПостфиксКонвертации, ВыгружатьОбработчикиВыгрузки);
	СохранитьЗначение("ВыгрузкаКонвертации.ВыгружатьОбработчикиЗагрузки" + ПостфиксКонвертации, ВыгружатьОбработчикиЗагрузки);
	СохранитьЗначение("ВыгрузкаКонвертации.СжиматьФайлПравил" + ПостфиксКонвертации, СжиматьФайлПравил);
	СохранитьЗначение("ВыгрузкаКонвертации.СохранятьИсходныеФайлыXML" + ПостфиксКонвертации, СохранятьИсходныеФайлыXML);
	
	РаботаСФайлами.УстановитьИмяФайла(КонвертацияДляВыгрузки, глТекущийПользователь, ИмяФайлаПравил);
	РаботаСФайлами.УстановитьИмяФайла(КонвертацияДляВыгрузки, глТекущийПользователь, ИмяФайлаМодуляВыгрузки, "ФайлМодуля");
	РаботаСФайлами.УстановитьИмяФайла(КонвертацияДляВыгрузки, глТекущийПользователь, ИмяФайлаМодуляЗагрузки, "ФайлМодуляЗагрузки");
	РаботаСФайлами.УстановитьИмяФайла(КонвертацияДляВыгрузки, глТекущийПользователь, ИмяФайлаОбработчиковВыгрузки, "ФайлОбработчиковВыгрузки");
	РаботаСФайлами.УстановитьИмяФайла(КонвертацияДляВыгрузки, глТекущийПользователь, ИмяФайлаОбработчиковЗагрузки, "ФайлОбработчиковЗагрузки");
	
	// сохраняем соответствующие файлы корреспондента и регистрации
	СохранитьНастройкуСопуствующиеФайлы();
	
КонецПроцедуры

Функция ПолучитьПостфиксНастроекСохранения()
	
	Если ЗначениеЗаполнено(КонвертацияДляВыгрузки) Тогда
		ПостфиксКонвертации = "." + Строка(КонвертацияДляВыгрузки.УникальныйИдентификатор())
	Иначе
		ПостфиксКонвертации = "";
	КонецЕсли;
	
	Возврат ПостфиксКонвертации;
	
КонецФункции

Процедура ВосстановитьИнформациюОНастройках()
	
	ИмяФайлаПравил         = РаботаСФайлами.ПолучитьИмяФайла(КонвертацияДляВыгрузки, глТекущийПользователь);
	
	ИмяФайлаМодуляВыгрузки = РаботаСФайлами.ПолучитьИмяФайла(КонвертацияДляВыгрузки, глТекущийПользователь, "ФайлМодуля");
	
	Если ЗначениеЗаполнено(ИмяФайлаМодуляВыгрузки) Тогда
		ВыгружатьМодульВыгрузки = Истина;
	КонецЕсли;
	
	ИмяФайлаМодуляЗагрузки = РаботаСФайлами.ПолучитьИмяФайла(КонвертацияДляВыгрузки, глТекущийПользователь, "ФайлМодуляЗагрузки");	
	Если ЗначениеЗаполнено(ИмяФайлаМодуляЗагрузки) Тогда
		ВыгружатьМодульЗагрузки = Истина;
	КонецЕсли;
	
	ИмяФайлаОбработчиковВыгрузки = РаботаСФайлами.ПолучитьИмяФайла(КонвертацияДляВыгрузки, глТекущийПользователь, "ФайлОбработчиковВыгрузки");
	Если ЗначениеЗаполнено(ИмяФайлаОбработчиковВыгрузки) Тогда
		ВыгружатьОбработчикиВыгрузки = Истина;
	КонецЕсли;
	
	ИмяФайлаОбработчиковЗагрузки = РаботаСФайлами.ПолучитьИмяФайла(КонвертацияДляВыгрузки, глТекущийПользователь, "ФайлОбработчиковЗагрузки");
	Если ЗначениеЗаполнено(ИмяФайлаОбработчиковЗагрузки) Тогда
		ВыгружатьОбработчикиЗагрузки = Истина;
	КонецЕсли;
	
	ИмяФайлаПравилПриИзменении(ЭлементыФормы.ИмяФайлаПравил);
	
	ПостфиксКонвертации = ПолучитьПостфиксНастроекСохранения();
	
	ВосстановитьБулевоЗначениеЕслиЗаполнено("ВыгрузкаКонвертации.СохранятьФайлОбменаДанными" + ПостфиксКонвертации, СохранятьФайлОбменаДанными, Истина);
	ВосстановитьБулевоЗначениеЕслиЗаполнено("ВыгрузкаКонвертации.ВыгружатьМодульВыгрузки" + ПостфиксКонвертации, ВыгружатьМодульВыгрузки);
	ВосстановитьБулевоЗначениеЕслиЗаполнено("ВыгрузкаКонвертации.ВыгружатьМодульЗагрузки" + ПостфиксКонвертации, ВыгружатьМодульЗагрузки);
	ВосстановитьБулевоЗначениеЕслиЗаполнено("ВыгрузкаКонвертации.ВыгружатьОбработчикиВыгрузки" + ПостфиксКонвертации, ВыгружатьОбработчикиВыгрузки);
	ВосстановитьБулевоЗначениеЕслиЗаполнено("ВыгрузкаКонвертации.ВыгружатьОбработчикиЗагрузки" + ПостфиксКонвертации, ВыгружатьОбработчикиЗагрузки);
	ВосстановитьБулевоЗначениеЕслиЗаполнено("ВыгрузкаКонвертации.СжиматьФайлПравил" + ПостфиксКонвертации, СжиматьФайлПравил);
	ВосстановитьБулевоЗначениеЕслиЗаполнено("ВыгрузкаКонвертации.СохранятьИсходныеФайлыXML" + ПостфиксКонвертации, СохранятьИсходныеФайлыXML, Ложь);
	
КонецПроцедуры

Процедура ВосстановитьБулевоЗначениеЕслиЗаполнено(ИмяНастройки, Значение, ЗначениеПоУмолчанию = Неопределено)
	
	ВременноеЗначение = ВосстановитьЗначение(ИмяНастройки);	
	Если ВременноеЗначение = Неопределено Тогда
		ВременноеЗначение = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ВременноеЗначение <> Неопределено Тогда
		Значение = ВременноеЗначение;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОсновныеДействияФормыСохранитьИнформациюОНастройкахВыгрузки(Кнопка)
	
	СохранитьИнформациюОНастройках();	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВосстановитьИнформациюОНастройкахВыгрузки(Кнопка)
	
	ВосстановитьИнформациюОНастройках();	
	
КонецПроцедуры

Процедура СжиматьФайлПравилПриИзменении(Элемент)
	
	Если СжиматьФайлПравил Тогда
		
		ИмяФайлаПравил = СтрЗаменить(ИмяФайлаПравил, ".xml", ".zip");
		
		Если ЗначениеЗаполнено(КонвертацияКорреспондентДляВыгрузки) Тогда
			ВыгружатьПравилаКорреспондента = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегистрацияДляВыгрузки) Тогда
			ВыгружатьПравилаРегистрации = Истина;
		КонецЕсли;
		
		ЭлементыФормы.СохранятьИсходныеФайлыXML.Доступность = Истина;
		
	Иначе
		
		ИмяФайлаПравил = СтрЗаменить(ИмяФайлаПравил, ".zip", ".xml");
		
		ВыгружатьПравилаКорреспондента = Ложь;
		ВыгружатьПравилаРегистрации = Ложь;
		
		ЭлементыФормы.СохранятьИсходныеФайлыXML.Доступность = Ложь;
		СохранятьИсходныеФайлыXML = Ложь;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьПриИзмененииПризнаковВыгрузки();
	
КонецПроцедуры

Процедура ИмяФайлаПравилПриИзменении(Элемент)
	
	Файл = Новый Файл(ИмяФайлаПравил);
	СжиматьФайлПравил = (ВРЕГ(Файл.Расширение) = ВРЕГ(".zip"));
	
	// заполняем сохраненные файлы корреспондента и регистрации
	ПрочитатьНастройкуСопуствующиеФайлы(?(СжиматьФайлПравил, ИмяФайлаПравил, СтрЗаменить(ИмяФайлаПравил, ".xml", ".zip")));
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВыгрузитьОбработчикиСобытий(Кнопка)
	
	// выгрузка обработчиков событий в каталог
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораФайла.Заголовок                   =	"Укажите каталог для выгрузки обработчиков событий";
	ДиалогВыбораФайла.ПредварительныйПросмотр     =	Истина;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
	
	Если НЕ ДиалогВыбораФайла.Выбрать() Тогда
		
		Возврат;
				
	КонецЕсли;
	
	КаталогДляВыгрузки = ДиалогВыбораФайла.Каталог;
	
	ВыгрузитьОбработчикиВКаталог(КаталогДляВыгрузки);
	
КонецПроцедуры

Процедура ИмяФайлаЗагрузкиОбработчиковНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСФайлами.глВыборФайла(Элемент,, "Файл модуля (*.txt)|*.txt", "txt", "Выберите имя файла для сохранения обработки загрузки", "МодульОбработчиковЗагрузки");
	
КонецПроцедуры

Процедура ИмяФайлаВыгрузкиОбработчиковНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСФайлами.глВыборФайла(Элемент,, "Файл модуля (*.txt)|*.txt", "txt", "Выберите имя файла для сохранения обработки выгрузки", "МодульОбработчиковВыгрузки");
	
КонецПроцедуры

Процедура ФлагВыгружатьПравилаКорреспондентаПриИзменении(Элемент)
	
	ОбработкаОбъект.СжиматьФайлПравил = ВыгружатьПравилаКорреспондента;
	
	ЭлементыФормы.СжиматьФайлПравил.Доступность = Не ВыгружатьПравилаКорреспондента;
	
	СжиматьФайлПравилПриИзменении(ЭлементыФормы.СжиматьФайлПравил);
	
	УстановитьВидимостьДоступностьПриИзмененииПризнаковВыгрузки(, Ложь);
	
КонецПроцедуры

Процедура ФлагВыгружатьПравилаРегистрацииПриИзменении(Элемент)
	
	Если ВыгружатьПравилаРегистрации Тогда
		ВыгружатьПравилаКорреспондента = Истина;
	Иначе
		РегистрацияДляВыгрузки = Справочники.Регистрации.ПустаяСсылка();
	КонецЕсли;
	
	ФлагВыгружатьПравилаКорреспондентаПриИзменении(Элемент);
	
	УстановитьВидимостьДоступностьПриИзмененииПризнаковВыгрузки(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВыгрузитьМодульОбработчиков(ЭтоВыгрузка, ИмяФайла)
	
	ОбработкаВыгрузки = Обработки.ВыгрузкаОбработчиков.Создать();
	
	ОбработкаВыгрузки.Конвертация = КонвертацияДляВыгрузки;
	
	ОбработкаВыгрузки.ЭтоВыгрузка = ЭтоВыгрузка;
	
	ТекстМодуля = ОбработкаВыгрузки.ВыгрузитьОбработчики(Истина, Ложь);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстМодуля);
	ТекстовыйДокумент.Записать(ИмяФайла, "UTF-8");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// РАСШИРЕНИЯ ОБРАБОТЧИКОВ ФОРМЫ

Процедура УстановитьВидимостьДоступностьПриИзмененииПризнаковВыгрузки(Корреспондент = Истина, Регистрация = Истина)
	
	Если Корреспондент Тогда
		ЭлементыФормы.КонвертацияКорреспондентДляВыгрузки.Доступность = ВыгружатьПравилаКорреспондента;
		ЭлементыФормы.КонвертацияКорреспондентДляВыгрузки.АвтоОтметкаНезаполненного = ВыгружатьПравилаКорреспондента;
	КонецЕсли;
	
	Если Регистрация Тогда
		ЭлементыФормы.РегистрацияДляВыгрузки.Доступность = ВыгружатьПравилаРегистрации;
		ЭлементыФормы.РегистрацияДляВыгрузки.АвтоОтметкаНезаполненного = ВыгружатьПравилаРегистрации;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранятьИсходныеФайлыXMLПриИзменении(Элемент)
	
	Если СохранятьИсходныеФайлыXML Тогда
		
		ПолучитьИменаФайловПакетаВыгрузки();
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// СОПУТСТВУЮЩИЕ ФАЙЛЫ КОРРЕСПОНДЕНТА И РЕГИСТРАЦИИ

Процедура СохранитьНастройкуСопуствующиеФайлы()
	
	Если СжиматьФайлПравил Тогда
		
		СтруктураСопутствующиеФайлы = Новый Структура("ВыгружатьПравилаКорреспондента,КонвертацияКорреспондентДляВыгрузки,ВыгружатьПравилаРегистрации,РегистрацияДляВыгрузки");
		
		Если ВыгружатьПравилаКорреспондента И ЗначениеЗаполнено(КонвертацияКорреспондентДляВыгрузки) Тогда
			СтруктураСопутствующиеФайлы.ВыгружатьПравилаКорреспондента = Истина;
			СтруктураСопутствующиеФайлы.КонвертацияКорреспондентДляВыгрузки = КонвертацияКорреспондентДляВыгрузки;
		Иначе
			СтруктураСопутствующиеФайлы.ВыгружатьПравилаКорреспондента = Ложь;
			СтруктураСопутствующиеФайлы.КонвертацияКорреспондентДляВыгрузки = Справочники.Конвертации.ПустаяСсылка();
		КонецЕсли;
		
		Если ВыгружатьПравилаРегистрации И ЗначениеЗаполнено(РегистрацияДляВыгрузки) Тогда
			СтруктураСопутствующиеФайлы.ВыгружатьПравилаРегистрации = Истина;
			СтруктураСопутствующиеФайлы.РегистрацияДляВыгрузки = РегистрацияДляВыгрузки;
		Иначе
			СтруктураСопутствующиеФайлы.ВыгружатьПравилаРегистрации = Ложь;
			СтруктураСопутствующиеФайлы.РегистрацияДляВыгрузки = Справочники.Регистрации.ПустаяСсылка();
		КонецЕсли;
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		СтруктураНастройки.Вставить("ИмяОбъекта", "ВыгрузкаКонвертации");
		СтруктураНастройки.Вставить("НаименованиеНастройки", ИмяФайлаПравил);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", СтруктураСопутствующиеФайлы);
		
		УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьНастройкуСопуствующиеФайлы(Знач пИмяФайла)
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	СтруктураНастройки.Вставить("ИмяОбъекта", "ВыгрузкаКонвертации");
	СтруктураНастройки.Вставить("НаименованиеНастройки", пИмяФайла);
	
	Если УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки) Тогда
		
		СтруктураСопутствующиеФайлы = СтруктураНастройки.СохраненнаяНастройка;
		
		ВыгружатьПравилаКорреспондента      = СтруктураСопутствующиеФайлы.ВыгружатьПравилаКорреспондента;
		КонвертацияКорреспондентДляВыгрузки = СтруктураСопутствующиеФайлы.КонвертацияКорреспондентДляВыгрузки;
		ВыгружатьПравилаРегистрации         = СтруктураСопутствующиеФайлы.ВыгружатьПравилаРегистрации;
		РегистрацияДляВыгрузки              = СтруктураСопутствующиеФайлы.РегистрацияДляВыгрузки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтрытьВопросЗапроситьИмяФайла(ТекстВопроса, ТекстЗаголовка)
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("Указать", НСтр("Указать сейчас"));
	СписокКнопок.Добавить("НеУказывать", НСтр("Я укажу позже"));
	
	Ответ = Вопрос(ТекстВопроса, СписокКнопок, 60, "НеУказывать", ТекстЗаголовка, "НеУказывать");
	
	Если Ответ = "Указать" Тогда
		
		Фильтр     = "Файл правил (*.xml)|*.xml";
		Расширение = "xml";
		ЭлементВыбора = Новый Структура("Значение", "");
		РаботаСФайлами.глВыборФайла(ЭлементВыбора, Ложь, Фильтр, Расширение);
		
		Если ПустаяСтрока(ЭлементВыбора.Значение) Тогда
			Возврат Неопределено;
		Иначе
			Возврат ЭлементВыбора.Значение;
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИменаФайловПакетаВыгрузки()
	
	СтруктураИмен = Новый Структура("ИмяФайлаПравил,ИмяФайлаПравилКорреспондента,ИмяФайлаПравилРегистрации");
	
	Если ЗначениеЗаполнено(КонвертацияДляВыгрузки) Тогда
		СтруктураИмен.ИмяФайлаПравил = СтрЗаменить(ИмяФайлаПравил, ".zip", ".xml");
	КонецЕсли;
	
	Если ВыгружатьПравилаКорреспондента И ЗначениеЗаполнено(КонвертацияКорреспондентДляВыгрузки) Тогда
		
		ВремИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(КонвертацияКорреспондентДляВыгрузки, глТекущийПользователь);
		Если НЕ ЗначениеЗаполнено(ВремИмяФайла) Тогда
			
			ТекстВопроса = НСтр("ru = 'Не удалось опередить имя файла для правил КОРРЕСПОНДЕНТА.
								|Похоже, вы их еще ни разу не сохраняли. Хотите указать
								|файл выгрузки для правил корреспондента сейчас?'");
			ТекстЗаголовка = НСтр("ru = 'Правила выгрузки корреспондента'");
			
			ОтветНаЗапрос = ОтрытьВопросЗапроситьИмяФайла(ТекстВопроса, ТекстЗаголовка);
			
			Если ОтветНаЗапрос = Неопределено Тогда
				СохранятьИсходныеФайлыXML = Ложь;
				Возврат Неопределено;
			Иначе
				ВремИмяФайла = ОтветНаЗапрос;
				РаботаСФайлами.УстановитьИмяФайла(КонвертацияКорреспондентДляВыгрузки, глТекущийПользователь, ВремИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураИмен.ИмяФайлаПравилКорреспондента = СтрЗаменить(ВремИмяФайла, ".zip", ".xml");
		
		Если ВыгружатьПравилаРегистрации И ЗначениеЗаполнено(РегистрацияДляВыгрузки) Тогда
			
			ВремИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(РегистрацияДляВыгрузки, глТекущийПользователь);
			Если НЕ ЗначениеЗаполнено(ВремИмяФайла) Тогда
				
				ТекстВопроса = НСтр("ru = 'Не удалось опередить имя файла для правил РЕГИСТРАЦИИ.
									|Похоже, вы их еще ни разу не сохраняли. Хотите указать
									|файл выгрузки для правил регистрации сейчас?'");
				ТекстЗаголовка = НСтр("ru = 'Правила регистрации'");
				
				ОтветНаЗапрос = ОтрытьВопросЗапроситьИмяФайла(ТекстВопроса, ТекстЗаголовка);
				
				Если ОтветНаЗапрос = Неопределено Тогда
					СохранятьИсходныеФайлыXML = Ложь;
					Возврат Неопределено;
				Иначе
					ВремИмяФайла = ОтветНаЗапрос;
					РаботаСФайлами.УстановитьИмяФайла(РегистрацияДляВыгрузки, глТекущийПользователь, ВремИмяФайла);
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураИмен.ИмяФайлаПравилРегистрации = СтрЗаменить(ВремИмяФайла, ".zip", ".xml");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураИмен;
	
КонецФункции

СохранятьФайлОбменаДанными = Истина;
НеЗакрыватьФормуПослеСохраненияПравил = Ложь;
