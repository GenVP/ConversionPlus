////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//Вспомогательная переменная (массив) для хранения обработчиков
Перем мМассивОбработчиков;

//{benony
Перем мТекстОбработчикаДоИзменений;
Перем мПутьКФайлуДоИзменений;
Перем мПутьКФайлуТекущий;
//}benony

Процедура ОбновитьИнформациюОСобытиях()
	
	ПолучитьАлгоритмыПриОткрытии(ЭтаФорма, ЭтотОбъект, мМассивОбработчиков);
	
	АктивизироватьСтраницуСобытия(ЭтотОбъект, мМассивОбработчиков, ЭлементыФормы.ПанельАлгоритмы, ЭлементыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ОбновитьДанныеФлажкаПередачиДанных()
	
	ПередаватьДанныеВПриемник = (ПустаяСтрока(ИмяПараметраДляПередачи));
	Если ПередаватьДанныеВПриемник Тогда
		ЭлементыФормы.ПанельВыбораТипаСохранения.ТекущаяСтраница = ЭлементыФормы.ПанельВыбораТипаСохранения.Страницы.ВПриемник;
	Иначе
		ЭлементыФормы.ПанельВыбораТипаСохранения.ТекущаяСтраница = ЭлементыФормы.ПанельВыбораТипаСохранения.Страницы.ВПараметр;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОбновитьДанныеФлажкаПередачиДанных();
	
	ОпределитьДоступностьУстановкиЗначенийПараметров();
	
	ОбъектИсточник = Владелец.Источник; 
	ОбъектПриемник = Владелец.Приемник;
    	
	ОбновитьТипы();
	
    УстановитьСвойстваЭУ();	
	
	ПередаватьДанныеВПриемникПриИзменении(Неопределено);
	
	Если ЭтоНовый() Тогда
		
		ТекущийЭлемент = ЭлементыФормы.Источник;
		
	Иначе
		
		ТекущийЭлемент = ЭлементыФормы.ПанельАлгоритмы;
		
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ОбновитьИнформациюОСобытиях();
	
	ОпределитьДоступностьУстановкиАвтоприведенияКДлине();
	
	ЗаполнитьИмяОбработчика(ЭлементыФормы.ПанельАлгоритмы.ТекущаяСтраница);
	
	Если НЕ ЭтоПриложение8(Владелец.Владелец.Источник.Приложение) Или НЕ ЭтоПриложение8(Владелец.Владелец.Приемник.Приложение) Тогда
		ЭлементыФормы.КоманднаяПанель1.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанель1.Кнопки.ОтладкаОбработчиков);
	КонецЕсли;
	
	РедакторОбработчиковКлиент.УстановитьСостояниеКнопокПанелиРедактора(ЭлементыФормы, "ПриОткрытии"); //benony
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)

	УстановитьАлгоритмыПередЗаписью(ЭтаФорма, ЭтотОбъект, мМассивОбработчиков);
	
	// нужно проанализировать  типы источника и приемника и если для этих типов допустимо ПКО предложить его создать ...
	Если ЭтоНовый()
		И НЕ ЗначениеЗаполнено(ПравилоКонвертации) Тогда
		
		РезультатПоиска = АвтоматическиНайтиНужноеПравилоПКО(Истина);
		
		Если Не РезультатПоиска Тогда
			
			// правила такого нет - возможно нужно предложить его создать
			ТаблицаСоотвествийТипов = Неопределено;
			ВозможностьАвтоматическогоСозданияПравила = ОпределитьПоИсточникуИПриемникуМожетБытьПКОСозданоНесколькоПКО(Владелец.Владелец, Источник, Приемник, ТаблицаСоотвествийТипов);
			
			Если ВозможностьАвтоматическогоСозданияПравила Тогда
				
				// правило возможно, но его нет - предложим пользователю его создать
				ОтветПользователя = Вопрос("Создать автоматически правила конвертации объектов для типов данных приемника и источника?", 
					РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				
				НеобходимоСозданияПравила = (ОтветПользователя = КодВозвратаДиалога.Да);
				
				Если НеобходимоСозданияПравила Тогда
					
					СписокСозданныхПравил = Новый СписокЗначений;
					// создадим для подчиненных объектов только правила синхронизации свойств для полей поиска
					ПравилоКонвертации = СоздатьМножественноеКоличествоПравилоКО(Владелец, Источник, Приемник, Истина, 
						СписокСозданныхПравил, ТаблицаСоотвествийТипов, ИСТИНА);
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		
		Если ПередаватьДанныеВПриемник
			И ЗначениеЗаполнено(Приемник) Тогда
			
			ИмяПараметраДляПередачи = "";
			
		ИначеЕсли НЕ ПередаватьДанныеВПриемник
			И ЗначениеЗаполнено(ИмяПараметраДляПередачи) Тогда
			
			Приемник = Справочники.Свойства.ПустаяСсылка();
			//Поиск = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ

// Процедура - обработчик события "НачалоВыбора" поля ввода источника.
//
Процедура ИсточникНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Форма = Справочники.Свойства.ПолучитьФормуВыбора("ФормаВыбора", Элемент);
	Форма.НеИзменятьРодителя        = Истина;
	Форма.РодительОтбор             = Родитель.Источник;
	Форма.ПараметрОтборПоВладельцу  = Владелец.Источник;
	Форма.ПараметрВыборПоВладельцу  = Владелец.Источник;
	
	Форма.НачальноеЗначениеВыбора = Элемент.Значение;

	Форма.Открыть();
	
КонецПроцедуры // ИсточникНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода приемника.
//
Процедура ПриемникНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Форма = Справочники.Свойства.ПолучитьФормуВыбора("ФормаВыбора", Элемент);
	Форма.НеИзменятьРодителя        = Истина;
	Форма.РодительОтбор             = Родитель.Приемник;
	Форма.ПараметрОтборПоВладельцу  = Владелец.Приемник;
	Форма.ПараметрВыборПоВладельцу  = Владелец.Приемник;
	
	Форма.НачальноеЗначениеВыбора = Элемент.Значение;

	Форма.Открыть();
	
КонецПроцедуры // ПриемникНачалоВыбора()

Функция АвтоматическиНайтиНужноеПравилоПКО(ЗадаватьВопрос = Ложь)
	
	Если ЗначениеЗаполнено(ПравилоКонвертации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокПКО = НайтиПравилаКО(ЭтотОбъект.Владелец.Владелец, Источник, Приемник);
	
	КоличествоЭлементов = СписокПКО.Количество();
	
	Если КоличествоЭлементов = 1 Тогда
		
		Если ЗадаватьВопрос Тогда
			
			ОтветПользователя = Вопрос("Найдено правило конвертации объектов для типов данных приемника и источника.
				|Применить это правило конвертации для данного правила конвертации свойств?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				
			НеобходимоПодставитьНовоеПравило = (ОтветПользователя = КодВозвратаДиалога.Да);	
			
		Иначе
			
			НеобходимоПодставитьНовоеПравило = Истина;
			
		КонецЕсли;
		
		Если НеобходимоПодставитьНовоеПравило Тогда
			
			ПравилоКонвертации = СписокПКО[0].Значение;
			
		КонецЕсли;
		
		// нашли нужное правило
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события "ПриИзменении" поля ввода источника.
//
Процедура ИсточникПриИзменении(Элемент)
		
	Если ЗначениеЗаполнено(Источник)
		И НЕ ЗначениеЗаполнено(Приемник) Тогда
		
		НаименованиеИсточника = Источник.Наименование;
		
		// ищем приемник по наименованию
		Приемник = Справочники.Свойства.НайтиПоНаименованию(НаименованиеИсточника, , , ОбъектПриемник);
		
		Если НЕ ЗначениеЗаполнено(Приемник)
			И ИмяРеквизитаМожетБытьИзменено(НаименованиеИсточника) Тогда
			
			НовоеНаименованиеСвойства = ПолучитьАналогИмениРеквизита(НаименованиеИсточника);
			
			Приемник = Справочники.Свойства.НайтиПоНаименованию(НовоеНаименованиеСвойства, , , ОбъектПриемник);
									
		КонецЕсли;
		
		АвтоматическиНайтиНужноеПравилоПКО();
		
	КонецЕсли;
	
	ОбновитьТипы();
	
	Наименование = глНаименованиеПКС(ЭтотОбъект);
	
КонецПроцедуры // ИсточникПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода приемника.
//
Процедура ПриемникПриИзменении(Элемент)
	
	Наименование = глНаименованиеПКС(ЭтотОбъект);

    ОбновитьТипы();
	
	АвтоматическиНайтиНужноеПравилоПКО();
	
	ОпределитьДоступностьУстановкиАвтоприведенияКДлине();
	
КонецПроцедуры // ПриемникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода правила конвертации.
//
Процедура ПравилоКонвертацииНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Форма = Справочники.ПравилаКонвертацииОбъектов.ПолучитьФормуВыбора("ФормаВыбора", Элемент);
	Форма.ПараметрОтборПоВладельцу  = Владелец.Владелец;
	Форма.ПараметрВыборПоВладельцу  = Владелец.Владелец;
	
	Форма.НачальноеЗначениеВыбора   = Элемент.Значение;

	Форма.Открыть();

КонецПроцедуры // ПравилоКонвертацииНачалоВыбора()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода правила конвертации.
//
Процедура ПравилоКонвертацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	Элемент.СписокВыбора.Очистить();

	Элемент.СписокВыбора = НайтиПравилаКО(ЭтотОбъект.Владелец.Владелец, Источник, Приемник, Истина);
	
КонецПроцедуры // ПравилоКонвертацииНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" флажка, признака получения их входящих данных.
//
Процедура ПолучитьИзВходящихДанныхПриИзменении(Элемент)

	Если ПолучитьИзВходящихДанных Тогда
		
		Источник = Справочники.Свойства.ПустаяСсылка();
		ОбновитьТипы();
		
	КонецЕсли;

	УстановитьСвойстваЭУ();
	
КонецПроцедуры // ПолучитьИзВходящихДанныхПриИзменении()


// Процедура - обработчик события "Нажатие" кнопки создания нового ПКО.
//
Процедура СоздатьПКОНажатие(Элемент)

	ФормаНовогоПКО = Справочники["ПравилаКонвертацииОбъектов"].ПолучитьФормуНовогоЭлемента();
	
	Если Не Источник.Пустая() Тогда
		Попытка
			ФормаНовогоПКО.Источник = Источник.Типы[0].Тип;
		Исключение КонецПопытки; 
	КонецЕсли; 
	
	Если Не Приемник.Пустая() Тогда
		Попытка
			ФормаНовогоПКО.Приемник = Приемник.Типы[0].Тип;
		Исключение КонецПопытки; 
	КонецЕсли;
	
	ФормаНовогоПКО.СгенерироватьУникальныйКод();
	ФормаНовогоПКО.Наименование = глНаименованиеПКО(ФормаНовогоПКО.ЭтотОбъект);
	ФормаНовогоПКО.Владелец		= Владелец.Владелец;
	
	ОбъектПКО = ФормаНовогоПКО.ЭтотОбъект;
	
	ОбъектПКО.СинхронизироватьПоИдентификатору = ОпределитьНужнаСинхронизацияПоИдентификатору(ОбъектПКО);
	ОбъектПКО.НеЗапоминатьВыгруженные = ОпределитьНужноНеЗапоминатьВыгруженныеОбъекты(ОбъектПКО);
			
	ФормаНовогоПКО.ОткрытьМодально();
	СсылкаНовогоПКО = ФормаНовогоПКО.Ссылка; 
		
	Если ЗначениеЗаполнено(СсылкаНовогоПКО) Тогда
		
		ПравилоКонвертации = СсылкаНовогоПКО;
		
		// нужно спросить рекурсивно создавать новые правила или нет
		ОбъектПКО = ПравилоКонвертации.ПолучитьОбъект();
		Если ОбъектПКО <> Неопределено Тогда
			
			РекурсивноеСозданиеПКО(ОбъектПКО);
			
		КонецЕсли;		
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьПКОНажатие()

// Процедура - обработчик события "ПриСменеСтраницы" панели алгоритмов.
//
Процедура ПанельАлгоритмыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьПиктограммыАлгоритмов(мМассивОбработчиков, ЭлементыФормы.ПанельАлгоритмы, ЭлементыФормы);
	
	ЗаполнитьИмяОбработчика(Элемент.ТекущаяСтраница);
	
КонецПроцедуры // ПанельАлгоритмыПриСменеСтраницы()

Процедура КоманднаяПанель1СкопироватьОбработчикиВыгрузки(Кнопка)
	
	ВыгрузитьКодОбработчиков(ЭтотОбъект.Владелец.Владелец, Истина, ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура КоманднаяПанель1ВставитьОбработчики(Кнопка)
	
	ЗагрузитьКодОбработчиков(ЭтотОбъект.Владелец.Владелец, ЭтаФорма, мМассивОбработчиков);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбновитьТипы()

	ТаблицаТиповИсточникаИПриемника.Очистить();
	
	// заполняем таблицу типами источника и применика
	Если Не Источник.Пустая() Тогда
		
		Для Каждого ТипДанных Из Источник.Типы Цикл
			
			СтрокаТаблицы = ТаблицаТиповИсточникаИПриемника.Добавить();	
			СтрокаТаблицы.ТипИсточника = ТипДанных.Тип;
			СтрокаТаблицы.ИмяТипаИсточника = ТипДанных.Тип.Имя;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не Приемник.Пустая() Тогда
		
		Для Каждого ТипДанных Из Приемник.Типы Цикл
			
			ИмяТипаПриемника = ТипДанных.Тип.Имя;
			СтрокаТаблицы = ТаблицаТиповИсточникаИПриемника.Найти(ИмяТипаПриемника, "ИмяТипаИсточника");
			Если СтрокаТаблицы = Неопределено Тогда
				
				СтрокаТаблицы = ТаблицаТиповИсточникаИПриемника.Добавить();	
				
			КонецЕсли;
			
			СтрокаТаблицы.ТипПриемника = ТипДанных.Тип;
						
		КонецЦикла;
		
	КонецЕсли;	
		
КонецПроцедуры // ОбновитьТипы() 

// Устанавливает доступность реквизита "Источник" в зависимости от значения флага "ПолучитьИзВходящихДанных".
//
Процедура УстановитьСвойстваЭУ()

	Если ПолучитьИзВходящихДанных Тогда
		ЭлементыФормы.Источник.Доступность = Ложь;
	Иначе
		ЭлементыФормы.Источник.Доступность = Истина;
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСвойстваЭУ() 

Процедура КоманднаяПанель1ИнформацияПоОбработчикам(Кнопка)
	
	// вывод информации по обработчикам событий
	ОткрытьОписаниеОбработчиковСобытий("Свойства", ЭлементыФормы.ПанельАлгоритмы.ТекущаяСтраница.Имя, ЭтаФорма);
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	ОбновитьИнформациюОСобытиях();
	
КонецПроцедуры

Процедура ОпределитьДоступностьУстановкиЗначенийПараметров()
	
	ЭлементыФормы.ПомещатьДанныеВПараметр.Доступность = (Владелец.Владелец.Источник.Приложение <> Перечисления.Приложения.Предприятие77)
		И (Владелец.Владелец.Приемник.Приложение <> Перечисления.Приложения.Предприятие77);
	
КонецПроцедуры

Процедура ОпределитьДоступностьУстановкиАвтоприведенияКДлине()
	
	Если Приемник.КвалификаторыСтроки_Длина <> 0
		И Владелец.Владелец.Источник.Приложение <> Перечисления.Приложения.Предприятие77 Тогда
		
		ВозможенДоступ = Истина;
		
	Иначе
		
		ВозможенДоступ = Ложь;
		
	КонецЕсли;
	
	ЭлементыФормы.АвтоматическиПриводитьЗначениеКДлинеПриемника.Доступность = ВозможенДоступ;
	ЭлементыФормы.ПриведениеКДлине.Доступность = ВозможенДоступ;
	
КонецПроцедуры

Процедура ПередаватьДанныеВПриемникПриИзменении(Элемент)
	
	Если ПередаватьДанныеВПриемник Тогда
		ЭлементыФормы.ПанельВыбораТипаСохранения.ТекущаяСтраница = ЭлементыФормы.ПанельВыбораТипаСохранения.Страницы.ВПриемник;
	Иначе
		ЭлементыФормы.ПанельВыбораТипаСохранения.ТекущаяСтраница = ЭлементыФормы.ПанельВыбораТипаСохранения.Страницы.ВПараметр;
	КонецЕсли;
	
	//ЭлементыФормы.Поиск.Доступность = ПередаватьДанныеВПриемник;
	
	ЭлементыФормы.ПоискПоДатеНаРавенство.Доступность = ПередаватьДанныеВПриемник 
		И Поиск
		И Владелец.Владелец.Источник.Приложение <> Перечисления.Приложения.Предприятие77
		И Владелец.Владелец.Приемник.Приложение <> Перечисления.Приложения.Предприятие77
		И Приемник.Наименование = "Дата";
	
КонецПроцедуры

Процедура ТаблицаТиповИсточникаИПриемникаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыМетаданныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки.ТипИсточника, "ТипИсточника");
	ОформлениеСтроки.Ячейки.ТипИсточника.ОтображатьКартинку = Истина;
	
	ОбъектыМетаданныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки.ТипПриемника, "ТипПриемника");
	ОформлениеСтроки.Ячейки.ТипПриемника.ОтображатьКартинку = Истина;
	
КонецПроцедуры

Процедура ПриведениеКДлинеНажатие(Элемент)
	
	ФормаТестирования = ПолучитьОбщуюФорму("ПриведениеНомераКДлине");	
	
	Если ЗначениеЗаполнено(Источник) Тогда
		ФормаТестирования.ДлинаСтрокиИсточника = Источник.КвалификаторыСтроки_Длина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Приемник) Тогда
		ФормаТестирования.ДлинаНомераВПриемнике = Приемник.КвалификаторыСтроки_Длина;
	КонецЕсли;	
		
	ФормаТестирования.Открыть();
	
КонецПроцедуры

Процедура ПорядокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИзменитьПорядокИнтерактивно(Элемент, Направление, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПоискПриИзменении(Элемент)
	
	ПередаватьДанныеВПриемникПриИзменении(Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьИмяОбработчика(ТекущаяСтраница)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Родитель) Тогда
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Родитель.Источник.Наименование) Тогда
			
			ИмяРодителя = "_" + СокрЛП(ЭтотОбъект.Родитель.Источник.Наименование);
			
		Иначе
			
			ИмяРодителя = "_" + СокрЛП(ЭтотОбъект.Родитель.Приемник.Наименование);
			
		КонецЕсли;
		
	Иначе
		
		ИмяРодителя="";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Источник) Тогда
		
		Свойство = СокрЛП(ЭтотОбъект.Источник.Наименование);
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.Приемник) Тогда 
		
		Свойство = СокрЛП(ЭтотОбъект.Приемник.Наименование);
		
	Иначе
		
		Свойство = СокрЛП(ЭтотОбъект.ИмяПараметраДляПередачи);
		
	КонецЕсли;
	
	ИмяСобытия = Сред(ТекущаяСтраница.Имя, 9);
	КодВладельца = СокрЛП(Формат(ЭтотОбъект.Владелец.Код, "ЧГ=0"));
	ДлинаКода = СтрДлина(КодВладельца);
	КодПКС = СокрЛП(Формат(ЭтотОбъект.Код, "ЧГ=0"));
	
	ИмяОбработчика = "ПКС_[КодВладельца][ИмяРодителя]_[Свойство]_[ИмяСобытия]_[КодПКС]_[ДлинаКода]";
	ИмяОбработчика = СтрЗаменить(ИмяОбработчика, "[КодВладельца]", КодВладельца);
	ИмяОбработчика = СтрЗаменить(ИмяОбработчика, "[ИмяРодителя]", ИмяРодителя);
	ИмяОбработчика = СтрЗаменить(ИмяОбработчика, "[Свойство]", Свойство);
	ИмяОбработчика = СтрЗаменить(ИмяОбработчика, "[ИмяСобытия]", ИмяСобытия);
	ИмяОбработчика = СтрЗаменить(ИмяОбработчика, "[КодПКС]", КодПКС);
	ИмяОбработчика = СтрЗаменить(ИмяОбработчика, "[ДлинаКода]", ДлинаКода);
	
	ЭлементыФормы["ИмяОбработчика"+ИмяСобытия].Значение = ИмяОбработчика;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РЕДАКТИРОВАНИЕ АЛГОРИТМОВ ОБРАБОТЧИКОВ

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковИзменить(Кнопка)
	
	РедакторОбработчиковКлиент.КомандаРедактораИзменить(ЭлементыФормы, мМассивОбработчиков, мТекстОбработчикаДоИзменений, мПутьКФайлуДоИзменений, мПутьКФайлуТекущий);
	
	ЗапуститьПриложение(мПутьКФайлуТекущий);
	ПодключитьОбработчикОжидания("ПроверитьРазличияВФайлах", 3);
	
КонецПроцедуры

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковЗаписать(Кнопка)
	
	ОтключитьОбработчикОжидания("ПроверитьРазличияВФайлах");
	
	РедакторОбработчиковКлиент.КомандаРедактораЗаписать(ЭлементыФормы, мМассивОбработчиков, мПутьКФайлуТекущий);
	
КонецПроцедуры

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковОтменитьИзменения(Кнопка)
	
	ОтключитьОбработчикОжидания("ПроверитьРазличияВФайлах");
	
	РедакторОбработчиковКлиент.КомандаРедактораОтменитьИзменения(ЭлементыФормы, мМассивОбработчиков, мТекстОбработчикаДоИзменений);
	
КонецПроцедуры

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковПоказатьИзменения(Кнопка)
	
	РедакторОбработчиковКлиент.КомандаРедактораПоказатьРазличия(мПутьКФайлуДоИзменений, мПутьКФайлуТекущий);
	
КонецПроцедуры

//
//benony
Процедура ПроверитьРазличияВФайлах()
	
	РедакторОбработчиковКлиент.ОбработчикОжиданияПроверитьРазличия(ЭлементыФормы, мПутьКФайлуДоИзменений, мПутьКФайлуТекущий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мМассивОбработчиков = ПолучитьМассивИменОбработчиков("Свойства");

ТаблицаТиповИсточникаИПриемника.Индексы.Добавить("ИмяТипаИсточника");
