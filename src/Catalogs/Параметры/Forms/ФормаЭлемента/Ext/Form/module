
//Вспомогательная переменная (массив) для хранения обработчиков
Перем мМассивОбработчиков;

//{benony
Перем мТекстОбработчикаДоИзменений;
Перем мПутьКФайлуДоИзменений;
Перем мПутьКФайлуТекущий;
//}benony

Процедура КодПриИзменении(Элемент)
	
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = Код;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИнформациюОСобытиях()
	
	ПолучитьАлгоритмыПриОткрытии(ЭтаФорма, ЭтотОбъект, мМассивОбработчиков);
	
	АктивизироватьСтраницуСобытия(ЭтотОбъект, мМассивОбработчиков, ЭлементыФормы.ПанельАлгоритмы, ЭлементыФормы);	
	
КонецПроцедуры

// Процедура - обработчик события "ПриСменеСтраницы" панели закладок.
//
Процедура ПанельАлгоритмыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьПиктограммыАлгоритмов(мМассивОбработчиков, ЭлементыФормы.ПанельАлгоритмы, ЭлементыФормы);
	
	ЗаполнитьИмяОбработчика(Элемент.ТекущаяСтраница);
	
КонецПроцедуры // ПанельАлгоритмыПриСменеСтраницы()

Процедура ПередЗаписью(Отказ)
	
	УстановитьАлгоритмыПередЗаписью(ЭтаФорма, ЭтотОбъект, мМассивОбработчиков);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ОбновитьИнформациюОСобытиях();
	ОбновитьДоступностьПередаватьПараметрВПриемник();
	
	Если НЕ ЭтоПриложение8(ЭтотОбъект.Владелец.Источник.Приложение) Или НЕ ЭтоПриложение8(ЭтотОбъект.Владелец.Приемник.Приложение) Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.ОтладкаОбработчиков);
	КонецЕсли;
	
	РедакторОбработчиковКлиент.УстановитьСостояниеКнопокПанелиРедактора(ЭлементыФормы, "ПриОткрытии"); //benony
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	ОбновитьИнформациюОСобытиях();
	
КонецПроцедуры

Процедура ДействияФормыИнформацияПоОбработчикам(Кнопка)
	
	// вывод информации по обработчикам событий
	ОткрытьОписаниеОбработчиковСобытий("Параметры", ЭлементыФормы.ПанельАлгоритмы.ТекущаяСтраница.Имя, ЭтаФорма);
	
КонецПроцедуры

Процедура ТипОбъектаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаТипов = Справочники.Объекты.ПолучитьФормуВыбора(,Элемент);
	ФормаТипов.ПараметрОтборПоВладельцу  = Владелец.Источник;
	ФормаТипов.ПараметрВыборПоВладельцу  = Владелец.Источник;
	ФормаТипов.Открыть();
	
КонецПроцедуры

Процедура ПравилоКонвертацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();

	Элемент.СписокВыбора = НайтиПравилаКОПоКонвертацииИТИпуИсточника(Владелец, ТипОбъекта);
	
КонецПроцедуры

Процедура ТипОбъектаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ТипОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбораПравилКонвертации = НайтиПравилаКОПоКонвертацииИТИпуИсточника(Владелец, ТипОбъекта);
	
	КоличествоЭлементовВСписке = СписокВыбораПравилКонвертации.Количество();
	
	Если КоличествоЭлементовВСписке = 0 Тогда
		
		ПравилоКонвертации = Справочники.ПравилаКонвертацииОбъектов.ПустаяСсылка();
		
	ИначеЕсли КоличествоЭлементовВСписке = 1 Тогда
		
		ПравилоКонвертации = СписокВыбораПравилКонвертации[0].Значение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДоступностьПередаватьПараметрВПриемник()
	
	ЭлементыФормы.ПередаватьПараметрПриВыгрузке.Доступность = УстанавливатьВДиалоге;
	
КонецПроцедуры

Процедура УстанавливатьВДиалогеПриИзменении(Элемент)
	
	ОбновитьДоступностьПередаватьПараметрВПриемник();
	
КонецПроцедуры

Процедура ДействияФормыСкопироватьОбработчикиЗагрузки(Кнопка)
	
	ВыгрузитьКодОбработчиков(ЭтотОбъект.Владелец, Ложь, ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыВставитьОбработчики(Кнопка)
	
	ЗагрузитьКодОбработчиков(ЭтотОбъект.Владелец, ЭтаФорма, мМассивОбработчиков);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьИмяОбработчика(ТекущаяСтраница)
	
	ИмяСобытия = Сред(ТекущаяСтраница.Имя, 9);
	ИмяОбработчика = "Параметры_[КодПараметра]_[ИмяСобытия]";
	ИмяОбработчика = СтрЗаменить(ИмяОбработчика, "[КодПараметра]", СокрЛП(ЭтотОбъект.Код));
	ИмяОбработчика = СтрЗаменить(ИмяОбработчика, "[ИмяСобытия]", ИмяСобытия);
	ЭлементыФормы["ИмяОбработчика"+ИмяСобытия].Значение = ИмяОбработчика;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РЕДАКТИРОВАНИЕ АЛГОРИТМОВ ОБРАБОТЧИКОВ

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковИзменить(Кнопка)
	
	РедакторОбработчиковКлиент.КомандаРедактораИзменить(ЭлементыФормы, мМассивОбработчиков, мТекстОбработчикаДоИзменений, мПутьКФайлуДоИзменений, мПутьКФайлуТекущий);
	
	ЗапуститьПриложение(мПутьКФайлуТекущий);
	ПодключитьОбработчикОжидания("ПроверитьРазличияВФайлах", 3);
	
КонецПроцедуры

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковЗаписать(Кнопка)
	
	ОтключитьОбработчикОжидания("ПроверитьРазличияВФайлах");
	
	РедакторОбработчиковКлиент.КомандаРедактораЗаписать(ЭлементыФормы, мМассивОбработчиков, мПутьКФайлуТекущий);
	
КонецПроцедуры

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковОтменитьИзменения(Кнопка)
	
	ОтключитьОбработчикОжидания("ПроверитьРазличияВФайлах");
	
	РедакторОбработчиковКлиент.КомандаРедактораОтменитьИзменения(ЭлементыФормы, мМассивОбработчиков, мТекстОбработчикаДоИзменений);
	
КонецПроцедуры

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковПоказатьИзменения(Кнопка)
	
	РедакторОбработчиковКлиент.КомандаРедактораПоказатьРазличия(мПутьКФайлуДоИзменений, мПутьКФайлуТекущий);
	
КонецПроцедуры

//
//benony
Процедура ПроверитьРазличияВФайлах()
	
	РедакторОбработчиковКлиент.ОбработчикОжиданияПроверитьРазличия(ЭлементыФормы, мПутьКФайлуДоИзменений, мПутьКФайлуТекущий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мМассивОбработчиков = ПолучитьМассивИменОбработчиков("Параметры");

