////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//Вспомогательная переменная (массив) для хранения обработчиков
Перем мМассивОбработчиков;

Перем мНовыйИсточник;
Перем мНовыйПриемник;

Перем мОчищатьПустыеСвойства;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РедактированиеЭлементаВФорме = Истина;
	
	Если глТекущийПользователь.НеИспользоватьМастерНастроекДляПКО = Ложь Тогда
	
		Отказ = Истина;
		ФормаНовая = ПолучитьФорму("ФормаМастераНастройки", ВладелецФормы);
		
		Если МодальныйРежим Тогда
			РезультатОткрытия = ФормаНовая.ОткрытьМодально();
		Иначе
			ФормаНовая.Открыть();
		КонецЕсли;
		
		Возврат;
	
	КонецЕсли;
	
	ОбновитьИнформациюОЗапрашиваемыхДанных();		
	
	Если ЭтоНовый() Тогда
		
		ТекущийЭлемент = ЭлементыФормы.Источник;
		
	Иначе
		
		ТекущийЭлемент = ЭлементыФормы.ПанельАлгоритмы;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ОпределитьДоступностьУстановкиФлажковПКО(ЭтаФорма, ЭтотОбъект);
	
	Источник8 = ЭтоПриложение8(Владелец.Источник.Приложение);
	Приемник8 = ЭтоПриложение8(Владелец.Приемник.Приложение);
	
	// панель настроек для on-line обмена нужна только при обмене v8-v8	
	Если НЕ Приемник8 ИЛИ
		 НЕ Источник8 Тогда
		 
		ЭлементыФормы.ПанельЗакладок.Страницы.НастройкиOnLine.Видимость = Ложь;
		
	Иначе
		
		ЭлементыФормы.ПанельЗакладок.Страницы.НастройкиOnLine.Видимость = Истина;
		
	КонецЕсли;
	
	ПолучитьАлгоритмыПриОткрытии(ЭтаФорма, ЭтотОбъект, мМассивОбработчиков);

	КонфигурацияИсточник = Владелец.Источник;
	КонфигурацияПриемник = Владелец.Приемник;
    
	АктивизироватьСтраницуСобытия(ЭтотОбъект, мМассивОбработчиков, ЭлементыФормы.ПанельАлгоритмы, ЭлементыФормы);
	
	Если НЕ ЭтоПриложение8(КонфигурацияИсточник.Приложение) Или НЕ ЭтоПриложение8(КонфигурацияПриемник.Приложение) Тогда
		ЭлементыФормы.ГлавнаяКоманднаяПанель.Кнопки.Удалить(ЭлементыФормы.ГлавнаяКоманднаяПанель.Кнопки.ОтладкаОбработчиков);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)
	
	ПроверитьВозможностьСозданияПКОДляОбъекта(Отказ, ЭтотОбъект.Источник);
	ПроверитьВозможностьСозданияПКОДляОбъекта(Отказ, ЭтотОбъект.Приемник);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьАлгоритмыПередЗаписью(ЭтаФорма, ЭтотОбъект, мМассивОбработчиков);
	
	мНовыйПриемник = Ложь;
	мНовыйИсточник = Ложь;
	
	Если Не ЭтоНовый() Тогда
		
		мНовыйИсточник = (ЭтотОбъект.Источник <> ЭтотОбъект.Ссылка.Источник);	    
		мНовыйПриемник = (ЭтотОбъект.Приемник <> ЭтотОбъект.Ссылка.Приемник);
		
	КонецЕсли;
	
	// если были изменены источник или приемник, то необходимо
	// запросить пользователя параметры для синхронизации ПКС
	// и его согласие на выполнение этой синхронизации
	Если мНовыйИсточник ИЛИ мНовыйПриемник Тогда
		
		ФормаНастройкиСинхронизацииПравил = ПолучитьФорму("ФормаНастройкиСинхронизацииПравил");
		ФормаНастройкиСинхронизацииПравил.ОчищатьПустыеСвойства = мОчищатьПустыеСвойства;
		Если ФормаНастройкиСинхронизацииПравил.ОткрытьМодально() = Истина Тогда
			
			// пользователь согласен
			// передаем пользовательские параметры для обработки
			мОчищатьПустыеСвойства = ФормаНастройкиСинхронизацииПравил.ОчищатьПустыеСвойства;
			
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	Если мНовыйИсточник 
		Или мНовыйПриемник Тогда
		
    	ФормаОбработки = Обработки.СинхронизацияПравил.ПолучитьФорму(, ЭтаФорма);
    	ФормаОбработки.ПКО = ЭтотОбъект.Ссылка;
    	ФормаОбработки.НовыйИсточник = Источник;
    	ФормаОбработки.НовыйПриемник = Приемник;
		ФормаОбработки.ОчищатьПустыеСвойства = мОчищатьПустыеСвойства;
    	ФормаОбработки.ОткрытьМодально();
		
    КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ

// Процедура - обработчик события "Регулирование" поля ввода порядка.
//
Процедура ПорядокРегулирование(Элемент, Направление, СтандартнаяОбработка)

	ИзменитьПорядокИнтерактивно(Элемент, Направление, СтандартнаяОбработка);
	
КонецПроцедуры // ПорядокРегулирование()

// Процедура - обработчик события "Нажатие" кнопки сформировать код.
//
Процедура СформироватьКодНажатие(Элемент)
	
	СгенерироватьУникальныйКод();
		
КонецПроцедуры // СформироватьКодНажатие()

// Процедура - обработчик события "Нажатие" кнопки сформировать наименование.
//
Процедура СформироватьНаименованиеНажатие(Элемент)

    Наименование = глНаименованиеПКО(ЭтотОбъект);
	
КонецПроцедуры // СформироватьНаименованиеНажатие()

// Процедура - обработчик события "ПриСменеСтраницы" панели закладок.
//
Процедура ПанельАлгоритмыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьПиктограммыАлгоритмов(мМассивОбработчиков, ЭлементыФормы.ПанельАлгоритмы, ЭлементыФормы);
	
	ЗаполнитьИмяОбработчика(Элемент.ТекущаяСтраница);
	
КонецПроцедуры // ПанельАлгоритмыПриСменеСтраницы()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ГлавнаяКоманднаяПанельНайтиВСписке(Кнопка)

	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПравилОбмена = ПолучитьОбщуюФорму("ПравилаОбмена", , 1);
	ФормаПравилОбмена.Конвертация = ЭтотОбъект.Владелец;
	ФормаПравилОбмена.ЭлементыФормы.ПравилаКонвертацииОбъектов.ТекущаяСтрока = ЭтотОбъект.Ссылка;
	
	Если НЕ ФормаПравилОбмена.Открыта() Тогда
	
		ФормаПравилОбмена.Открыть();
		
	Иначе	
		
		ФормаПравилОбмена.Активизировать();
		
	КонецЕсли;		
	
КонецПроцедуры // ГлавнаяКоманднаяПанельНайтиВСписке()

Процедура ИсточникПриИзменении(Элемент)
		
	ИсточникПриИзмененииПКО(ЭтотОбъект);	
	
КонецПроцедуры

Процедура ПриемникПриИзменении(Элемент)
	
	ПриемникПриИзмененииПКО(ЭтотОбъект);
	
КонецПроцедуры

Процедура ГлавнаяКоманднаяПанельИнформацияПоОбработчикам(Кнопка)
	
	// вывод информации по обработчикам событий
	ОткрытьОписаниеОбработчиковСобытий("ПравилаКонвертацииОбъектов", ЭлементыФормы.ПанельАлгоритмы.ТекущаяСтраница.Имя, ЭтаФорма);
	
КонецПроцедуры

Процедура СинхронизироватьПоИдентификаторамПриИзменении(Элемент)
	
	ОпределитьДоступностьУстановкиФлажковПКО(ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура КнопкаПечатьСтруктурыНажатие(Элемент)
	
	Если ЗапрашиваемыеДанные.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПриложение8(Владелец.Источник.Приложение) Тогда

		Стр = "ВходящиеДанные = Новый Структура(""";

		МаксДлина = 0;
		Для каждого СтрокаТЗ Из ЗапрашиваемыеДанные.Строки Цикл
			
			ИмяСвойства = СтрокаТЗ.Свойство.Наименование;
			Стр = Стр + ИмяСвойства + ", ";
			
			Если СтрДлина(ИмяСвойства) > МаксДлина Тогда
				МаксДлина = СтрДлина(ИмяСвойства);
			КонецЕсли; 
			
		КонецЦикла; 
		
		Стр = Сред(Стр, 1, СтрДлина(Стр) - 2);
		
		Стр = Стр + """);" + Символы.ПС;
		
		Для каждого СтрокаТЗ Из ЗапрашиваемыеДанные.Строки Цикл
			
			ИмяСвойства = СтрокаТЗ.Свойство.Наименование;
			
			Если СтрокаТЗ.ЭтоГруппа Тогда
				
				ТаблЧасть = "ВходящиеДанные." + глДополнитьСтроку(ИмяСвойства, МаксДлина);
				Стр = Стр + ТаблЧасть + " = Новый ТаблицаЗначений;" + Символы.ПС;
				Выборка = Справочники.ПравилаКонвертацииСвойств.Выбрать(СтрокаТЗ.ПКС, Ссылка, , "Порядок");
				Пока Выборка.Следующий() Цикл
					
					Стр = Стр + ТаблЧасть + ".Колонки.Добавить(""" + Выборка.Приемник.Наименование + """);" + Символы.ПС;
					
				КонецЦикла;
				
			Иначе
				
				Стр = Стр + "ВходящиеДанные." + глДополнитьСтроку(ИмяСвойства, МаксДлина) + " = ;" + Символы.ПС;
				
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		
		// формируем данные для 7.7
		Стр = "ВходящиеДанные = СоздатьОбъект(""СписокЗначений"");";

		МаксДлина = 0;
		Для каждого СтрокаТЗ Из ЗапрашиваемыеДанные.Строки Цикл
			
			ИмяСвойства = СтрокаТЗ.Свойство.Наименование;
			Если СтрокаТЗ.ЭтоГруппа Тогда
				Стр = Стр + Символы.ПС + "ВходящиеДанные.Установить(""" + СтрокаТЗ.Свойство.Наименование + """, Таб" + СтрокаТЗ.Свойство.Наименование + ");";
			Иначе
				Стр = Стр + Символы.ПС + "ВходящиеДанные.Установить(""" + СтрокаТЗ.Свойство.Наименование + """, );";
			КонецЕсли;			
			
		КонецЦикла; 
		
		Стр = Стр + Символы.ПС + Символы.ПС;
		
		Для каждого СтрокаТЗ Из ЗапрашиваемыеДанные.Строки Цикл
			
			
			Если СтрокаТЗ.ЭтоГруппа Тогда
				
				ИмяСвойства = СтрокаТЗ.Свойство.Наименование;
				ИмяТаблицы = "Таб" + ИмяСвойства;
				Стр = Стр + ИмяТаблицы + " = СоздатьОбъект(""ТаблицаЗначений"");" + Символы.ПС;
				
				Выборка = Справочники.ПравилаКонвертацииСвойств.Выбрать(СтрокаТЗ.ПКС, Ссылка, , "Порядок");
				Пока Выборка.Следующий() Цикл
					
					Стр = Стр + ИмяТаблицы + ".НоваяКолонка(""" + Выборка.Приемник.Наименование + """); " + Символы.ПС;
					
				КонецЦикла;
				
				Стр = Стр + Символы.ПС;
				
			КонецЕсли; 
			
		КонецЦикла;		
		
	КонецЕсли;
	
	ФормаРедактирования = ПолучитьОбщуюФорму("ФормаредактированияТекста");
	ФормаРедактирования.УстановитьРедактируемыйТекст(Стр);
	ФормаРедактирования.Открыть();	
	
КонецПроцедуры

Функция ДобавитьРодителяВдерево(Родитель, СтрокиДерева)
	
	Если Не ЗначениеЗаполнено(Родитель) Тогда
		Возврат СтрокиДерева;
	Иначе
		
		СтрокаДерева = СтрокиДерева.Строки.Найти(Родитель, "ПКС", Истина);
		Если СтрокаДерева <> Неопределено тогда
			Возврат СтрокаДерева;
		Иначе
			
			СтрокаПредка = ДобавитьРодителяВдерево(Родитель.Родитель, СтрокиДерева);
			
			Стр = СтрокаПредка.Строки.Добавить();
			Стр.ПКС      = Родитель;
			Стр.Свойство = Родитель.Приемник;
			Стр.Тип      = Родитель.Приемник.ТипыСтрокой;
			Стр.Вид      = Родитель.Приемник.Вид;
			Стр.ЭтоГруппа = Истина;
			
			Возврат Стр;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецФункции

Процедура ОбойтиВыборкуИПостроитьДерево(Выборка, СтрокиДерева)
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаПредка = ДобавитьРодителяВдерево(Выборка.Родитель, СтрокиДерева);
		Стр = СтрокаПредка.Строки.Добавить();
		Стр.ПКС      = Выборка.Ссылка;
		Стр.Свойство = Выборка.Приемник;
		Стр.Тип      = Выборка.ТипыСтрокой;
		Стр.Вид      = Выборка.Вид;					
		Стр.ЭтоГруппа = Выборка.ЭтоГруппа;
				
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода правила конвертации.
//
Процедура ОбновитьИнформациюОЗапрашиваемыхДанных()

	ЗапрашиваемыеДанные.Строки.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		ЭлементыФормы.ПанельЗакладок.Страницы.ПараметрыИзВходящихДанных.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаКонвертацииСвойств.Ссылка КАК Ссылка,
	               |	ПравилаКонвертацииСвойств.Приемник КАК Приемник,
	               |	ПравилаКонвертацииСвойств.Приемник.ТипыСтрокой КАК ТипыСтрокой,
	               |	ПравилаКонвертацииСвойств.Приемник.Вид КАК Вид,
	               |	ПравилаКонвертацииСвойств.ЭтоГруппа,
	               |	ПравилаКонвертацииСвойств.Родитель
	               |ИЗ
	               |	Справочник.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
	               |ГДЕ
	               |	ПравилаКонвертацииСвойств.Владелец = &Владелец
	               |	И ПравилаКонвертацииСвойств.ПолучитьИзВходящихДанных = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПравилаКонвертацииСвойств.Порядок";
				   
	Запрос.УстановитьПараметр("Владелец", Ссылка);			   
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	
	ОбойтиВыборкуИПостроитьДерево(Выборка, ЗапрашиваемыеДанные);
	
	НаличиеПолучаемыхВходящихДанных = ЗапрашиваемыеДанные.Строки.Количество() <> 0;
			
	ЭлементыФормы.ПанельЗакладок.Страницы.ПараметрыИзВходящихДанных.Видимость = НаличиеПолучаемыхВходящихДанных;
	
КонецПроцедуры // ПравилоКонвертацииПриИзменении()

Процедура НеЗапоминатьВыгруженныеПриИзменении(Элемент)
	
	ОпределитьДоступностьУстановкиФлажковПКО(ЭтаФорма, ЭтотОбъект);	
		
КонецПроцедуры

Процедура ЗапрашиваемыеДанныеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Ячейки = ОформлениеСтроки.Ячейки;

	Ячейки.Свойство.ОтображатьКартинку = Истина;

	Если ДанныеСтроки.ЭтоГруппа Тогда
		Ячейки.Свойство.ИндексКартинки = 0;
	Иначе
		Ячейки.Свойство.ИндексКартинки = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура НижняяКоманднаяПанельПомощь(Кнопка)
	
	ПоказатьИнформациюОБыстромОсвоении("ПодробноеЗнакомствоСПравиламиКонвертацииОбъектов");
	
КонецПроцедуры

Процедура СформироватьНаименование1Нажатие(Элемент)
	
	УстановитьГруппуПоУмолчаниюДляПКО(ЭтотОбъект);
	
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовОписаниеНастройкиДляПользователяОткрытие(Элемент, СтандартнаяОбработка)
	
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста", ЭтаФорма, Строка(Новый УникальныйИдентификатор));
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(Элемент.Значение);
	РезультатОткрытияФормы = ФормаРедактированияТекста.ОткрытьМодально();
	
	Если РезультатОткрытияФормы = Истина Тогда
		
		Элемент.Значение = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();	
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ГлавнаяКоманднаяПанельСкопироватьОбработчикиВыгрузки(Кнопка)
	
	ВыгрузитьКодОбработчиков(ЭтотОбъект.Владелец, Истина, ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ГлавнаяКоманднаяПанельСкопироватьОбработчикиЗагрузки(Кнопка)
	
	ВыгрузитьКодОбработчиков(ЭтотОбъект.Владелец, Ложь, ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ГлавнаяКоманднаяПанельВставитьОбработчики(Кнопка)
	
	ЗагрузитьКодОбработчиков(ЭтотОбъект.Владелец, ЭтаФорма, мМассивОбработчиков);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьИмяОбработчика(ТекущаяСтраница)
	
	ИмяСобытия = Сред(ТекущаяСтраница.Имя, 9);
	ИмяОбработчика = "ПКО_[КодПКО]_[ИмяСобытия]";
	ИмяОбработчика = СтрЗаменить(ИмяОбработчика, "[КодПКО]", СокрЛП(ЭтотОбъект.Код));
	ИмяОбработчика = СтрЗаменить(ИмяОбработчика, "[ИмяСобытия]", ИмяСобытия);
	ЭлементыФормы["ИмяОбработчика"+ИмяСобытия].Значение = ИмяОбработчика;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мМассивОбработчиков = ПолучитьМассивИменОбработчиков("ПравилаКонвертацииОбъектов");

мОчищатьПустыеСвойства = Истина;