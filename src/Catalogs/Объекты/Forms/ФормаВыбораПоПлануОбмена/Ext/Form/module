
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ПланОбмена.Пустая() Тогда
		
		Предупреждение("Не задан план обмена! Форма не может быть открыта.", 5);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ЗаполнитьСписокФормы();
	
КонецПроцедуры

Процедура ДействияФормыВыбрать(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.СписокОбъектовСоставаПланаОбмена.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ОтбработатьВыборЭлемента(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СписокОбъектовСоставаПланаОбмена

Процедура СписокОбъектовСоставаПланаОбменаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	УдалитьПустыеГруппыОбъектовМетаданных(ДеревоОбъектовСоставаПланаОбмена);
	
	Для Каждого ОформлениеСтроки ИЗ ОформленияСтрок Цикл
		
		Если ОформлениеСтроки.ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыМетаданныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ОформлениеСтроки.ДанныеСтроки, "Ссылка");
		
		ОформлениеСтроки.Ячейки.Ссылка.УстановитьТекст(ОформлениеСтроки.ДанныеСтроки.Синоним);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СписокОбъектовСоставаПланаОбменаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОтбработатьВыборЭлемента(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьСписокФормы()
	
	ТекстЗапроса = "
	|//////////////////////////////////////////////////////////////////////////////// {ТаблицаСортировкиГруппОбъектовМетаданных}
	|ВЫБРАТЬ
	|	Наименование,
	|	ПорядокСортировки
	|ПОМЕСТИТЬ ТаблицаСортировкиГруппОбъектовМетаданных
	|ИЗ
	|	&ТаблицаСортировкиГруппОбъектовМетаданных КАК ТаблицаСортировкиГруппОбъектовМетаданных
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// {СоставПланаОбмена}
	|ВЫБРАТЬ
	|	СвойстваТипы.Тип                    КАК Объект,
	|	СвойстваТипы.Ссылка.Авторегистрация КАК Авторегистрация
	|ПОМЕСТИТЬ СоставПланаОбмена
	|ИЗ
	|	Справочник.Свойства.Типы КАК СвойстваТипы
	|ГДЕ
	|	  СвойстваТипы.Ссылка.Владелец = &ПланОбмена
	|	И СвойстваТипы.Ссылка.Вид      = ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.ЭлементСоставаПланаОбмена)
	|;
	|
	|ВЫБРАТЬ
	|	СправочникОбъекты.Имя             КАК Имя,
	|	СправочникОбъекты.Тип             КАК Тип,
	|	СправочникОбъекты.Ссылка          КАК Ссылка,
	|	СправочникОбъекты.ЭтоГруппа       КАК ЭтоГруппа,
	|	СправочникОбъекты.Синоним         КАК Синоним,
	|	СправочникОбъекты.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.Объекты КАК СправочникОбъекты
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	СоставПланаОбмена КАК СоставПланаОбмена
	|ПО
	|	СправочникОбъекты.Ссылка = СоставПланаОбмена.Объект
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТаблицаСортировкиГруппОбъектовМетаданных КАК ТаблицаСортировкиГруппОбъектовМетаданных
	|ПО
	|	  СправочникОбъекты.Наименование = ТаблицаСортировкиГруппОбъектовМетаданных.Наименование
	|	И СправочникОбъекты.ЭтоГруппа = Истина
	|
	|ГДЕ
	|	Не СправочникОбъекты.ПометкаУдаления
	|	И СправочникОбъекты.Владелец = &Владелец
	|	И СправочникОбъекты.Ссылка В ИЕРАРХИИ(&МассивГрупп)
	|	И СправочникОбъекты.Наименование <> &ИмяРегистраСоответствия
	|	И (СправочникОбъекты.ЭтоГруппа ИЛИ НЕ СоставПланаОбмена.Объект ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочникОбъекты.ЭтоГруппа ИЕРАРХИЯ,
	|	ТаблицаСортировкиГруппОбъектовМетаданных.ПорядокСортировки,
	|	СправочникОбъекты.Синоним
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПланОбмена",  ПланОбмена);
	Запрос.УстановитьПараметр("Владелец",    ПланОбмена.Владелец);
	Запрос.УстановитьПараметр("МассивГрупп", ПолучитьМассивГрупп());
	Запрос.УстановитьПараметр("ИмяРегистраСоответствия", глИмяРегистраСоответствияОбъектовИнформационныхБаз());
	Запрос.УстановитьПараметр("ТаблицаСортировкиГруппОбъектовМетаданных", ТаблицаСортировкиГруппОбъектовМетаданных());
	
	// загружаем в дерево значений результат запроса
	ДеревоОбъектовСоставаПланаОбмена = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТекущаяСтрока = ДеревоОбъектовСоставаПланаОбмена.Строки.Найти(НачальноеЗначениеВыбора, "Ссылка", Истина);
	
	// позиционируемся в табличном поле на ранее выбранной строке
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ЭлементыФормы.СписокОбъектовСоставаПланаОбмена.ТекущаяСтрока = ТекущаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМассивГрупп()
	
	МассивГрупп = Новый Массив;
	
	// ссылочные типы данных
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("Справочники"));
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("Документы"));
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("ПланыВидовХарактеристик"));
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("ПланыСчетов"));
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("ПланыВидовРасчета"));
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("БизнесПроцессы"));
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("Задачи"));
	
	// регистры
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("РегистрыСведений"));
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("РегистрыНакопления"));
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("РегистрыБухгалтерии"));
	ДобавитьЭлементВМассив(МассивГрупп, глПолучитьИмяГруппыОбъектовПоНаименованию("РегистрыРасчета"));
	
	Возврат МассивГрупп;
	
КонецФункции

Процедура ДобавитьЭлементВМассив(МассивГрупп, Имя)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СправочникОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Объекты КАК СправочникОбъекты
	|ГДЕ
	|	СправочникОбъекты.ЭтоГруппа
	|	И СправочникОбъекты.Владелец = &Владелец
	|	И СправочникОбъекты.Имя      = &Имя
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", ПланОбмена.Владелец);
	Запрос.УстановитьПараметр("Имя",      Имя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		МассивГрупп.Добавить(Выборка.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтбработатьВыборЭлемента(ВыбраннаяСтрока)
	
	Если Не ВыбраннаяСтрока.ЭтоГруппа Тогда
		
		Закрыть(ВыбраннаяСтрока.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПустыеГруппыОбъектовМетаданных(ДеревоЗначений)
	
	ОбратныйИндекс = ДеревоЗначений.Строки.Количество() - 1;
	
	Пока ОбратныйИндекс >= 0 Цикл
		
		СтрокаДерева = ДеревоЗначений.Строки[ОбратныйИндекс];
		
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			
			ДеревоЗначений.Строки.Удалить(ОбратныйИндекс);
			
		КонецЕсли;
		
		ОбратныйИндекс = ОбратныйИндекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры
