Перем мФормаВыбораСвойствОбъекта;
Перем мФормаВыбораОбъекта;

Перем мМассивОбработчиков; // Массив - массив имен обработчиков

//{benony
Перем мТекстОбработчикаДоИзменений;
Перем мПутьКФайлуДоИзменений;
Перем мПутьКФайлуТекущий;
//}benony

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// план обмена должен быть задан
	Если Владелец.ПланОбмена.Пустая() Тогда
		
		Предупреждение("Для регистрации не задан план обмена! Настройка правил регистрации объектов не может быть выполнена.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// получаем дерево отбора по свойствам плана обмена из ИБ
	ПолучитьДеревоОтбораПоСвойствамПланаОбмена();
	
	// получаем дерево отбора по свойствам объекта из ИБ
	ПолучитьДеревоОтбораПоСвойствамОбъекта();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Конфигурация = Владелец.Конфигурация;
	ПланОбмена   = Владелец.ПланОбмена;
	
	ЗаполнитьСписокВыбораРеквизитаРежимаВыгрузки();
	
	// получаем значения алгоритмов
	ПолучитьАлгоритмыПриОткрытии(ЭтаФорма, ЭтотОбъект, мМассивОбработчиков);
	
	ОбновитьПиктограммыАлгоритмов(мМассивОбработчиков, ЭлементыФормы.ПанельАлгоритмы, ЭлементыФормы);
	
	УстановитьЗаголовокФормы();
	
	РедакторОбработчиковКлиент.УстановитьСостояниеКнопокПанелиРедактора(ЭлементыФормы, "ПриОткрытии"); //benony
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// сохраняем дерево отбора по свойствам плана обмена в ИБ
	ОтборПоСвойствамПланаОбмена = Новый ХранилищеЗначения(ДеревоОтбораПоСвойствамПланаОбмена);
	
	// сохраняем дерево отбора по свойствам объекта в ИБ
	ОтборПоСвойствамОбъекта = Новый ХранилищеЗначения(ДеревоОтбораПоСвойствамОбъекта);
	
	// устанавливаем значения алгоритмов
	УстановитьАлгоритмыПередЗаписью(ЭтаФорма, ЭтотОбъект, мМассивОбработчиков);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

// Процедура - обработчик события "Нажатие" кнопки сформировать наименование.
//
Процедура СформироватьНаименованиеНажатие(Элемент)
	
	Наименование = глНаименованиеПРО(ЭтотОбъект);
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки Назначить группу.
//
Процедура НазначитьГруппуПоУмолчаниюНажатие(Элемент)
	
	УстановитьГруппуПоУмолчаниюДляПРО(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбъектНастройкиПриИзменении(Элемент)
	
	Наименование = глНаименованиеПРО(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПанельАлгоритмыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьПиктограммыАлгоритмов(мМассивОбработчиков, ЭлементыФормы.ПанельАлгоритмы, ЭлементыФормы);
	
КонецПроцедуры

Процедура ДействияФормыИнформацияПоОбработчикам(Кнопка)
	
	// вывод информации по обработчикам событий
	ОткрытьОписаниеОбработчиковСобытий("ПравилаРегистрацииОбъектов", ЭлементыФормы.ПанельАлгоритмы.ТекущаяСтраница.Имя, ЭтаФорма);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПомощь(Кнопка)
	
	ПоказатьИнформациюОБыстромОсвоении("ПравилаРегистрацииОбъектов");
	
КонецПроцедуры

Процедура НаименованиеПриИзменении(Элемент)
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

Процедура ОбъектНастройкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	мФормаВыбораОбъекта.ПланОбмена = ПланОбмена;
	мФормаВыбораОбъекта.НачальноеЗначениеВыбора = ОбъектНастройки;
	
	РезультатОткрытия = мФормаВыбораОбъекта.ОткрытьМодально();
	
	Если ТипЗнч(РезультатОткрытия) = Тип("СправочникСсылка.Объекты") Тогда
		
		ОбъектНастройки = РезультатОткрытия;
		
		ОбъектНастройкиПриИзменении(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельТаблицыОтбораПоСвойствамПланаОбмена

Процедура КоманднаяПанельТаблицыОтбораПоСвойствамПланаОбменаДобавитьГруппу(Кнопка)
	
	// добавляем группу с учетом иерархии
	ДобавитьСтрокуВТаблицуОтбора("ОтборПоСвойствамПланаОбмена", ДеревоОтбораПоСвойствамПланаОбмена, Истина, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицыОтбораПоСвойствамПланаОбменаДобавитьСвойствоОбъекта(Кнопка)
	
	// добавляем строку свойства объекта с учетом иерархии
	ДобавитьСтрокуВТаблицуОтбора("ОтборПоСвойствамПланаОбмена", ДеревоОтбораПоСвойствамПланаОбмена, Ложь, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицыОтбораПоСвойствамПланаОбменаДобавитьЗначениеКонстанты(Кнопка)
	
	// добавляем строку константы с учетом иерархии
	ДобавитьСтрокуВТаблицуОтбора("ОтборПоСвойствамПланаОбмена", ДеревоОтбораПоСвойствамПланаОбмена, Ложь, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельТаблицыОтбораПоСвойствамОбъекта

Процедура КоманднаяПанельТаблицыОтбораПоСвойствамОбъектаДобавитьГруппу(Кнопка)
	
	// добавляем группу с учетом иерархии
	ДобавитьСтрокуВТаблицуОтбора("ОтборПоСвойствамОбъекта", ДеревоОтбораПоСвойствамОбъекта, Истина, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицыОтбораПоСвойствамОбъектаДобавитьСвойствоОбъекта(Кнопка)
	
	// добавляем строку свойства объекта с учетом иерархии
	ДобавитьСтрокуВТаблицуОтбора("ОтборПоСвойствамОбъекта", ДеревоОтбораПоСвойствамОбъекта, Ложь, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОтборПоСвойствамПланаОбмена

Процедура ОтборПоСвойствамПланаОбменаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ОтборПоСвойствамПланаОбменаПередУдалением(Элемент, Отказ)
	
	ПередУдалением(Элемент, Отказ);
	
КонецПроцедуры

Процедура ОтборПоСвойствамПланаОбменаПередНачаломИзменения(Элемент, Отказ)
	
	ПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОтборПоСвойствамОбъекта

Процедура ОтборПоСвойствамОбъектаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ОтборПоСвойствамОбъектаПередУдалением(Элемент, Отказ)
	
	ПередУдалением(Элемент, Отказ);
	
КонецПроцедуры

Процедура ОтборПоСвойствамОбъектаПередНачаломИзменения(Элемент, Отказ)
	
	ПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ

Процедура ПередУдалением(Элемент, Отказ)
	
	Ответ = Вопрос("Удалить элемент отбора?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.СвойствоОбъекта.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ЗначениеКонстанты.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.ЭтоГруппа Тогда // для группы
		
		ОформлениеСтроки.Ячейки.СвойствоОбъекта.Картинка = БиблиотекаКартинок.Группа;
		
		ОформлениеСтроки.Ячейки.СвойствоОбъекта.УстановитьТекст(Строка(ДанныеСтроки.БулевоЗначениеГруппы));
		
		// пустую группу считаем невалидной
		Если ДанныеСтроки.Строки.Количество() = 0 Тогда
			
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
			
		КонецЕсли;
		
	Иначе // для элемента
		
		
		Если ЭтоРеквизитТабличнойЧасти(ДанныеСтроки.СвойствоПланаОбмена) Тогда
			
			// картинка для реквизитов Плана обмена
			ОформлениеСтроки.Ячейки.СвойствоПланаОбмена.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.СвойствоПланаОбмена.Картинка = БиблиотекаКартинок.ТабличнаяЧасть;
			
		КонецЕсли;
		
		// если свойство не установлено, то выводим соответсвующее обозначение в ячейке
		УстановитьТекстЯчейкиДляПустогоЗначения(ДанныеСтроки, ОформлениеСтроки, "СвойствоОбъекта");
		УстановитьТекстЯчейкиДляПустогоЗначения(ДанныеСтроки, ОформлениеСтроки, "СвойствоПланаОбмена");
		УстановитьТекстЯчейкиДляПустогоЗначения(ДанныеСтроки, ОформлениеСтроки, "ЗначениеКонстанты");
		
		Если ДанныеСтроки.ЭтоСтрокаКонстанты Тогда
			
			ОформлениеСтроки.Ячейки.СвойствоОбъекта.Картинка = БиблиотекаКартинок.ВидРасчета;
			ОформлениеСтроки.ЦветФона = WebЦвета.ШелковыйОттенок;
			
		Иначе
			
			ОформлениеСтроки.Ячейки.СвойствоОбъекта.Картинка = БиблиотекаКартинок.Элемент;
			
		КонецЕсли;
		
		Если ДанныеСтроки.ВидЭлементаОтбора = глЭлементОтбораСвойствоАлгоритмЗначения() Тогда
			
			ОформлениеСтроки.Ячейки.ЗначениеКонстанты.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ИнвертироватьБулевоЗначениеГруппы(ТекущиеДанные);
		
	ИначеЕсли ЭтоТекущаяКолонка(Элемент, "СвойствоОбъекта") Тогда // для колонки "СвойствоОбъекта"
		
		Если ТекущиеДанные.ЭтоСтрокаКонстанты Тогда
			
			// выбираем значение константы
			ВыбратьЗначениеКонстанты(Элемент);
			
		Иначе
			
			// открываем форму выбора свойства
			ВыбратьЗначениеСвойстваОбъекта(Элемент);
			
		КонецЕсли;
	
	ИначеЕсли ЭтоТекущаяКолонка(Элемент, "СвойствоПланаОбмена") Тогда // для колонки "СвойствоПланаОбмена"
		
		// открываем форму выбора свойства для Плана обмена
		ВыбратьЗначениеСвойстваПланаОбмена(Элемент, ТекущиеДанные.ЭтоСтрокаКонстанты);
		
	ИначеЕсли ЭтоТекущаяКолонка(Элемент, "ЗначениеКонстанты") Тогда // для колонки "ЗначениеКонстанты"
		
		// открываем форму задания значения константы
		ОткрытьФормуЗаданияЗначенияКонстанты(Элемент);
		
	ИначеЕсли ЭтоТекущаяКолонка(Элемент, "ВидСравнения") Тогда // для колонки "ВидСравнения"
		
		// открываем список значений для выбора вида сравнения
		ВыбратьЗначениеВидаСравнения(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуОтбора(ИмяТабличногоПоля, ДеревоЗначений, ЭтоГруппа, ЭтоСтрокаКонстанты)
	
	Если Не ЗначенияОбъектовУказаны() Тогда
		Возврат;
	КонецЕсли;
	
	// определяем родительскую строку для добавления новой строки
	
	// по умолчанию используем корневые строки
	СтрокиРодителя = ДеревоЗначений.Строки;
	
	// определяем текущие строки
	ТекущиеДанные = ЭлементыФормы[ИмяТабличногоПоля].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ЭтоГруппа Тогда
			
			СтрокиРодителя = ТекущиеДанные.Строки; // используем строки группы
			
		Иначе
			
			Если ТекущиеДанные.Родитель = Неопределено Тогда // используем корневые строки (см. выше)
				
			Иначе // используем текущие строки
				
				СтрокиРодителя = ТекущиеДанные.Родитель.Строки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// добавляем новый элемент в дерево
	НоваяСтрока = СтрокиРодителя.Добавить();
	НоваяСтрока.ЭтоГруппа          = ЭтоГруппа;
	НоваяСтрока.ЭтоСтрокаКонстанты = ЭтоСтрокаКонстанты;
	
	Если ЭтоГруппа Тогда
		
		// для групп устанавливаем булево значение группы
		НоваяСтрока.БулевоЗначениеГруппы = Перечисления.БулевыОперации.И;
		
	Иначе
		
		ТекущаяКолонкаСтр = ?(ЭтоСтрокаКонстанты, "СвойствоПланаОбмена", "СвойствоОбъекта");
		
		Элемент = Новый Структура;
		Элемент.Вставить("Имя",            ИмяТабличногоПоля);
		Элемент.Вставить("ТекущаяКолонка", ЭлементыФормы[ИмяТабличногоПоля].Колонки[ТекущаяКолонкаСтр]);
		Элемент.Вставить("ТекущиеДанные",  НоваяСтрока);
		
		// для элементов сразу открываем форму выбора свойства
		ПередНачаломИзменения(Элемент, Ложь);
		
	КонецЕсли;
	
	Если СтрокиРодителя.Родитель <> Неопределено Тогда
		
		// разворачиваем родительскую группу
		ЭлементыФормы[ИмяТабличногоПоля].Развернуть(СтрокиРодителя.Родитель);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПолучитьДеревоОтбораПоСвойствамПланаОбмена()
	
	ОтборПоСвойствамПланаОбменаРеквизит = ОтборПоСвойствамПланаОбмена.Получить();
	
	Если ТипЗнч(ОтборПоСвойствамПланаОбменаРеквизит) <> Тип("ДеревоЗначений") Тогда
		
		ОтборПоСвойствамПланаОбменаРеквизит = ИнициализацияДереваОтбораПоСвойствамПланаОбмена();
		
	КонецЕсли;
	
	ПроверитьСоставПолейТаблицыЗначений(ОтборПоСвойствамПланаОбменаРеквизит, ИнициализацияДереваОтбораПоСвойствамПланаОбмена());
	
	ДеревоОтбораПоСвойствамПланаОбмена = ОтборПоСвойствамПланаОбменаРеквизит;
	
КонецПроцедуры

Процедура ПолучитьДеревоОтбораПоСвойствамОбъекта()
	
	ОтборПоСвойствамОбъектаРеквизит = ОтборПоСвойствамОбъекта.Получить();
	
	Если ТипЗнч(ОтборПоСвойствамОбъектаРеквизит) <> Тип("ДеревоЗначений") Тогда
		
		ОтборПоСвойствамОбъектаРеквизит = ИнициализацияДереваОтбораПоСвойствамОбъекта();
		
	КонецЕсли;
	
	ПроверитьСоставПолейТаблицыЗначений(ОтборПоСвойствамОбъектаРеквизит, ИнициализацияДереваОтбораПоСвойствамОбъекта());
	
	ДеревоОтбораПоСвойствамОбъекта = ОтборПоСвойствамОбъектаРеквизит;
	
КонецПроцедуры

Процедура ВыбратьЗначениеСвойстваОбъекта(Элемент)
	
	ОтборТипов = Новый Массив; // нет отбора по типам свойств объекта
	
	мФормаВыбораСвойствОбъекта.ОграничениеВыбораТипа    = ОтборТипов;
	мФормаВыбораСвойствОбъекта.ОсновнойОбъект           = ОбъектНастройки;
	мФормаВыбораСвойствОбъекта.ОтображатьТабличныеЧасти = Ложь;
	мФормаВыбораСвойствОбъекта.НачальноеЗначениеВыбора = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(Элемент.ТекущиеДанные.СвойствоОбъекта, ".").Получить(0);
	
	Если мФормаВыбораСвойствОбъекта.ОткрытьМодально() = Истина Тогда
		
		Элемент.ТекущиеДанные.СвойствоОбъекта       = мФормаВыбораСвойствОбъекта.ВыбранноеСвойствоОбъекта;
		Элемент.ТекущиеДанные.ТипСвойстваОбъекта    = мФормаВыбораСвойствОбъекта.ВыбранныйТипСвойства;
		Элемент.ТекущиеДанные.ТаблицаСвойствОбъекта = мФормаВыбораСвойствОбъекта.ТаблицаСвойств;
		
		// устанавливаем вид сравнения для элемента из списка допустимых видов сравнения
		УстановитьВидСравненияДляЭлемента(Элемент);
		
	Иначе
		
		ОбработатьНажатиеКнопкиОтмена(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьЗначениеСвойстваПланаОбмена(Элемент, ЭтоСтрокаКонстанты)
	
	Если ЭтоСтрокаКонстанты Тогда
		
		ОтборТипов = ПолучитьМассивПримитивныхТипов(); // можно выбирать только примитивные типы
	Иначе
		
		ОтборТипов = Новый Массив;
		ОтборТипов.Добавить(Элемент.ТекущиеДанные.ТипСвойстваОбъекта);
	КонецЕсли;
	
	мФормаВыбораСвойствОбъекта.ОграничениеВыбораТипа    = ОтборТипов;
	мФормаВыбораСвойствОбъекта.ОсновнойОбъект           = ПланОбмена;
	мФормаВыбораСвойствОбъекта.ОтображатьТабличныеЧасти = Истина;
	мФормаВыбораСвойствОбъекта.НачальноеЗначениеВыбора = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(Элемент.ТекущиеДанные.СвойствоПланаОбмена, ".").Получить(0);
	
	Если мФормаВыбораСвойствОбъекта.ОткрытьМодально() = Истина Тогда
		
		// проверяем введенное значение константы на соответсвие выбранному типу
		Если   ЭтоСтрокаКонстанты
			И (Элемент.ТекущиеДанные.ТипСвойстваОбъекта <> мФормаВыбораСвойствОбъекта.ВыбранныйТипСвойства) Тогда
			
			// если тип константы изменили, то ее значение сбрасываем
			Элемент.ТекущиеДанные.СвойствоОбъекта = "";
			
		КонецЕсли;
		
		Элемент.ТекущиеДанные.СвойствоПланаОбмена       = мФормаВыбораСвойствОбъекта.ВыбранноеСвойствоОбъекта;
		Элемент.ТекущиеДанные.ТипСвойстваОбъекта        = мФормаВыбораСвойствОбъекта.ВыбранныйТипСвойства;
		Элемент.ТекущиеДанные.ТаблицаСвойствПланаОбмена = мФормаВыбораСвойствОбъекта.ТаблицаСвойств;
		
		// устанавливаем вид сравнения для элемента из списка допустимых видов сравнения
		УстановитьВидСравненияДляЭлемента(Элемент);
		
	Иначе
		
		ОбработатьНажатиеКнопкиОтмена(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьНажатиеКнопкиОтмена(Элемент)
	
	Если Элемент.ТекущиеДанные.Родитель = Неопределено Тогда
		
		ЭлементыФормы[Элемент.Имя].Значение.Строки.Удалить(Элемент.ТекущиеДанные);
		
	Иначе
		
		Элемент.ТекущиеДанные.Родитель.Строки.Удалить(Элемент.ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьЗначениеВидаСравнения(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимыеВидыСравнения = глПолучитьСписокДопустимыхВидовСравнения(ТекущиеДанные.ТипСвойстваОбъекта.Тип);
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзМеню(ДопустимыеВидыСравнения, Элемент);
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ТекущиеДанные.ВидСравнения = ВыбранныйЭлемент.Значение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьЗначениеКонстанты(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Тип = ТекущиеДанные.ТипСвойстваОбъекта.Тип;
	
	Если Не глЭтоПримитивныйТип(Тип) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Элемент.ТекущаяКолонка.Имя;
	
	ОписаниеТипов = Новый ОписаниеТипов(Строка(Тип));
	
	ВыбранноеЗначение = ТекущиеДанные[ИмяКолонки];
	
	Если ВвестиЗначение(ВыбранноеЗначение, "Укажите значение:", ОписаниеТипов) Тогда
		
		ТекущиеДанные[ИмяКолонки] = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуЗаданияЗначенияКонстанты(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипСвойстваОбъекта = ТекущиеДанные.ТипСвойстваОбъекта;
	
	ФормаЭлементаОтбора = Справочники.ПравилаРегистрацииОбъектов.ПолучитьФорму("ФормаЭлементаОтбора");
	ФормаЭлементаОтбора.ТипЗначенияСтрокой = ТипСвойстваОбъекта.Имя;
	ФормаЭлементаОтбора.ЭтоПримитивныйТип  = глЭтоПримитивныйТип(ТипСвойстваОбъекта.Тип);
	ФормаЭлементаОтбора.Результат          = ТекущиеДанные.ЗначениеКонстанты;
	ФормаЭлементаОтбора.ВидЭлементаОтбора  = ТекущиеДанные.ВидЭлементаОтбора;
	
	Если ФормаЭлементаОтбора.ОткрытьМодально() = Истина Тогда
		
		ТекущиеДанные["ЗначениеКонстанты"] = ФормаЭлементаОтбора.Результат;
		ТекущиеДанные["ВидЭлементаОтбора"] = ФормаЭлементаОтбора.ВидЭлементаОтбора;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекстЯчейкиДляПустогоЗначения(ДанныеСтроки, ОформлениеСтроки, ИмяСвойства)
	
	Если ПустаяСтрока(Строка(ДанныеСтроки[ИмяСвойства])) Тогда
		
		ОформлениеСтроки.Ячейки[ИмяСвойства].УстановитьТекст("< не задано >");
		ОформлениеСтроки.Ячейки[ИмяСвойства].ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидСравненияДляЭлемента(Элемент)
	
	// получаем вид сравнения из списка допустимых видов сравнения
	ДопустимыеВидыСравнения = глПолучитьСписокДопустимыхВидовСравнения(Элемент.ТекущиеДанные.ТипСвойстваОбъекта.Тип);
	
	Если ДопустимыеВидыСравнения.Количество() <> 0 Тогда
		
		ИспользуемыйЭлемент = ДопустимыеВидыСравнения.НайтиПоЗначению(Элемент.ТекущиеДанные.ВидСравнения);
		
		// если в списке выбора нет ранее выбранного элемента, то берем первый из списка
		// если элемент в списке есть, то оставляем все без изменений
		Если ИспользуемыйЭлемент = Неопределено Тогда
			
			Элемент.ТекущиеДанные.ВидСравнения = ДопустимыеВидыСравнения[0].Значение;
			
		КонецЕсли;
		
	Иначе
		
		Элемент.ТекущиеДанные.ВидСравнения = Перечисления.ВидыСравнения.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнвертироватьБулевоЗначениеГруппы(ТекущиеДанные)
	
	ТекущиеДанные.БулевоЗначениеГруппы = ?(ТекущиеДанные.БулевоЗначениеГруппы = Перечисления.БулевыОперации.И,
										 Перечисления.БулевыОперации.ИЛИ,
										 Перечисления.БулевыОперации.И);
	
КонецПроцедуры

// Проверяет состав полей таблицы значений в соответствии с составом полей таблицы-шаблона
// Если колонка в таблице отсутствует, то она будет добавлена из таблицы-шаблона
// Новые колонки добавляются; удаленные колонки в таблиц-шаблоне не удаляются из таблицы
//
// Параметры:
//  Таблица       - ТаблицаЗначений; ДеревоЗначений - таблица в которую будет добавлена колонка при необходимости
//  ТаблицаШаблон - ТаблицаЗначений; ДеревоЗначений - таблица-шаблон, которая используется для сопоставления колонок
// 
Процедура ПроверитьСоставПолейТаблицыЗначений(Таблица, ТаблицаШаблон)
	
	Для Каждого КолонкаТаблицыШаблона Из ТаблицаШаблон.Колонки Цикл
		
		Если Таблица.Колонки.Найти(КолонкаТаблицыШаблона.Имя) = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(Таблица.Колонки.Добавить(), КолонкаТаблицыШаблона);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'ПРО: [Наименование]'");
	Заголовок = СтрЗаменить(Заголовок, "[Наименование]", Наименование);
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораРеквизитаРежимаВыгрузки()
	
	СписокВыбора = ЭлементыФормы.РеквизитРежимаВыгрузкиОбъектовОбмена.СписокВыбора;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвойстваТипы.Ссылка                КАК Свойство,
	|	ПРЕДСТАВЛЕНИЕ(СвойстваТипы.Ссылка) КАК ПредставлениеСвойства
	|ИЗ
	|	Справочник.Свойства.Типы КАК СвойстваТипы
	|ГДЕ
	|	  СвойстваТипы.Ссылка.Владелец  = &Владелец
	|	И СвойстваТипы.Тип.Наименование = &ИмяТипаРежимовВыгрузкиОбъектовОбмена
	|	И СвойстваТипы.Ссылка.Вид       = ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.Реквизит)
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваТипы.Ссылка.Наименование
	|";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", ПланОбмена);
	Запрос.УстановитьПараметр("ИмяТипаРежимовВыгрузкиОбъектовОбмена", глИмяТипаРежимовВыгрузкиОбъектовОбмена());
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокВыбора.Добавить(Выборка.Свойство, Выборка.ПредставлениеСвойства);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоРеквизитТабличнойЧасти(ПолноеНаименованиеСвойства)
	
	Возврат Найти(ПолноеНаименованиеСвойства, "[") <> 0;
	
КонецФункции

Функция ЭтоТекущаяКолонка(Элемент, ИмяКолонки)
	
	Возврат Элемент.ТекущаяКолонка = ЭлементыФормы[Элемент.Имя].Колонки[ИмяКолонки];
	
КонецФункции

Функция ПолучитьМассивПримитивныхТипов()
	
	// возвращаемое значение функции
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(глНайтиОбъектПоТипу(Конфигурация, Перечисления.ТипыОбъектов.Булево));
	МассивТипов.Добавить(глНайтиОбъектПоТипу(Конфигурация, Перечисления.ТипыОбъектов.Дата));
	МассивТипов.Добавить(глНайтиОбъектПоТипу(Конфигурация, Перечисления.ТипыОбъектов.Строка));
	МассивТипов.Добавить(глНайтиОбъектПоТипу(Конфигурация, Перечисления.ТипыОбъектов.Число));
	
	Возврат МассивТипов;
КонецФункции

Функция ЗначенияОбъектовУказаны()
	
	Результат = Не Владелец.ПланОбмена.Пустая() И Не ОбъектНастройки.Пустая();
	
	Если Не Результат Тогда
		
		Предупреждение("Укажите объект настройки!");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РЕДАКТИРОВАНИЕ АЛГОРИТМОВ ОБРАБОТЧИКОВ

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковИзменить(Кнопка)
	
	РедакторОбработчиковКлиент.КомандаРедактораИзменить(ЭлементыФормы, мМассивОбработчиков, мТекстОбработчикаДоИзменений, мПутьКФайлуДоИзменений, мПутьКФайлуТекущий);
	
	ЗапуститьПриложение(мПутьКФайлуТекущий);
	ПодключитьОбработчикОжидания("ПроверитьРазличияВФайлах", 3);
	
КонецПроцедуры

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковЗаписать(Кнопка)
	
	ОтключитьОбработчикОжидания("ПроверитьРазличияВФайлах");
	
	РедакторОбработчиковКлиент.КомандаРедактораЗаписать(ЭлементыФормы, мМассивОбработчиков, мПутьКФайлуТекущий);
	
КонецПроцедуры

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковОтменитьИзменения(Кнопка)
	
	ОтключитьОбработчикОжидания("ПроверитьРазличияВФайлах");
	
	РедакторОбработчиковКлиент.КомандаРедактораОтменитьИзменения(ЭлементыФормы, мМассивОбработчиков, мТекстОбработчикаДоИзменений);
	
КонецПроцедуры

//
//benony
Процедура КоманднаяПанельРедактированиеОбработчиковПоказатьИзменения(Кнопка)
	
	РедакторОбработчиковКлиент.КомандаРедактораПоказатьРазличия(мПутьКФайлуДоИзменений, мПутьКФайлуТекущий);
	
КонецПроцедуры

//
//benony
Процедура ПроверитьРазличияВФайлах()
	
	РедакторОбработчиковКлиент.ОбработчикОжиданияПроверитьРазличия(ЭлементыФормы, мПутьКФайлуДоИзменений, мПутьКФайлуТекущий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ МОДУЛЯ

мФормаВыбораСвойствОбъекта = Справочники.Объекты.ПолучитьФорму("ФормаВыбораСвойствОбъекта");
мФормаВыбораОбъекта = Справочники.Объекты.ПолучитьФорму("ФормаВыбораПоПлануОбмена");

мМассивОбработчиков = ПолучитьМассивИменОбработчиков("ПравилаРегистрацииОбъектов");